
Kurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800ad48  0800ad48  0001ad48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b030  0800b030  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b030  0800b030  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b034  0800b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800b038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001328  2000034c  0800b384  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800b384  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147a4  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003001  00000000  00000000  00034b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00037b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  000388a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a2df  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f05a  00000000  00000000  0005379f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008750d  00000000  00000000  000627f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  000e9d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad2c 	.word	0x0800ad2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800ad2c 	.word	0x0800ad2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a26      	ldr	r2, [pc, #152]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a20      	ldr	r2, [pc, #128]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_GPIO_Init+0xcc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	4815      	ldr	r0, [pc, #84]	; (8000f00 <MX_GPIO_Init+0xd0>)
 8000eac:	f000 fe02 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHT_Pin|HOT_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	21c0      	movs	r1, #192	; 0xc0
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000eb6:	f000 fdfd 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_GPIO_Init+0xd0>)
 8000ed4:	f000 fc94 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LIGHT_Pin|HOT_Pin;
 8000ed8:	23c0      	movs	r3, #192	; 0xc0
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000ef0:	f000 fc86 	bl	8001800 <HAL_GPIO_Init>

}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40011000 	.word	0x40011000
 8000f04:	40010800 	.word	0x40010800

08000f08 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <MX_I2C1_Init+0x58>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f14:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f18:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f48:	f000 fdcc 	bl	8001ae4 <HAL_I2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000f52:	f000 f9ff 	bl	8001354 <Error_Handler>
  }

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000598 	.word	0x20000598
 8000f60:	40005400 	.word	0x40005400

08000f64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <MX_I2C2_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_I2C2_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000fa2:	f000 fd9f 	bl	8001ae4 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f9d2 	bl	8001354 <Error_Handler>
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200005ec 	.word	0x200005ec
 8000fb8:	40005800 	.word	0x40005800
 8000fbc:	000186a0 	.word	0x000186a0

08000fc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <HAL_I2C_MspInit+0xc8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d124      	bne.n	800102a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff8:	23c0      	movs	r3, #192	; 0xc0
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	4619      	mov	r1, r3
 800100a:	4821      	ldr	r0, [pc, #132]	; (8001090 <HAL_I2C_MspInit+0xd0>)
 800100c:	f000 fbf8 	bl	8001800 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101a:	61d3      	str	r3, [r2, #28]
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_I2C_MspInit+0xcc>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001028:	e029      	b.n	800107e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <HAL_I2C_MspInit+0xd4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d124      	bne.n	800107e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_I2C_MspInit+0xcc>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800104c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001052:	2312      	movs	r3, #18
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <HAL_I2C_MspInit+0xd0>)
 8001062:	f000 fbcd 	bl	8001800 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_I2C_MspInit+0xcc>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_I2C_MspInit+0xcc>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40005400 	.word	0x40005400
 800108c:	40021000 	.word	0x40021000
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40005800 	.word	0x40005800

08001098 <I2C_WriteBuffer>:
}

/* USER CODE BEGIN 1 */
//--------------------------------------------------------------
void I2C_WriteBuffer(I2C_HandleTypeDef hi, uint8_t DEV_ADDR, uint8_t sizebuff)
    {
 8001098:	b084      	sub	sp, #16
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af02      	add	r7, sp, #8
 80010a0:	f107 0c08 	add.w	ip, r7, #8
 80010a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (HAL_I2C_Master_Transmit(&hi, (uint16_t) DEV_ADDR,
 80010a8:	e003      	b.n	80010b2 <I2C_WriteBuffer+0x1a>
	    (uint8_t*) &I2C_Buffer, (uint16_t) sizebuff, HAL_MAX_DELAY)
	    != HAL_OK)
	{
	if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF)
 80010aa:	f107 0008 	add.w	r0, r7, #8
 80010ae:	f001 f9a9 	bl	8002404 <HAL_I2C_GetError>
    while (HAL_I2C_Master_Transmit(&hi, (uint16_t) DEV_ADDR,
 80010b2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010b6:	b299      	uxth	r1, r3
 80010b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <I2C_WriteBuffer+0x4c>)
 80010c8:	f107 0008 	add.w	r0, r7, #8
 80010cc:	f000 fe42 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e9      	bne.n	80010aa <I2C_WriteBuffer+0x12>
	    {
	    // Дописать вывод ошибок
	    }
	}
    }
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010de:	b004      	add	sp, #16
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200006e4 	.word	0x200006e4

080010e8 <I2C_ReadBuffer>:

//--------------------------------------------------------------

void I2C_ReadBuffer(I2C_HandleTypeDef hi, uint8_t DEV_ADDR, uint8_t sizebuff)
    {
 80010e8:	b084      	sub	sp, #16
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af02      	add	r7, sp, #8
 80010f0:	f107 0c08 	add.w	ip, r7, #8
 80010f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (HAL_I2C_Master_Receive(&hi, (uint16_t) DEV_ADDR,
 80010f8:	e003      	b.n	8001102 <I2C_ReadBuffer+0x1a>
	    (uint8_t*) &I2C_Buffer, (uint16_t) sizebuff, HAL_MAX_DELAY)
	    != HAL_OK)
	{
	if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF)
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	f001 f981 	bl	8002404 <HAL_I2C_GetError>
    while (HAL_I2C_Master_Receive(&hi, (uint16_t) DEV_ADDR,
 8001102:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001106:	b299      	uxth	r1, r3
 8001108:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800110c:	b29a      	uxth	r2, r3
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <I2C_ReadBuffer+0x4c>)
 8001118:	f107 0008 	add.w	r0, r7, #8
 800111c:	f000 ff18 	bl	8001f50 <HAL_I2C_Master_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1e9      	bne.n	80010fa <I2C_ReadBuffer+0x12>
	    {
	    // Дописать вывод ошибок
	    }
	}
    }
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800112e:	b004      	add	sp, #16
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200006e4 	.word	0x200006e4

08001138 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b097      	sub	sp, #92	; 0x5c
 800113c:	af14      	add	r7, sp, #80	; 0x50
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800113e:	f000 f9cd 	bl	80014dc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001142:	f000 f8ad 	bl	80012a0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001146:	f7ff fe73 	bl	8000e30 <MX_GPIO_Init>
    MX_I2C1_Init();
 800114a:	f7ff fedd 	bl	8000f08 <MX_I2C1_Init>
    MX_I2C2_Init();
 800114e:	f7ff ff09 	bl	8000f64 <MX_I2C2_Init>
    MX_USB_DEVICE_Init();
 8001152:	f007 f8e3 	bl	800831c <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */

    I2C_Buffer[0] = 0b00010000;
 8001156:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <main+0x14c>)
 8001158:	2210      	movs	r2, #16
 800115a:	701a      	strb	r2, [r3, #0]
    I2C_WriteBuffer(hi2c1, 0x46, 1);
 800115c:	4c4a      	ldr	r4, [pc, #296]	; (8001288 <main+0x150>)
 800115e:	2301      	movs	r3, #1
 8001160:	9312      	str	r3, [sp, #72]	; 0x48
 8001162:	2346      	movs	r3, #70	; 0x46
 8001164:	9311      	str	r3, [sp, #68]	; 0x44
 8001166:	4668      	mov	r0, sp
 8001168:	f104 0310 	add.w	r3, r4, #16
 800116c:	2244      	movs	r2, #68	; 0x44
 800116e:	4619      	mov	r1, r3
 8001170:	f007 fd9a 	bl	8008ca8 <memcpy>
 8001174:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001178:	f7ff ff8e 	bl	8001098 <I2C_WriteBuffer>

    I2C_Buffer [0] = 0xD0;
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <main+0x14c>)
 800117e:	22d0      	movs	r2, #208	; 0xd0
 8001180:	701a      	strb	r2, [r3, #0]
    I2C_WriteBuffer(hi2c1, 0xEC, 1);
 8001182:	4c41      	ldr	r4, [pc, #260]	; (8001288 <main+0x150>)
 8001184:	2301      	movs	r3, #1
 8001186:	9312      	str	r3, [sp, #72]	; 0x48
 8001188:	23ec      	movs	r3, #236	; 0xec
 800118a:	9311      	str	r3, [sp, #68]	; 0x44
 800118c:	4668      	mov	r0, sp
 800118e:	f104 0310 	add.w	r3, r4, #16
 8001192:	2244      	movs	r2, #68	; 0x44
 8001194:	4619      	mov	r1, r3
 8001196:	f007 fd87 	bl	8008ca8 <memcpy>
 800119a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800119e:	f7ff ff7b 	bl	8001098 <I2C_WriteBuffer>
    I2C_ReadBuffer(hi2c1, 0xEC, 1);
 80011a2:	4c39      	ldr	r4, [pc, #228]	; (8001288 <main+0x150>)
 80011a4:	2301      	movs	r3, #1
 80011a6:	9312      	str	r3, [sp, #72]	; 0x48
 80011a8:	23ec      	movs	r3, #236	; 0xec
 80011aa:	9311      	str	r3, [sp, #68]	; 0x44
 80011ac:	4668      	mov	r0, sp
 80011ae:	f104 0310 	add.w	r3, r4, #16
 80011b2:	2244      	movs	r2, #68	; 0x44
 80011b4:	4619      	mov	r1, r3
 80011b6:	f007 fd77 	bl	8008ca8 <memcpy>
 80011ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011be:	f7ff ff93 	bl	80010e8 <I2C_ReadBuffer>
    raw_temper = I2C_Buffer[0];
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <main+0x14c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	80fb      	strh	r3, [r7, #6]

    HAL_Delay(500);
 80011c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011cc:	f000 f9e8 	bl	80015a0 <HAL_Delay>
//		sprintf(str_tx, "0x%X", i);
//		CDC_Transmit_FS((uint8_t*) str_tx, strlen(str_tx));
//		// Received an ACK at that address
//		}
//	    }
	I2C_ReadBuffer(hi2c1, 0x46, 2);
 80011d0:	4c2d      	ldr	r4, [pc, #180]	; (8001288 <main+0x150>)
 80011d2:	2302      	movs	r3, #2
 80011d4:	9312      	str	r3, [sp, #72]	; 0x48
 80011d6:	2346      	movs	r3, #70	; 0x46
 80011d8:	9311      	str	r3, [sp, #68]	; 0x44
 80011da:	4668      	mov	r0, sp
 80011dc:	f104 0310 	add.w	r3, r4, #16
 80011e0:	2244      	movs	r2, #68	; 0x44
 80011e2:	4619      	mov	r1, r3
 80011e4:	f007 fd60 	bl	8008ca8 <memcpy>
 80011e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011ec:	f7ff ff7c 	bl	80010e8 <I2C_ReadBuffer>
	raw_light = ((uint16_t) I2C_Buffer[0] << 8) | I2C_Buffer[1];
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <main+0x14c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <main+0x14c>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	80bb      	strh	r3, [r7, #4]
	light = (float) raw_light / 1.2;
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fd44 	bl	8000c94 <__aeabi_ui2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f90a 	bl	8000428 <__aeabi_f2d>
 8001214:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <main+0x154>)
 800121a:	f7ff fa87 	bl	800072c <__aeabi_ddiv>
 800121e:	4603      	mov	r3, r0
 8001220:	460c      	mov	r4, r1
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fc2f 	bl	8000a88 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	603b      	str	r3, [r7, #0]
	sprintf(str_tx, "Light 1: %.1f Lx\n", light);
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff f8fa 	bl	8000428 <__aeabi_f2d>
 8001234:	4603      	mov	r3, r0
 8001236:	460c      	mov	r4, r1
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	4914      	ldr	r1, [pc, #80]	; (8001290 <main+0x158>)
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <main+0x15c>)
 8001240:	f008 f994 	bl	800956c <siprintf>
	if (light <= 100)
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <main+0x160>)
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f7ff fdd4 	bl	8000df4 <__aeabi_fcmple>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <main+0x126>
	    {

	    HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, SET);
 8001252:	2201      	movs	r2, #1
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <main+0x164>)
 8001258:	f000 fc2c 	bl	8001ab4 <HAL_GPIO_WritePin>
 800125c:	e004      	b.n	8001268 <main+0x130>

	    }
	else
	    {

	    HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2140      	movs	r1, #64	; 0x40
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <main+0x164>)
 8001264:	f000 fc26 	bl	8001ab4 <HAL_GPIO_WritePin>

	    }
	CDC_Transmit_FS((uint8_t*) str_tx, strlen(str_tx));
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <main+0x15c>)
 800126a:	f7fe ff71 	bl	8000150 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29b      	uxth	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <main+0x15c>)
 8001276:	f007 f90f 	bl	8008498 <CDC_Transmit_FS>
	HAL_Delay(100);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f000 f990 	bl	80015a0 <HAL_Delay>
	I2C_ReadBuffer(hi2c1, 0x46, 2);
 8001280:	e7a6      	b.n	80011d0 <main+0x98>
 8001282:	bf00      	nop
 8001284:	200006e4 	.word	0x200006e4
 8001288:	20000598 	.word	0x20000598
 800128c:	3ff33333 	.word	0x3ff33333
 8001290:	0800ad48 	.word	0x0800ad48
 8001294:	200006a4 	.word	0x200006a4
 8001298:	42c80000 	.word	0x42c80000
 800129c:	40010800 	.word	0x40010800

080012a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80012a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012aa:	2228      	movs	r2, #40	; 0x28
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fd05 	bl	8008cbe <memset>
	{
	0
	};
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
	{
	0
	};
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
	};

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012de:	2301      	movs	r3, #1
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 ff40 	bl	800417c <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x66>
	{
	Error_Handler();
 8001302:	f000 f827 	bl	8001354 <Error_Handler>
	}
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	617b      	str	r3, [r7, #20]
	    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2102      	movs	r1, #2
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f9aa 	bl	800467c <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x92>
	{
	Error_Handler();
 800132e:	f000 f811 	bl	8001354 <Error_Handler>
	}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001332:	2310      	movs	r3, #16
 8001334:	607b      	str	r3, [r7, #4]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fb25 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xac>
	{
	Error_Handler();
 8001348:	f000 f804 	bl	8001354 <Error_Handler>
	}
    }
 800134c:	bf00      	nop
 800134e:	3750      	adds	r7, #80	; 0x50
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
    }
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_MspInit+0x5c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x5c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_MspInit+0x60>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_MspInit+0x60>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <HardFault_Handler+0x4>

080013d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <BusFault_Handler+0x4>

080013e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <UsageFault_Handler+0x4>

080013e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f8aa 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800141e:	f001 fc5a 	bl	8002cd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20001384 	.word	0x20001384

0800142c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <_sbrk+0x50>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x16>
		heap_end = &end;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <_sbrk+0x50>)
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <_sbrk+0x54>)
 8001440:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <_sbrk+0x50>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <_sbrk+0x50>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	466a      	mov	r2, sp
 8001452:	4293      	cmp	r3, r2
 8001454:	d907      	bls.n	8001466 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001456:	f007 fbfd 	bl	8008c54 <__errno>
 800145a:	4602      	mov	r2, r0
 800145c:	230c      	movs	r3, #12
 800145e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	e006      	b.n	8001474 <_sbrk+0x48>
	}

	heap_end += incr;
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <_sbrk+0x50>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a03      	ldr	r2, [pc, #12]	; (800147c <_sbrk+0x50>)
 8001470:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000368 	.word	0x20000368
 8001480:	20001678 	.word	0x20001678

08001484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001490:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001492:	e003      	b.n	800149c <LoopCopyDataInit>

08001494 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001496:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001498:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800149a:	3104      	adds	r1, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014a4:	d3f6      	bcc.n	8001494 <CopyDataInit>
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014a8:	e002      	b.n	80014b0 <LoopFillZerobss>

080014aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014ac:	f842 3b04 	str.w	r3, [r2], #4

080014b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014b4:	d3f9      	bcc.n	80014aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b6:	f7ff ffe5 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f007 fbd1 	bl	8008c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014be:	f7ff fe3b 	bl	8001138 <main>
  bx lr
 80014c2:	4770      	bx	lr
  ldr r3, =_sidata
 80014c4:	0800b038 	.word	0x0800b038
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014cc:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 80014d0:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 80014d4:	20001674 	.word	0x20001674

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x28>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f945 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff ff32 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f95d 	bl	80017e6 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f925 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	20000008 	.word	0x20000008
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_IncTick+0x1c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_IncTick+0x20>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a03      	ldr	r2, [pc, #12]	; (8001588 <HAL_IncTick+0x20>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000008 	.word	0x20000008
 8001588:	200006ec 	.word	0x200006ec

0800158c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <HAL_GetTick+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	200006ec 	.word	0x200006ec

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff fff0 	bl	800158c <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_Delay+0x40>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffe0 	bl	800158c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <__NVIC_EnableIRQ+0x34>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff90 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff2d 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff42 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff35 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e127      	b.n	8001a64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8116 	bne.w	8001a5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b12      	cmp	r3, #18
 8001838:	d034      	beq.n	80018a4 <HAL_GPIO_Init+0xa4>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d80d      	bhi.n	800185a <HAL_GPIO_Init+0x5a>
 800183e:	2b02      	cmp	r3, #2
 8001840:	d02b      	beq.n	800189a <HAL_GPIO_Init+0x9a>
 8001842:	2b02      	cmp	r3, #2
 8001844:	d804      	bhi.n	8001850 <HAL_GPIO_Init+0x50>
 8001846:	2b00      	cmp	r3, #0
 8001848:	d031      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 800184a:	2b01      	cmp	r3, #1
 800184c:	d01c      	beq.n	8001888 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e048      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001850:	2b03      	cmp	r3, #3
 8001852:	d043      	beq.n	80018dc <HAL_GPIO_Init+0xdc>
 8001854:	2b11      	cmp	r3, #17
 8001856:	d01b      	beq.n	8001890 <HAL_GPIO_Init+0x90>
          break;
 8001858:	e043      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800185a:	4a89      	ldr	r2, [pc, #548]	; (8001a80 <HAL_GPIO_Init+0x280>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d026      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 8001860:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <HAL_GPIO_Init+0x280>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d806      	bhi.n	8001874 <HAL_GPIO_Init+0x74>
 8001866:	4a87      	ldr	r2, [pc, #540]	; (8001a84 <HAL_GPIO_Init+0x284>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d020      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 800186c:	4a86      	ldr	r2, [pc, #536]	; (8001a88 <HAL_GPIO_Init+0x288>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_GPIO_Init+0xae>
          break;
 8001872:	e036      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001874:	4a85      	ldr	r2, [pc, #532]	; (8001a8c <HAL_GPIO_Init+0x28c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 800187a:	4a85      	ldr	r2, [pc, #532]	; (8001a90 <HAL_GPIO_Init+0x290>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d016      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 8001880:	4a84      	ldr	r2, [pc, #528]	; (8001a94 <HAL_GPIO_Init+0x294>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0xae>
          break;
 8001886:	e02c      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e028      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e023      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	3308      	adds	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e01e      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	330c      	adds	r3, #12
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e019      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b6:	2304      	movs	r3, #4
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e012      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	611a      	str	r2, [r3, #16]
          break;
 80018ce:	e008      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	615a      	str	r2, [r3, #20]
          break;
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2bff      	cmp	r3, #255	; 0xff
 80018e6:	d801      	bhi.n	80018ec <HAL_GPIO_Init+0xec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	e001      	b.n	80018f0 <HAL_GPIO_Init+0xf0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d802      	bhi.n	80018fe <HAL_GPIO_Init+0xfe>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x104>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3b08      	subs	r3, #8
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	210f      	movs	r1, #15
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	6a39      	ldr	r1, [r7, #32]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	431a      	orrs	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8096 	beq.w	8001a5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6193      	str	r3, [r2, #24]
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194a:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x29c>)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x19e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x19a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x196>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x192>
 800198e:	2303      	movs	r3, #3
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 8001992:	2304      	movs	r3, #4
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 800199e:	2300      	movs	r3, #0
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b0:	493a      	ldr	r1, [pc, #232]	; (8001a9c <HAL_GPIO_Init+0x29c>)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4938      	ldr	r1, [pc, #224]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4933      	ldr	r1, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	492e      	ldr	r1, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
 8001a26:	e006      	b.n	8001a36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	491f      	ldr	r1, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	491a      	ldr	r1, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60cb      	str	r3, [r1, #12]
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f aed0 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001a74:	bf00      	nop
 8001a76:	372c      	adds	r7, #44	; 0x2c
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	10120000 	.word	0x10120000
 8001a8c:	10310000 	.word	0x10310000
 8001a90:	10320000 	.word	0x10320000
 8001a94:	10220000 	.word	0x10220000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40011400 	.word	0x40011400
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e11f      	b.n	8001d36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fa58 	bl	8000fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b48:	f002 feee 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 8001b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a7b      	ldr	r2, [pc, #492]	; (8001d40 <HAL_I2C_Init+0x25c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d807      	bhi.n	8001b68 <HAL_I2C_Init+0x84>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_I2C_Init+0x260>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e006      	b.n	8001b76 <HAL_I2C_Init+0x92>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a77      	ldr	r2, [pc, #476]	; (8001d48 <HAL_I2C_Init+0x264>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0db      	b.n	8001d36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a72      	ldr	r2, [pc, #456]	; (8001d4c <HAL_I2C_Init+0x268>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a64      	ldr	r2, [pc, #400]	; (8001d40 <HAL_I2C_Init+0x25c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_I2C_Init+0xd4>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	e009      	b.n	8001bcc <HAL_I2C_Init+0xe8>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a63      	ldr	r2, [pc, #396]	; (8001d50 <HAL_I2C_Init+0x26c>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	3301      	adds	r3, #1
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4956      	ldr	r1, [pc, #344]	; (8001d40 <HAL_I2C_Init+0x25c>)
 8001be8:	428b      	cmp	r3, r1
 8001bea:	d80d      	bhi.n	8001c08 <HAL_I2C_Init+0x124>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e59      	subs	r1, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	bf38      	it	cc
 8001c04:	2304      	movcc	r3, #4
 8001c06:	e04f      	b.n	8001ca8 <HAL_I2C_Init+0x1c4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d111      	bne.n	8001c34 <HAL_I2C_Init+0x150>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	440b      	add	r3, r1
 8001c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e012      	b.n	8001c5a <HAL_I2C_Init+0x176>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e58      	subs	r0, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	0099      	lsls	r1, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Init+0x17e>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e022      	b.n	8001ca8 <HAL_I2C_Init+0x1c4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10e      	bne.n	8001c88 <HAL_I2C_Init+0x1a4>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e58      	subs	r0, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6859      	ldr	r1, [r3, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	440b      	add	r3, r1
 8001c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c86:	e00f      	b.n	8001ca8 <HAL_I2C_Init+0x1c4>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	6809      	ldr	r1, [r1, #0]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6911      	ldr	r1, [r2, #16]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68d2      	ldr	r2, [r2, #12]
 8001ce2:	4311      	orrs	r1, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	000186a0 	.word	0x000186a0
 8001d44:	001e847f 	.word	0x001e847f
 8001d48:	003d08ff 	.word	0x003d08ff
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	10624dd3 	.word	0x10624dd3

08001d54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	460b      	mov	r3, r1
 8001d62:	817b      	strh	r3, [r7, #10]
 8001d64:	4613      	mov	r3, r2
 8001d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fc10 	bl	800158c <HAL_GetTick>
 8001d6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	f040 80e0 	bne.w	8001f3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2319      	movs	r3, #25
 8001d82:	2201      	movs	r2, #1
 8001d84:	4970      	ldr	r1, [pc, #448]	; (8001f48 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fc98 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0d3      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2C_Master_Transmit+0x50>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e0cc      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1ea>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d007      	beq.n	8001dca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2221      	movs	r2, #33	; 0x21
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2210      	movs	r2, #16
 8001de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	893a      	ldrh	r2, [r7, #8]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <HAL_I2C_Master_Transmit+0x1f8>)
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e0c:	8979      	ldrh	r1, [r7, #10]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fb02 	bl	800241c <I2C_MasterRequestWrite>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e08d      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e38:	e066      	b.n	8001f08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fd12 	bl	8002868 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d107      	bne.n	8001e62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d11b      	bne.n	8001edc <HAL_I2C_Master_Transmit+0x188>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d017      	beq.n	8001edc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6a39      	ldr	r1, [r7, #32]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fd02 	bl	80028ea <I2C_WaitOnBTFFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d107      	bne.n	8001f04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e01a      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d194      	bne.n	8001e3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	00100002 	.word	0x00100002
 8001f4c:	ffff0000 	.word	0xffff0000

08001f50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	817b      	strh	r3, [r7, #10]
 8001f60:	4613      	mov	r3, r2
 8001f62:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fb10 	bl	800158c <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 8238 	bne.w	80023ec <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	497e      	ldr	r1, [pc, #504]	; (8002180 <HAL_I2C_Master_Receive+0x230>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fb98 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e22b      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_Master_Receive+0x54>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e224      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d007      	beq.n	8001fca <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2222      	movs	r2, #34	; 0x22
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	893a      	ldrh	r2, [r7, #8]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_I2C_Master_Receive+0x234>)
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fa84 	bl	8002520 <I2C_MasterRequestRead>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1e5      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	d113      	bne.n	8002052 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e1b9      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	2b01      	cmp	r3, #1
 8002058:	d11d      	bne.n	8002096 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002092:	b662      	cpsie	i
 8002094:	e197      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	2b02      	cmp	r3, #2
 800209c:	d11d      	bne.n	80020da <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
 80020d8:	e175      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002100:	e161      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b03      	cmp	r3, #3
 8002108:	f200 811a 	bhi.w	8002340 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	2b01      	cmp	r3, #1
 8002112:	d123      	bne.n	800215c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fc27 	bl	800296c <I2C_WaitOnRXNEFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e162      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800215a:	e134      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002160:	2b02      	cmp	r3, #2
 8002162:	d150      	bne.n	8002206 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	2200      	movs	r2, #0
 800216c:	4906      	ldr	r1, [pc, #24]	; (8002188 <HAL_I2C_Master_Receive+0x238>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 faa4 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e137      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
 800217e:	bf00      	nop
 8002180:	00100002 	.word	0x00100002
 8002184:	ffff0000 	.word	0xffff0000
 8002188:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021d0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002204:	e0df      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	2200      	movs	r2, #0
 800220e:	497a      	ldr	r1, [pc, #488]	; (80023f8 <HAL_I2C_Master_Receive+0x4a8>)
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa53 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0e6      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002264:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_I2C_Master_Receive+0x4ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	4a65      	ldr	r2, [pc, #404]	; (8002400 <HAL_I2C_Master_Receive+0x4b0>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0a1a      	lsrs	r2, r3, #8
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00da      	lsls	r2, r3, #3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	3b01      	subs	r3, #1
 8002282:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d117      	bne.n	80022ba <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80022ac:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e099      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d1da      	bne.n	800227e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800230a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800233e:	e042      	b.n	80023c6 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fb11 	bl	800296c <I2C_WaitOnRXNEFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e04c      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d118      	bne.n	80023c6 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f ae99 	bne.w	8002102 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	00010004 	.word	0x00010004
 80023fc:	20000000 	.word	0x20000000
 8002400:	14f8b589 	.word	0x14f8b589

08002404 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
	...

0800241c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d006      	beq.n	8002446 <I2C_MasterRequestWrite+0x2a>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d003      	beq.n	8002446 <I2C_MasterRequestWrite+0x2a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002444:	d108      	bne.n	8002458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00b      	b.n	8002470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	2b12      	cmp	r3, #18
 800245e:	d107      	bne.n	8002470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f91d 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e035      	b.n	8002510 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d108      	bne.n	80024c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e01b      	b.n	80024f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c0:	897b      	ldrh	r3, [r7, #10]
 80024c2:	11db      	asrs	r3, r3, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0306 	and.w	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 030f 	orn	r3, r3, #15
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <I2C_MasterRequestWrite+0xfc>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f943 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e010      	b.n	8002510 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <I2C_MasterRequestWrite+0x100>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f933 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	00010008 	.word	0x00010008
 800251c:	00010002 	.word	0x00010002

08002520 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002544:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d006      	beq.n	800255a <I2C_MasterRequestRead+0x3a>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d003      	beq.n	800255a <I2C_MasterRequestRead+0x3a>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002558:	d108      	bne.n	800256c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00b      	b.n	8002584 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	2b11      	cmp	r3, #17
 8002572:	d107      	bne.n	8002584 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002582:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f893 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025aa:	d103      	bne.n	80025b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e079      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c0:	d108      	bne.n	80025d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025c2:	897b      	ldrh	r3, [r7, #10]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	e05f      	b.n	8002694 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025d4:	897b      	ldrh	r3, [r7, #10]
 80025d6:	11db      	asrs	r3, r3, #7
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 0306 	and.w	r3, r3, #6
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f063 030f 	orn	r3, r3, #15
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4930      	ldr	r1, [pc, #192]	; (80026b4 <I2C_MasterRequestRead+0x194>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8b9 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e054      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4929      	ldr	r1, [pc, #164]	; (80026b8 <I2C_MasterRequestRead+0x198>)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8a9 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e044      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002646:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f831 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266e:	d103      	bne.n	8002678 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e017      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800267c:	897b      	ldrh	r3, [r7, #10]
 800267e:	11db      	asrs	r3, r3, #7
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0306 	and.w	r3, r3, #6
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f063 030e 	orn	r3, r3, #14
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <I2C_MasterRequestRead+0x198>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f865 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010008 	.word	0x00010008
 80026b8:	00010002 	.word	0x00010002

080026bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	e025      	b.n	800271a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d021      	beq.n	800271a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7fe ff59 	bl	800158c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d116      	bne.n	800271a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e023      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10d      	bne.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	e00c      	b.n	800275a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d0b6      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002778:	e051      	b.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002788:	d123      	bne.n	80027d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e046      	b.n	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d021      	beq.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7fe fed7 	bl	800158c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f043 0220 	orr.w	r2, r3, #32
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e020      	b.n	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10c      	bne.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4013      	ands	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e00b      	b.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d18d      	bne.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002874:	e02d      	b.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f8ce 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e02d      	b.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d021      	beq.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe fe7d 	bl	800158c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e007      	b.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d1ca      	bne.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f6:	e02d      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f88d 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e02d      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d021      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7fe fe3c 	bl	800158c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d1ca      	bne.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002978:	e042      	b.n	8002a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b10      	cmp	r3, #16
 8002986:	d119      	bne.n	80029bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0210 	mvn.w	r2, #16
 8002990:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e029      	b.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7fe fde6 	bl	800158c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d1b5      	bne.n	800297a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2e:	d11b      	bne.n	8002a68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	b08b      	sub	sp, #44	; 0x2c
 8002a78:	af06      	add	r7, sp, #24
 8002a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0fd      	b.n	8002c82 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f005 fe30 	bl	8008700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 f849 	bl	8004b44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	687e      	ldr	r6, [r7, #4]
 8002aba:	466d      	mov	r5, sp
 8002abc:	f106 0410 	add.w	r4, r6, #16
 8002ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	1d33      	adds	r3, r6, #4
 8002aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	f002 f813 	bl	8004af8 <USB_CoreInit>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0ce      	b.n	8002c82 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 f844 	bl	8004b78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e04c      	b.n	8002b90 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3301      	adds	r3, #1
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	b298      	uxth	r0, r3
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3336      	adds	r3, #54	; 0x36
 8002b34:	4602      	mov	r2, r0
 8002b36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	3303      	adds	r3, #3
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3338      	adds	r3, #56	; 0x38
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	333c      	adds	r3, #60	; 0x3c
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3340      	adds	r3, #64	; 0x40
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d3ad      	bcc.n	8002af6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e044      	b.n	8002c2a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	3301      	adds	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3b5      	bcc.n	8002ba0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	687e      	ldr	r6, [r7, #4]
 8002c3c:	466d      	mov	r5, sp
 8002c3e:	f106 0410 	add.w	r4, r6, #16
 8002c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	602b      	str	r3, [r5, #0]
 8002c4a:	1d33      	adds	r3, r6, #4
 8002c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f001 ff9e 	bl	8004b90 <USB_DevInit>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00d      	b.n	8002c82 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 ff38 	bl	8006af0 <USB_DevDisconnect>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_PCD_Start+0x16>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e016      	b.n	8002cce <HAL_PCD_Start+0x44>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 ff33 	bl	8004b18 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f005 ff96 	bl	8008be6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 ff0c 	bl	8006adc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b088      	sub	sp, #32
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 ff0e 	bl	8006b04 <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb61 	bl	80033bc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 ff00 	bl	8006b04 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d112      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	b292      	uxth	r2, r2
 8002d24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f005 fd64 	bl	80087f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d2e:	2100      	movs	r1, #0
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f925 	bl	8002f80 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 fee2 	bl	8006b04 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 fecb 	bl	8006b04 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d10b      	bne.n	8002d92 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 feb4 	bl	8006b04 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d126      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0208 	bic.w	r2, r2, #8
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f005 fd45 	bl	8008868 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fe82 	bl	8006b04 <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0a:	f040 8084 	bne.w	8002f16 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e011      	b.n	8002e38 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
 8002e22:	8812      	ldrh	r2, [r2, #0]
 8002e24:	b292      	uxth	r2, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	f107 0120 	add.w	r1, r7, #32
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	3301      	adds	r3, #1
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	d9ea      	bls.n	8002e14 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	b292      	uxth	r2, r2
 8002e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e6e:	bf00      	nop
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f6      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e010      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	7ffa      	ldrb	r2, [r7, #31]
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	440a      	add	r2, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f107 0120 	add.w	r1, r7, #32
 8002eb4:	440b      	add	r3, r1
 8002eb6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002eba:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ebc:	7ffb      	ldrb	r3, [r7, #31]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d9eb      	bls.n	8002ea0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	b292      	uxth	r2, r2
 8002edc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0204 	orr.w	r2, r2, #4
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f005 fc8f 	bl	8008834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fdf2 	bl	8006b04 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d10e      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f005 fc48 	bl	80087da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fdd8 	bl	8006b04 <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5e:	d10b      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f72:	b292      	uxth	r2, r2
 8002f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_SetAddress+0x1a>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e013      	b.n	8002fc2 <HAL_PCD_SetAddress+0x42>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fd7f 	bl	8006ab6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	70fb      	strb	r3, [r7, #3]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	803b      	strh	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da0e      	bge.n	800300e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	705a      	strb	r2, [r3, #1]
 800300c:	e00e      	b.n	800302c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003038:	883a      	ldrh	r2, [r7, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	78ba      	ldrb	r2, [r7, #2]
 8003042:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d102      	bne.n	8003062 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_PCD_EP_Open+0xa6>
 800306c:	2302      	movs	r3, #2
 800306e:	e00e      	b.n	800308e <HAL_PCD_EP_Open+0xc4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68f9      	ldr	r1, [r7, #12]
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fda6 	bl	8004bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800308c:	7afb      	ldrb	r3, [r7, #11]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da0e      	bge.n	80030c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	705a      	strb	r2, [r3, #1]
 80030c6:	e00e      	b.n	80030e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_EP_Close+0x6a>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e00e      	b.n	800311e <HAL_PCD_EP_Close+0x88>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	4618      	mov	r0, r3
 8003110:	f002 f8c8 	bl	80052a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	460b      	mov	r3, r1
 8003134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 0207 	and.w	r2, r3, #7
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	b2da      	uxtb	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	4618      	mov	r0, r3
 8003184:	f002 fa7a 	bl	800567c <USB_EPStartXfer>
 8003188:	e005      	b.n	8003196 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fa73 	bl	800567c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 0207 	and.w	r2, r3, #7
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	460b      	mov	r3, r1
 80031dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2201      	movs	r2, #1
 8003218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	b2da      	uxtb	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6979      	ldr	r1, [r7, #20]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 fa20 	bl	800567c <USB_EPStartXfer>
 800323c:	e005      	b.n	800324a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	4618      	mov	r0, r3
 8003246:	f002 fa19 	bl	800567c <USB_EPStartXfer>
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d901      	bls.n	8003272 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e04c      	b.n	800330c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0e      	bge.n	8003298 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	705a      	strb	r2, [r3, #1]
 8003296:	e00c      	b.n	80032b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_PCD_EP_SetStall+0x7e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e01c      	b.n	800330c <HAL_PCD_EP_SetStall+0xb8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 faeb 	bl	80068bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f003 fc10 	bl	8006b22 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d901      	bls.n	8003332 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e040      	b.n	80033b4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003336:	2b00      	cmp	r3, #0
 8003338:	da0e      	bge.n	8003358 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	705a      	strb	r2, [r3, #1]
 8003356:	e00e      	b.n	8003376 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 0207 	and.w	r2, r3, #7
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_PCD_EP_ClrStall+0x82>
 8003392:	2302      	movs	r3, #2
 8003394:	e00e      	b.n	80033b4 <HAL_PCD_EP_ClrStall+0xa0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fad9 	bl	800695c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08e      	sub	sp, #56	; 0x38
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033c4:	e2df      	b.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80033dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8158 	bne.w	8003696 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d152      	bne.n	8003496 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	81fb      	strh	r3, [r7, #14]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3328      	adds	r3, #40	; 0x28
 8003418:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	3302      	adds	r3, #2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	441a      	add	r2, r3
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003454:	2100      	movs	r1, #0
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f005 f9a5 	bl	80087a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 828e 	beq.w	8003986 <PCD_EP_ISR_Handler+0x5ca>
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 8289 	bne.w	8003986 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003480:	b2da      	uxtb	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b292      	uxth	r2, r2
 8003488:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003494:	e277      	b.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d034      	beq.n	800351a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	3306      	adds	r3, #6
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f003 fb66 	bl	8006bc0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003500:	4013      	ands	r3, r2
 8003502:	823b      	strh	r3, [r7, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	8a3a      	ldrh	r2, [r7, #16]
 800350a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800350e:	b292      	uxth	r2, r2
 8003510:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f005 f91a 	bl	800874c <HAL_PCD_SetupStageCallback>
 8003518:	e235      	b.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800351a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800351e:	2b00      	cmp	r3, #0
 8003520:	f280 8231 	bge.w	8003986 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29a      	uxth	r2, r3
 800352c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003530:	4013      	ands	r3, r2
 8003532:	83bb      	strh	r3, [r7, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	8bba      	ldrh	r2, [r7, #28]
 800353a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800353e:	b292      	uxth	r2, r2
 8003540:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	3306      	adds	r3, #6
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <PCD_EP_ISR_Handler+0x1ee>
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d015      	beq.n	80035aa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	6959      	ldr	r1, [r3, #20]
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800358e:	b29b      	uxth	r3, r3
 8003590:	f003 fb16 	bl	8006bc0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	441a      	add	r2, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035a2:	2100      	movs	r1, #0
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f005 f8e3 	bl	8008770 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d112      	bne.n	80035f8 <PCD_EP_ISR_Handler+0x23c>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035dc:	b29a      	uxth	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	e02f      	b.n	8003658 <PCD_EP_ISR_Handler+0x29c>
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b3e      	cmp	r3, #62	; 0x3e
 80035fe:	d813      	bhi.n	8003628 <PCD_EP_ISR_Handler+0x26c>
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <PCD_EP_ISR_Handler+0x25e>
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	3301      	adds	r3, #1
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	b29b      	uxth	r3, r3
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	b29a      	uxth	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	e017      	b.n	8003658 <PCD_EP_ISR_Handler+0x29c>
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <PCD_EP_ISR_Handler+0x286>
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	3b01      	subs	r3, #1
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	b29b      	uxth	r3, r3
 8003646:	029b      	lsls	r3, r3, #10
 8003648:	b29b      	uxth	r3, r3
 800364a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003652:	b29a      	uxth	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003668:	827b      	strh	r3, [r7, #18]
 800366a:	8a7b      	ldrh	r3, [r7, #18]
 800366c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003670:	827b      	strh	r3, [r7, #18]
 8003672:	8a7b      	ldrh	r3, [r7, #18]
 8003674:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003678:	827b      	strh	r3, [r7, #18]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	8a7b      	ldrh	r3, [r7, #18]
 8003680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003690:	b29b      	uxth	r3, r3
 8003692:	8013      	strh	r3, [r2, #0]
 8003694:	e177      	b.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f280 80ea 	bge.w	8003886 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036c8:	4013      	ands	r3, r2
 80036ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e0:	b292      	uxth	r2, r2
 80036e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	7b1b      	ldrb	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d122      	bne.n	8003748 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370a:	b29b      	uxth	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	3306      	adds	r3, #6
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800372c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8087 	beq.w	8003842 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	6959      	ldr	r1, [r3, #20]
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	88da      	ldrh	r2, [r3, #6]
 8003740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003742:	f003 fa3d 	bl	8006bc0 <USB_ReadPMA>
 8003746:	e07c      	b.n	8003842 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	78db      	ldrb	r3, [r3, #3]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d108      	bne.n	8003762 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003752:	461a      	mov	r2, r3
 8003754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f923 	bl	80039a2 <HAL_PCD_EP_DB_Receive>
 800375c:	4603      	mov	r3, r0
 800375e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003760:	e06f      	b.n	8003842 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	847b      	strh	r3, [r7, #34]	; 0x22
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800378e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d021      	beq.n	8003800 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	3302      	adds	r3, #2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02a      	beq.n	8003842 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	6959      	ldr	r1, [r3, #20]
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	891a      	ldrh	r2, [r3, #8]
 80037f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037fa:	f003 f9e1 	bl	8006bc0 <USB_ReadPMA>
 80037fe:	e020      	b.n	8003842 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	3306      	adds	r3, #6
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003828:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800382a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	6959      	ldr	r1, [r3, #20]
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	895a      	ldrh	r2, [r3, #10]
 800383c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383e:	f003 f9bf 	bl	8006bc0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003848:	441a      	add	r2, r3
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003854:	441a      	add	r2, r3
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <PCD_EP_ISR_Handler+0x4b0>
 8003862:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	429a      	cmp	r2, r3
 800386a:	d206      	bcs.n	800387a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f004 ff7c 	bl	8008770 <HAL_PCD_DataOutStageCallback>
 8003878:	e005      	b.n	8003886 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fefb 	bl	800567c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d07a      	beq.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	843b      	strh	r3, [r7, #32]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	8c3b      	ldrh	r3, [r7, #32]
 80038d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d8:	b29b      	uxth	r3, r3
 80038da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	78db      	ldrb	r3, [r3, #3]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d108      	bne.n	80038f6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d146      	bne.n	800397a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d141      	bne.n	800397a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	3302      	adds	r3, #2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	8bfb      	ldrh	r3, [r7, #30]
 8003926:	429a      	cmp	r2, r3
 8003928:	d906      	bls.n	8003938 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	8bfb      	ldrh	r3, [r7, #30]
 8003930:	1ad2      	subs	r2, r2, r3
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	619a      	str	r2, [r3, #24]
 8003936:	e002      	b.n	800393e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f004 ff2a 	bl	80087a6 <HAL_PCD_DataInStageCallback>
 8003952:	e018      	b.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	8bfb      	ldrh	r3, [r7, #30]
 800395a:	441a      	add	r2, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	8bfb      	ldrh	r3, [r7, #30]
 8003966:	441a      	add	r2, r3
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fe82 	bl	800567c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003978:	e005      	b.n	8003986 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800397a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800397c:	461a      	mov	r2, r3
 800397e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f91b 	bl	8003bbc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800398e:	b29b      	uxth	r3, r3
 8003990:	b21b      	sxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	f6ff ad17 	blt.w	80033c6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3738      	adds	r7, #56	; 0x38
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d07e      	beq.n	8003ab8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	3302      	adds	r3, #2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	8b7b      	ldrh	r3, [r7, #26]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d306      	bcc.n	80039fc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	8b7b      	ldrh	r3, [r7, #26]
 80039f4:	1ad2      	subs	r2, r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	619a      	str	r2, [r3, #24]
 80039fa:	e002      	b.n	8003a02 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d123      	bne.n	8003a52 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	833b      	strh	r3, [r7, #24]
 8003a26:	8b3b      	ldrh	r3, [r7, #24]
 8003a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a2c:	833b      	strh	r3, [r7, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	441a      	add	r2, r3
 8003a3c:	8b3b      	ldrh	r3, [r7, #24]
 8003a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01f      	beq.n	8003a9c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	82fb      	strh	r3, [r7, #22]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	8afb      	ldrh	r3, [r7, #22]
 8003a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a9c:	8b7b      	ldrh	r3, [r7, #26]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8087 	beq.w	8003bb2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6959      	ldr	r1, [r3, #20]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	891a      	ldrh	r2, [r3, #8]
 8003ab0:	8b7b      	ldrh	r3, [r7, #26]
 8003ab2:	f003 f885 	bl	8006bc0 <USB_ReadPMA>
 8003ab6:	e07c      	b.n	8003bb2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	3306      	adds	r3, #6
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	8b7b      	ldrh	r3, [r7, #26]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d306      	bcc.n	8003afa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	8b7b      	ldrh	r3, [r7, #26]
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	e002      	b.n	8003b00 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d123      	bne.n	8003b50 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	83fb      	strh	r3, [r7, #30]
 8003b24:	8bfb      	ldrh	r3, [r7, #30]
 8003b26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b2a:	83fb      	strh	r3, [r7, #30]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	8bfb      	ldrh	r3, [r7, #30]
 8003b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11f      	bne.n	8003b9a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b74:	83bb      	strh	r3, [r7, #28]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	441a      	add	r2, r3
 8003b84:	8bbb      	ldrh	r3, [r7, #28]
 8003b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b9a:	8b7b      	ldrh	r3, [r7, #26]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6959      	ldr	r1, [r3, #20]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	895a      	ldrh	r2, [r3, #10]
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	f003 f807 	bl	8006bc0 <USB_ReadPMA>
    }
  }

  return count;
 8003bb2:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b092      	sub	sp, #72	; 0x48
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8132 	beq.w	8003e3a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	3302      	adds	r3, #2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d906      	bls.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	619a      	str	r2, [r3, #24]
 8003c16:	e002      	b.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d12c      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f004 fdba 	bl	80087a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 822f 	beq.w	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c58:	827b      	strh	r3, [r7, #18]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	8a7b      	ldrh	r3, [r7, #18]
 8003c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]
 8003c7e:	e20d      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01f      	beq.n	8003cca <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 81e3 	bne.w	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cdc:	441a      	add	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ce8:	441a      	add	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d309      	bcc.n	8003d0e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	621a      	str	r2, [r3, #32]
 8003d0c:	e014      	b.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d22:	e009      	b.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d155      	bne.n	8003dec <HAL_PCD_EP_DB_Transmit+0x230>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4413      	add	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	011a      	lsls	r2, r3, #4
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	4413      	add	r3, r2
 8003d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d112      	bne.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	801a      	strh	r2, [r3, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	e047      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x268>
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	2b3e      	cmp	r3, #62	; 0x3e
 8003d98:	d811      	bhi.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x202>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	3301      	adds	r3, #1
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	029b      	lsls	r3, r3, #10
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e032      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x268>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x218>
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	e01b      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x268>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d117      	bne.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x268>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	4413      	add	r3, r2
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	011a      	lsls	r2, r3, #4
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	4413      	add	r3, r2
 8003e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6959      	ldr	r1, [r3, #20]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	891a      	ldrh	r2, [r3, #8]
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f002 fe80 	bl	8006b38 <USB_WritePMA>
 8003e38:	e130      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3306      	adds	r3, #6
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e62:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d306      	bcc.n	8003e7c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	e002      	b.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12c      	bne.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f004 fc88 	bl	80087a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 80fd 	bne.w	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	441a      	add	r2, r3
 8003ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]
 8003ee2:	e0db      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11f      	bne.n	8003f2e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f08:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 80b1 	bne.w	800409c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f40:	441a      	add	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d309      	bcc.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	1ad2      	subs	r2, r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	621a      	str	r2, [r3, #32]
 8003f70:	e014      	b.n	8003f9c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003f7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f86:	e009      	b.n	8003f9c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d155      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	4413      	add	r3, r2
 8003fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	011a      	lsls	r2, r3, #4
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fca:	4413      	add	r3, r2
 8003fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d112      	bne.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x442>
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe6:	801a      	strh	r2, [r3, #0]
 8003fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	e044      	b.n	8004088 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	2b3e      	cmp	r3, #62	; 0x3e
 8004002:	d811      	bhi.n	8004028 <HAL_PCD_EP_DB_Transmit+0x46c>
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_PCD_EP_DB_Transmit+0x45e>
 8004014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004016:	3301      	adds	r3, #1
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	b29b      	uxth	r3, r3
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	b29a      	uxth	r2, r3
 8004022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	e02f      	b.n	8004088 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <HAL_PCD_EP_DB_Transmit+0x482>
 8004038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403a:	3b01      	subs	r3, #1
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004040:	b29b      	uxth	r3, r3
 8004042:	029b      	lsls	r3, r3, #10
 8004044:	b29b      	uxth	r3, r3
 8004046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800404e:	b29a      	uxth	r2, r3
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e018      	b.n	8004088 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	785b      	ldrb	r3, [r3, #1]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d114      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	4413      	add	r3, r2
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	011a      	lsls	r2, r3, #4
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	4413      	add	r3, r2
 800407a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	b29a      	uxth	r2, r3
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6959      	ldr	r1, [r3, #20]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	895a      	ldrh	r2, [r3, #10]
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	b29b      	uxth	r3, r3
 8004098:	f002 fd4e 	bl	8006b38 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b6:	823b      	strh	r3, [r7, #16]
 80040b8:	8a3b      	ldrh	r3, [r7, #16]
 80040ba:	f083 0310 	eor.w	r3, r3, #16
 80040be:	823b      	strh	r3, [r7, #16]
 80040c0:	8a3b      	ldrh	r3, [r7, #16]
 80040c2:	f083 0320 	eor.w	r3, r3, #32
 80040c6:	823b      	strh	r3, [r7, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	8a3b      	ldrh	r3, [r7, #16]
 80040d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3748      	adds	r7, #72	; 0x48
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	817b      	strh	r3, [r7, #10]
 8004104:	4613      	mov	r3, r2
 8004106:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004108:	897b      	ldrh	r3, [r7, #10]
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004114:	897b      	ldrh	r3, [r7, #10]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e009      	b.n	8004140 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800412c:	897a      	ldrh	r2, [r7, #10]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	b29a      	uxth	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	80da      	strh	r2, [r3, #6]
 8004154:	e00b      	b.n	800416e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2201      	movs	r2, #1
 800415a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	b29a      	uxth	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	b29a      	uxth	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr
	...

0800417c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e26c      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8087 	beq.w	80042aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800419c:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d00c      	beq.n	80041c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041a8:	4b8f      	ldr	r3, [pc, #572]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d112      	bne.n	80041da <HAL_RCC_OscConfig+0x5e>
 80041b4:	4b8c      	ldr	r3, [pc, #560]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d10b      	bne.n	80041da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c2:	4b89      	ldr	r3, [pc, #548]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d06c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x12c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d168      	bne.n	80042a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e246      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x76>
 80041e4:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7f      	ldr	r2, [pc, #508]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e02e      	b.n	8004250 <HAL_RCC_OscConfig+0xd4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x98>
 80041fa:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7a      	ldr	r2, [pc, #488]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b78      	ldr	r3, [pc, #480]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a77      	ldr	r2, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800420c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xd4>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0xbc>
 800421e:	4b72      	ldr	r3, [pc, #456]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a71      	ldr	r2, [pc, #452]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6e      	ldr	r2, [pc, #440]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xd4>
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6a      	ldr	r2, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a67      	ldr	r2, [pc, #412]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd f998 	bl	800158c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fd f994 	bl	800158c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e1fa      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xe4>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fd f984 	bl	800158c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd f980 	bl	800158c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1e6      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x10c>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d063      	beq.n	800437e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b6:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042c2:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x18c>
 80042ce:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x176>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1ba      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4939      	ldr	r1, [pc, #228]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b36      	ldr	r3, [pc, #216]	; (80043ec <HAL_RCC_OscConfig+0x270>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fd f939 	bl	800158c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd f935 	bl	800158c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e19b      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4927      	ldr	r1, [pc, #156]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCC_OscConfig+0x270>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fd f918 	bl	800158c <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fd f914 	bl	800158c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e17a      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03a      	beq.n	8004400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d019      	beq.n	80043c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <HAL_RCC_OscConfig+0x274>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fd f8f8 	bl	800158c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fd f8f4 	bl	800158c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e15a      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043be:	2001      	movs	r0, #1
 80043c0:	f000 fac6 	bl	8004950 <RCC_Delay>
 80043c4:	e01c      	b.n	8004400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x274>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043cc:	f7fd f8de 	bl	800158c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d2:	e00f      	b.n	80043f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fd f8da 	bl	800158c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d908      	bls.n	80043f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e140      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	42420000 	.word	0x42420000
 80043f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	4b9e      	ldr	r3, [pc, #632]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e9      	bne.n	80043d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80a6 	beq.w	800455a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b97      	ldr	r3, [pc, #604]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b94      	ldr	r3, [pc, #592]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4a93      	ldr	r2, [pc, #588]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	61d3      	str	r3, [r2, #28]
 800442a:	4b91      	ldr	r3, [pc, #580]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	4b8e      	ldr	r3, [pc, #568]	; (8004674 <HAL_RCC_OscConfig+0x4f8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d118      	bne.n	8004478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004446:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <HAL_RCC_OscConfig+0x4f8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a8a      	ldr	r2, [pc, #552]	; (8004674 <HAL_RCC_OscConfig+0x4f8>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004452:	f7fd f89b 	bl	800158c <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7fd f897 	bl	800158c <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	; 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0fd      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b81      	ldr	r3, [pc, #516]	; (8004674 <HAL_RCC_OscConfig+0x4f8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x312>
 8004480:	4b7b      	ldr	r3, [pc, #492]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4a7a      	ldr	r2, [pc, #488]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6213      	str	r3, [r2, #32]
 800448c:	e02d      	b.n	80044ea <HAL_RCC_OscConfig+0x36e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x334>
 8004496:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6213      	str	r3, [r2, #32]
 80044a2:	4b73      	ldr	r3, [pc, #460]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a72      	ldr	r2, [pc, #456]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6213      	str	r3, [r2, #32]
 80044ae:	e01c      	b.n	80044ea <HAL_RCC_OscConfig+0x36e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d10c      	bne.n	80044d2 <HAL_RCC_OscConfig+0x356>
 80044b8:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	4a6c      	ldr	r2, [pc, #432]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044be:	f043 0304 	orr.w	r3, r3, #4
 80044c2:	6213      	str	r3, [r2, #32]
 80044c4:	4b6a      	ldr	r3, [pc, #424]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a69      	ldr	r2, [pc, #420]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6213      	str	r3, [r2, #32]
 80044d0:	e00b      	b.n	80044ea <HAL_RCC_OscConfig+0x36e>
 80044d2:	4b67      	ldr	r3, [pc, #412]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4a66      	ldr	r2, [pc, #408]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6213      	str	r3, [r2, #32]
 80044de:	4b64      	ldr	r3, [pc, #400]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4a63      	ldr	r2, [pc, #396]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d015      	beq.n	800451e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f2:	f7fd f84b 	bl	800158c <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fd f847 	bl	800158c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f241 3288 	movw	r2, #5000	; 0x1388
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0ab      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	4b57      	ldr	r3, [pc, #348]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ee      	beq.n	80044fa <HAL_RCC_OscConfig+0x37e>
 800451c:	e014      	b.n	8004548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451e:	f7fd f835 	bl	800158c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd f831 	bl	800158c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e095      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ee      	bne.n	8004526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454e:	4b48      	ldr	r3, [pc, #288]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	4a47      	ldr	r2, [pc, #284]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8081 	beq.w	8004666 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004564:	4b42      	ldr	r3, [pc, #264]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	2b08      	cmp	r3, #8
 800456e:	d061      	beq.n	8004634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d146      	bne.n	8004606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_OscConfig+0x4fc>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7fd f805 	bl	800158c <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd f801 	bl	800158c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e067      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	492d      	ldr	r1, [pc, #180]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a19      	ldr	r1, [r3, #32]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	430b      	orrs	r3, r1
 80045d2:	4927      	ldr	r1, [pc, #156]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_OscConfig+0x4fc>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fc ffd5 	bl	800158c <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fc ffd1 	bl	800158c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e037      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x46a>
 8004604:	e02f      	b.n	8004666 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <HAL_RCC_OscConfig+0x4fc>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fc ffbe 	bl	800158c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fc ffba 	bl	800158c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e020      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x498>
 8004632:	e018      	b.n	8004666 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e013      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_OscConfig+0x4f4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	429a      	cmp	r2, r3
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	40007000 	.word	0x40007000
 8004678:	42420060 	.word	0x42420060

0800467c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0d0      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d910      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4965      	ldr	r1, [pc, #404]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b8      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	494d      	ldr	r1, [pc, #308]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d040      	beq.n	800479c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d115      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e073      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06b      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4936      	ldr	r1, [pc, #216]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800476c:	f7fc ff0e 	bl	800158c <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fc ff0a 	bl	800158c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e053      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d210      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4922      	ldr	r1, [pc, #136]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e032      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4916      	ldr	r1, [pc, #88]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	490e      	ldr	r1, [pc, #56]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480a:	f000 f821 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800480e:	4601      	mov	r1, r0
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	5cd3      	ldrb	r3, [r2, r3]
 800481e:	fa21 f303 	lsr.w	r3, r1, r3
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x1cc>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1d0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fc fe6c 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40022000 	.word	0x40022000
 8004840:	40021000 	.word	0x40021000
 8004844:	0800adb8 	.word	0x0800adb8
 8004848:	20000000 	.word	0x20000000
 800484c:	20000004 	.word	0x20000004

08004850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b490      	push	{r4, r7}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004856:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004858:	1d3c      	adds	r4, r7, #4
 800485a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800485c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800487a:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x40>
 800488a:	2b08      	cmp	r3, #8
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x46>
 800488e:	e02d      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004892:	623b      	str	r3, [r7, #32]
      break;
 8004894:	e02d      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	0c9b      	lsrs	r3, r3, #18
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048a2:	4413      	add	r3, r2
 80048a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048b4:	4b14      	ldr	r3, [pc, #80]	; (8004908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	0c5b      	lsrs	r3, r3, #17
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048c2:	4413      	add	r3, r2
 80048c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4a0f      	ldr	r2, [pc, #60]	; (800490c <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ce:	fb02 f203 	mul.w	r2, r2, r3
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	e004      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	623b      	str	r3, [r7, #32]
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ee:	623b      	str	r3, [r7, #32]
      break;
 80048f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f2:	6a3b      	ldr	r3, [r7, #32]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc90      	pop	{r4, r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	0800ad5c 	.word	0x0800ad5c
 8004904:	0800ad6c 	.word	0x0800ad6c
 8004908:	40021000 	.word	0x40021000
 800490c:	007a1200 	.word	0x007a1200
 8004910:	003d0900 	.word	0x003d0900

08004914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004918:	4b02      	ldr	r3, [pc, #8]	; (8004924 <HAL_RCC_GetHCLKFreq+0x10>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	20000000 	.word	0x20000000

08004928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800492c:	f7ff fff2 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 8004930:	4601      	mov	r1, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4a03      	ldr	r2, [pc, #12]	; (800494c <HAL_RCC_GetPCLK1Freq+0x24>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	0800adc8 	.word	0x0800adc8

08004950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <RCC_Delay+0x34>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <RCC_Delay+0x38>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800496c:	bf00      	nop
  }
  while (Delay --);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	60fa      	str	r2, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f9      	bne.n	800496c <RCC_Delay+0x1c>
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000000 	.word	0x20000000
 8004988:	10624dd3 	.word	0x10624dd3

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d07d      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ac:	4b4f      	ldr	r3, [pc, #316]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10d      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	61d3      	str	r3, [r2, #28]
 80049c4:	4b49      	ldr	r3, [pc, #292]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d4:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d118      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ec:	f7fc fdce 	bl	800158c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f2:	e008      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f4:	f7fc fdca 	bl	800158c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e06d      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d027      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d014      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fc fd99 	bl	800158c <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fc fd95 	bl	800158c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e036      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ee      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4917      	ldr	r1, [pc, #92]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	490b      	ldr	r1, [pc, #44]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
 8004af4:	42420440 	.word	0x42420440

08004af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 0014 	add.w	r0, r7, #20
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	b004      	add	sp, #16
 8004b16:	4770      	bx	lr

08004b18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	4013      	ands	r3, r2
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b90:	b084      	sub	sp, #16
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	f107 0014 	add.w	r0, r7, #20
 8004b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	b004      	add	sp, #16
 8004bce:	4770      	bx	lr

08004bd0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b09b      	sub	sp, #108	; 0x6c
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	78db      	ldrb	r3, [r3, #3]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d81f      	bhi.n	8004c42 <USB_ActivateEndpoint+0x72>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <USB_ActivateEndpoint+0x38>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c4b 	.word	0x08004c4b
 8004c14:	08004c27 	.word	0x08004c27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c24:	e012      	b.n	8004c4c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c32:	e00b      	b.n	8004c4c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c40:	e004      	b.n	8004c4c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c48:	e000      	b.n	8004c4c <USB_ActivateEndpoint+0x7c>
      break;
 8004c4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	7b1b      	ldrb	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 8149 	bne.w	8004f50 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8084 	beq.w	8004dd0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	011a      	lsls	r2, r3, #4
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	88db      	ldrh	r3, [r3, #6]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	81fb      	strh	r3, [r7, #14]
 8004d0a:	89fb      	ldrh	r3, [r7, #14]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <USB_ActivateEndpoint+0x17c>
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	81bb      	strh	r3, [r7, #12]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	89bb      	ldrh	r3, [r7, #12]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d020      	beq.n	8004d96 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6a:	813b      	strh	r3, [r7, #8]
 8004d6c:	893b      	ldrh	r3, [r7, #8]
 8004d6e:	f083 0320 	eor.w	r3, r3, #32
 8004d72:	813b      	strh	r3, [r7, #8]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	893b      	ldrh	r3, [r7, #8]
 8004d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]
 8004d94:	e27f      	b.n	8005296 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dac:	817b      	strh	r3, [r7, #10]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
 8004dce:	e262      	b.n	8005296 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	4413      	add	r3, r2
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	011a      	lsls	r2, r3, #4
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	88db      	ldrh	r3, [r3, #6]
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	4413      	add	r3, r2
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	011a      	lsls	r2, r3, #4
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	4413      	add	r3, r2
 8004e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d112      	bne.n	8004e56 <USB_ActivateEndpoint+0x286>
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e02f      	b.n	8004eb6 <USB_ActivateEndpoint+0x2e6>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e5c:	d813      	bhi.n	8004e86 <USB_ActivateEndpoint+0x2b6>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	663b      	str	r3, [r7, #96]	; 0x60
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <USB_ActivateEndpoint+0x2a8>
 8004e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e74:	3301      	adds	r3, #1
 8004e76:	663b      	str	r3, [r7, #96]	; 0x60
 8004e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e017      	b.n	8004eb6 <USB_ActivateEndpoint+0x2e6>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <USB_ActivateEndpoint+0x2d0>
 8004e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	83fb      	strh	r3, [r7, #30]
 8004ec4:	8bfb      	ldrh	r3, [r7, #30]
 8004ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01b      	beq.n	8004f06 <USB_ActivateEndpoint+0x336>
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	83bb      	strh	r3, [r7, #28]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	8bbb      	ldrh	r3, [r7, #28]
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	837b      	strh	r3, [r7, #26]
 8004f1e:	8b7b      	ldrh	r3, [r7, #26]
 8004f20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f24:	837b      	strh	r3, [r7, #26]
 8004f26:	8b7b      	ldrh	r3, [r7, #26]
 8004f28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f2c:	837b      	strh	r3, [r7, #26]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	441a      	add	r2, r3
 8004f38:	8b7b      	ldrh	r3, [r7, #26]
 8004f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]
 8004f4e:	e1a2      	b.n	8005296 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	441a      	add	r2, r3
 8004f74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f9c:	4413      	add	r3, r2
 8004f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	011a      	lsls	r2, r3, #4
 8004fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	891b      	ldrh	r3, [r3, #8]
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd0:	4413      	add	r3, r2
 8004fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	011a      	lsls	r2, r3, #4
 8004fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	895b      	ldrh	r3, [r3, #10]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f040 8091 	bne.w	8005120 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800500c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800500e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01b      	beq.n	800504e <USB_ActivateEndpoint+0x47e>
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	873b      	strh	r3, [r7, #56]	; 0x38
 800505c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01b      	beq.n	800509e <USB_ActivateEndpoint+0x4ce>
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800508a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fc:	867b      	strh	r3, [r7, #50]	; 0x32
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]
 800511e:	e0ba      	b.n	8005296 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005130:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01d      	beq.n	8005178 <USB_ActivateEndpoint+0x5a8>
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005188:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01d      	beq.n	80051d0 <USB_ActivateEndpoint+0x600>
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	78db      	ldrb	r3, [r3, #3]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d024      	beq.n	8005222 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051f6:	f083 0320 	eor.w	r3, r3, #32
 80051fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	441a      	add	r2, r3
 8005208:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800520c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	b29b      	uxth	r3, r3
 800521e:	8013      	strh	r3, [r2, #0]
 8005220:	e01d      	b.n	800525e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005292:	b29b      	uxth	r3, r3
 8005294:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800529a:	4618      	mov	r0, r3
 800529c:	376c      	adds	r7, #108	; 0x6c
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b08d      	sub	sp, #52	; 0x34
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 808e 	bne.w	80053d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d044      	beq.n	800534a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	81bb      	strh	r3, [r7, #12]
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <USB_DeactivateEndpoint+0x6c>
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	817b      	strh	r3, [r7, #10]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005326:	813b      	strh	r3, [r7, #8]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]
 8005348:	e192      	b.n	8005670 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	827b      	strh	r3, [r7, #18]
 8005358:	8a7b      	ldrh	r3, [r7, #18]
 800535a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01b      	beq.n	800539a <USB_DeactivateEndpoint+0xf6>
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	823b      	strh	r3, [r7, #16]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8a3b      	ldrh	r3, [r7, #16]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	81fb      	strh	r3, [r7, #14]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
 80053d2:	e14d      	b.n	8005670 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 80a5 	bne.w	8005528 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	843b      	strh	r3, [r7, #32]
 80053ec:	8c3b      	ldrh	r3, [r7, #32]
 80053ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01b      	beq.n	800542e <USB_DeactivateEndpoint+0x18a>
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	83fb      	strh	r3, [r7, #30]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8bfb      	ldrh	r3, [r7, #30]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	83bb      	strh	r3, [r7, #28]
 800543c:	8bbb      	ldrh	r3, [r7, #28]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <USB_DeactivateEndpoint+0x1da>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	837b      	strh	r3, [r7, #26]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8b7b      	ldrh	r3, [r7, #26]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	833b      	strh	r3, [r7, #24]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	8b3b      	ldrh	r3, [r7, #24]
 80054a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	82fb      	strh	r3, [r7, #22]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	8afb      	ldrh	r3, [r7, #22]
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005504:	82bb      	strh	r3, [r7, #20]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	8abb      	ldrh	r3, [r7, #20]
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]
 8005526:	e0a3      	b.n	8005670 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <USB_DeactivateEndpoint+0x2d4>
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005586:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <USB_DeactivateEndpoint+0x324>
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	b29b      	uxth	r3, r3
 8005636:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3734      	adds	r7, #52	; 0x34
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b0c4      	sub	sp, #272	; 0x110
 8005680:	af00      	add	r7, sp, #0
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	6018      	str	r0, [r3, #0]
 8005686:	463b      	mov	r3, r7
 8005688:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b01      	cmp	r3, #1
 8005692:	f040 8557 	bne.w	8006144 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d905      	bls.n	80056b2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80056b0:	e004      	b.n	80056bc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056bc:	463b      	mov	r3, r7
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	7b1b      	ldrb	r3, [r3, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d12c      	bne.n	8005720 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6959      	ldr	r1, [r3, #20]
 80056cc:	463b      	mov	r3, r7
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	88da      	ldrh	r2, [r3, #6]
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	1d38      	adds	r0, r7, #4
 80056da:	6800      	ldr	r0, [r0, #0]
 80056dc:	f001 fa2c 	bl	8006b38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4413      	add	r3, r2
 8005704:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005708:	f107 0310 	add.w	r3, r7, #16
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005712:	b29a      	uxth	r2, r3
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	f000 bcdd 	b.w	80060da <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	78db      	ldrb	r3, [r3, #3]
 8005726:	2b02      	cmp	r3, #2
 8005728:	f040 8347 	bne.w	8005dba <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	463b      	mov	r3, r7
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	f240 82eb 	bls.w	8005d14 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005776:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800577a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 8159 	beq.w	8005a62 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d164      	bne.n	800588a <USB_EPStartXfer+0x20e>
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	4413      	add	r3, r2
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	011a      	lsls	r2, r3, #4
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	4413      	add	r3, r2
 80057e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d112      	bne.n	8005818 <USB_EPStartXfer+0x19c>
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005810:	b29a      	uxth	r2, r3
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	e054      	b.n	80058c2 <USB_EPStartXfer+0x246>
 8005818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581c:	2b3e      	cmp	r3, #62	; 0x3e
 800581e:	d817      	bhi.n	8005850 <USB_EPStartXfer+0x1d4>
 8005820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <USB_EPStartXfer+0x1c4>
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583a:	3301      	adds	r3, #1
 800583c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29a      	uxth	r2, r3
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e038      	b.n	80058c2 <USB_EPStartXfer+0x246>
 8005850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <USB_EPStartXfer+0x1f4>
 8005866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586a:	3b01      	subs	r3, #1
 800586c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005874:	b29b      	uxth	r3, r3
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e01b      	b.n	80058c2 <USB_EPStartXfer+0x246>
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d116      	bne.n	80058c2 <USB_EPStartXfer+0x246>
 8005894:	1d3b      	adds	r3, r7, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589c:	b29b      	uxth	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	4413      	add	r3, r2
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	011a      	lsls	r2, r3, #4
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	4413      	add	r3, r2
 80058b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30
 80058b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	895b      	ldrh	r3, [r3, #10]
 80058c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058cc:	463b      	mov	r3, r7
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6959      	ldr	r1, [r3, #20]
 80058d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058dc:	1d38      	adds	r0, r7, #4
 80058de:	6800      	ldr	r0, [r0, #0]
 80058e0:	f001 f92a 	bl	8006b38 <USB_WritePMA>
            ep->xfer_buff += len;
 80058e4:	463b      	mov	r3, r7
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ee:	441a      	add	r2, r3
 80058f0:	463b      	mov	r3, r7
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d909      	bls.n	800591a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005906:	463b      	mov	r3, r7
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005910:	1ad2      	subs	r2, r2, r3
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	621a      	str	r2, [r3, #32]
 8005918:	e008      	b.n	800592c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005924:	463b      	mov	r3, r7
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d164      	bne.n	8005a00 <USB_EPStartXfer+0x384>
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d112      	bne.n	800598e <USB_EPStartXfer+0x312>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005972:	b29a      	uxth	r2, r3
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005986:	b29a      	uxth	r2, r3
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e057      	b.n	8005a3e <USB_EPStartXfer+0x3c2>
 800598e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005992:	2b3e      	cmp	r3, #62	; 0x3e
 8005994:	d817      	bhi.n	80059c6 <USB_EPStartXfer+0x34a>
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <USB_EPStartXfer+0x33a>
 80059ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059b0:	3301      	adds	r3, #1
 80059b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29a      	uxth	r2, r3
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e03b      	b.n	8005a3e <USB_EPStartXfer+0x3c2>
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <USB_EPStartXfer+0x36a>
 80059dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	029b      	lsls	r3, r3, #10
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	801a      	strh	r2, [r3, #0]
 80059fe:	e01e      	b.n	8005a3e <USB_EPStartXfer+0x3c2>
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d119      	bne.n	8005a3e <USB_EPStartXfer+0x3c2>
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	4413      	add	r3, r2
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	891b      	ldrh	r3, [r3, #8]
 8005a44:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a48:	463b      	mov	r3, r7
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005a58:	1d38      	adds	r0, r7, #4
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	f001 f86c 	bl	8006b38 <USB_WritePMA>
 8005a60:	e33b      	b.n	80060da <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d164      	bne.n	8005b36 <USB_EPStartXfer+0x4ba>
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a80:	4413      	add	r3, r2
 8005a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d112      	bne.n	8005ac4 <USB_EPStartXfer+0x448>
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e057      	b.n	8005b74 <USB_EPStartXfer+0x4f8>
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aca:	d817      	bhi.n	8005afc <USB_EPStartXfer+0x480>
 8005acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <USB_EPStartXfer+0x470>
 8005ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	e03b      	b.n	8005b74 <USB_EPStartXfer+0x4f8>
 8005afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <USB_EPStartXfer+0x4a0>
 8005b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b16:	3b01      	subs	r3, #1
 8005b18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e01e      	b.n	8005b74 <USB_EPStartXfer+0x4f8>
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d119      	bne.n	8005b74 <USB_EPStartXfer+0x4f8>
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	657b      	str	r3, [r7, #84]	; 0x54
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b54:	4413      	add	r3, r2
 8005b56:	657b      	str	r3, [r7, #84]	; 0x54
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	011a      	lsls	r2, r3, #4
 8005b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b62:	4413      	add	r3, r2
 8005b64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b68:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	891b      	ldrh	r3, [r3, #8]
 8005b7a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b7e:	463b      	mov	r3, r7
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6959      	ldr	r1, [r3, #20]
 8005b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b8e:	1d38      	adds	r0, r7, #4
 8005b90:	6800      	ldr	r0, [r0, #0]
 8005b92:	f000 ffd1 	bl	8006b38 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba0:	441a      	add	r2, r3
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d909      	bls.n	8005bcc <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc2:	1ad2      	subs	r2, r2, r3
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	621a      	str	r2, [r3, #32]
 8005bca:	e008      	b.n	8005bde <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	647b      	str	r3, [r7, #68]	; 0x44
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d164      	bne.n	8005cb8 <USB_EPStartXfer+0x63c>
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf4:	1d3b      	adds	r3, r7, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c02:	4413      	add	r3, r2
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d112      	bne.n	8005c46 <USB_EPStartXfer+0x5ca>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e054      	b.n	8005cf0 <USB_EPStartXfer+0x674>
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c4c:	d817      	bhi.n	8005c7e <USB_EPStartXfer+0x602>
 8005c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <USB_EPStartXfer+0x5f2>
 8005c64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e038      	b.n	8005cf0 <USB_EPStartXfer+0x674>
 8005c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <USB_EPStartXfer+0x622>
 8005c94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	029b      	lsls	r3, r3, #10
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e01b      	b.n	8005cf0 <USB_EPStartXfer+0x674>
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d116      	bne.n	8005cf0 <USB_EPStartXfer+0x674>
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd0:	4413      	add	r3, r2
 8005cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	011a      	lsls	r2, r3, #4
 8005cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	895b      	ldrh	r3, [r3, #10]
 8005cf6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6959      	ldr	r1, [r3, #20]
 8005d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d0a:	1d38      	adds	r0, r7, #4
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f000 ff13 	bl	8006b38 <USB_WritePMA>
 8005d12:	e1e2      	b.n	80060da <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d38:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	663b      	str	r3, [r7, #96]	; 0x60
 8005d68:	1d3b      	adds	r3, r7, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d76:	4413      	add	r3, r2
 8005d78:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d84:	4413      	add	r3, r2
 8005d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	891b      	ldrh	r3, [r3, #8]
 8005d9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005db0:	1d38      	adds	r0, r7, #4
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	f000 fec0 	bl	8006b38 <USB_WritePMA>
 8005db8:	e18f      	b.n	80060da <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 808f 	beq.w	8005ef4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d164      	bne.n	8005eb0 <USB_EPStartXfer+0x834>
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	673b      	str	r3, [r7, #112]	; 0x70
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dfa:	4413      	add	r3, r2
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	011a      	lsls	r2, r3, #4
 8005e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e08:	4413      	add	r3, r2
 8005e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d112      	bne.n	8005e3e <USB_EPStartXfer+0x7c2>
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e054      	b.n	8005ee8 <USB_EPStartXfer+0x86c>
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	2b3e      	cmp	r3, #62	; 0x3e
 8005e44:	d817      	bhi.n	8005e76 <USB_EPStartXfer+0x7fa>
 8005e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <USB_EPStartXfer+0x7ea>
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	3301      	adds	r3, #1
 8005e62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e038      	b.n	8005ee8 <USB_EPStartXfer+0x86c>
 8005e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <USB_EPStartXfer+0x81a>
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e90:	3b01      	subs	r3, #1
 8005e92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	029b      	lsls	r3, r3, #10
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e01b      	b.n	8005ee8 <USB_EPStartXfer+0x86c>
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d116      	bne.n	8005ee8 <USB_EPStartXfer+0x86c>
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec8:	4413      	add	r3, r2
 8005eca:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	011a      	lsls	r2, r3, #4
 8005ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005edc:	677b      	str	r3, [r7, #116]	; 0x74
 8005ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	895b      	ldrh	r3, [r3, #10]
 8005eee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005ef2:	e097      	b.n	8006024 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d168      	bne.n	8005fd0 <USB_EPStartXfer+0x954>
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f16:	4413      	add	r3, r2
 8005f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	011a      	lsls	r2, r3, #4
 8005f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f28:	4413      	add	r3, r2
 8005f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d112      	bne.n	8005f5e <USB_EPStartXfer+0x8e2>
 8005f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e05d      	b.n	800601a <USB_EPStartXfer+0x99e>
 8005f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f62:	2b3e      	cmp	r3, #62	; 0x3e
 8005f64:	d817      	bhi.n	8005f96 <USB_EPStartXfer+0x91a>
 8005f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <USB_EPStartXfer+0x90a>
 8005f7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f80:	3301      	adds	r3, #1
 8005f82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	029b      	lsls	r3, r3, #10
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	e041      	b.n	800601a <USB_EPStartXfer+0x99e>
 8005f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <USB_EPStartXfer+0x93a>
 8005fac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e024      	b.n	800601a <USB_EPStartXfer+0x99e>
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d11f      	bne.n	800601a <USB_EPStartXfer+0x99e>
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	011a      	lsls	r2, r3, #4
 8006000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006004:	4413      	add	r3, r2
 8006006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800600a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800600e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006012:	b29a      	uxth	r2, r3
 8006014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006018:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	891b      	ldrh	r3, [r3, #8]
 8006020:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800602e:	b29b      	uxth	r3, r3
 8006030:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006034:	1d38      	adds	r0, r7, #4
 8006036:	6800      	ldr	r0, [r0, #0]
 8006038:	f000 fd7e 	bl	8006b38 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d122      	bne.n	800608c <USB_EPStartXfer+0xa10>
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006060:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006064:	1d3b      	adds	r3, r7, #4
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
 800608a:	e026      	b.n	80060da <USB_EPStartXfer+0xa5e>
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d121      	bne.n	80060da <USB_EPStartXfer+0xa5e>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	463b      	mov	r3, r7
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f107 020e 	add.w	r2, r7, #14
 80060f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f8:	8013      	strh	r3, [r2, #0]
 80060fa:	f107 030e 	add.w	r3, r7, #14
 80060fe:	f107 020e 	add.w	r2, r7, #14
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	f082 0210 	eor.w	r2, r2, #16
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	f107 030e 	add.w	r3, r7, #14
 800610e:	f107 020e 	add.w	r2, r7, #14
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	f082 0220 	eor.w	r2, r2, #32
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	441a      	add	r2, r3
 8006128:	f107 030e 	add.w	r3, r7, #14
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]
 8006142:	e3b5      	b.n	80068b0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	7b1b      	ldrb	r3, [r3, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f040 8090 	bne.w	8006270 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d90e      	bls.n	800617e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	619a      	str	r2, [r3, #24]
 800617c:	e008      	b.n	8006190 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800617e:	463b      	mov	r3, r7
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2200      	movs	r2, #0
 800618e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006198:	1d3b      	adds	r3, r7, #4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061a8:	4413      	add	r3, r2
 80061aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d116      	bne.n	80061fa <USB_EPStartXfer+0xb7e>
 80061cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e32c      	b.n	8006854 <USB_EPStartXfer+0x11d8>
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006200:	d818      	bhi.n	8006234 <USB_EPStartXfer+0xbb8>
 8006202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800620c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <USB_EPStartXfer+0xba6>
 8006218:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800621c:	3301      	adds	r3, #1
 800621e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006222:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e30f      	b.n	8006854 <USB_EPStartXfer+0x11d8>
 8006234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800623e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <USB_EPStartXfer+0xbd8>
 800624a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800624e:	3b01      	subs	r3, #1
 8006250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006254:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006258:	b29b      	uxth	r3, r3
 800625a:	029b      	lsls	r3, r3, #10
 800625c:	b29b      	uxth	r3, r3
 800625e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006266:	b29a      	uxth	r2, r3
 8006268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	e2f1      	b.n	8006854 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	2b02      	cmp	r3, #2
 8006278:	f040 818f 	bne.w	800659a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d175      	bne.n	8006372 <USB_EPStartXfer+0xcf6>
 8006286:	1d3b      	adds	r3, r7, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800629e:	4413      	add	r3, r2
 80062a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062a4:	463b      	mov	r3, r7
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d116      	bne.n	80062f2 <USB_EPStartXfer+0xc76>
 80062c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	e065      	b.n	80063be <USB_EPStartXfer+0xd42>
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b3e      	cmp	r3, #62	; 0x3e
 80062fa:	d81a      	bhi.n	8006332 <USB_EPStartXfer+0xcb6>
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006308:	463b      	mov	r3, r7
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <USB_EPStartXfer+0xca4>
 8006316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800631a:	3301      	adds	r3, #1
 800631c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006324:	b29b      	uxth	r3, r3
 8006326:	029b      	lsls	r3, r3, #10
 8006328:	b29a      	uxth	r2, r3
 800632a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	e045      	b.n	80063be <USB_EPStartXfer+0xd42>
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USB_EPStartXfer+0xcda>
 800634c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006350:	3b01      	subs	r3, #1
 8006352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e025      	b.n	80063be <USB_EPStartXfer+0xd42>
 8006372:	463b      	mov	r3, r7
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d120      	bne.n	80063be <USB_EPStartXfer+0xd42>
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006394:	4413      	add	r3, r2
 8006396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800639a:	463b      	mov	r3, r7
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	011a      	lsls	r2, r3, #4
 80063a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d175      	bne.n	80064bc <USB_EPStartXfer+0xe40>
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063e8:	4413      	add	r3, r2
 80063ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	011a      	lsls	r2, r3, #4
 80063f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d116      	bne.n	800643c <USB_EPStartXfer+0xdc0>
 800640e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e061      	b.n	8006500 <USB_EPStartXfer+0xe84>
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b3e      	cmp	r3, #62	; 0x3e
 8006444:	d81a      	bhi.n	800647c <USB_EPStartXfer+0xe00>
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <USB_EPStartXfer+0xdee>
 8006460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006464:	3301      	adds	r3, #1
 8006466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646e:	b29b      	uxth	r3, r3
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	b29a      	uxth	r2, r3
 8006474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e041      	b.n	8006500 <USB_EPStartXfer+0xe84>
 800647c:	463b      	mov	r3, r7
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <USB_EPStartXfer+0xe24>
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	3b01      	subs	r3, #1
 800649c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	029b      	lsls	r3, r3, #10
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e021      	b.n	8006500 <USB_EPStartXfer+0xe84>
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d11c      	bne.n	8006500 <USB_EPStartXfer+0xe84>
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d6:	4413      	add	r3, r2
 80064d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	011a      	lsls	r2, r3, #4
 80064e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064fe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 81a4 	beq.w	8006854 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006520:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <USB_EPStartXfer+0xebc>
 800652c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10d      	bne.n	8006554 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006538:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800653c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006540:	2b00      	cmp	r3, #0
 8006542:	f040 8187 	bne.w	8006854 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006546:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 8180 	bne.w	8006854 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006572:	1d3b      	adds	r3, r7, #4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	463b      	mov	r3, r7
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006590:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]
 8006598:	e15c      	b.n	8006854 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	78db      	ldrb	r3, [r3, #3]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 8155 	bne.w	8006850 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d90e      	bls.n	80065d4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80065b6:	463b      	mov	r3, r7
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	619a      	str	r2, [r3, #24]
 80065d2:	e008      	b.n	80065e6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d16f      	bne.n	80066d0 <USB_EPStartXfer+0x1054>
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006608:	4413      	add	r3, r2
 800660a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800661a:	4413      	add	r3, r2
 800661c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <USB_EPStartXfer+0xfde>
 800662c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e05f      	b.n	800671a <USB_EPStartXfer+0x109e>
 800665a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d818      	bhi.n	8006694 <USB_EPStartXfer+0x1018>
 8006662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <USB_EPStartXfer+0x1006>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667c:	3301      	adds	r3, #1
 800667e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29a      	uxth	r2, r3
 800668c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e042      	b.n	800671a <USB_EPStartXfer+0x109e>
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800669e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <USB_EPStartXfer+0x1038>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ae:	3b01      	subs	r3, #1
 80066b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29b      	uxth	r3, r3
 80066be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e024      	b.n	800671a <USB_EPStartXfer+0x109e>
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d11f      	bne.n	800671a <USB_EPStartXfer+0x109e>
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f2:	4413      	add	r3, r2
 80066f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	011a      	lsls	r2, r3, #4
 8006700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006704:	4413      	add	r3, r2
 8006706:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800670a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006712:	b29a      	uxth	r2, r3
 8006714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	1d3b      	adds	r3, r7, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006722:	463b      	mov	r3, r7
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d16f      	bne.n	800680c <USB_EPStartXfer+0x1190>
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006734:	1d3b      	adds	r3, r7, #4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673c:	b29b      	uxth	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006744:	4413      	add	r3, r2
 8006746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800674a:	463b      	mov	r3, r7
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006756:	4413      	add	r3, r2
 8006758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800675c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d116      	bne.n	8006796 <USB_EPStartXfer+0x111a>
 8006768:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e05e      	b.n	8006854 <USB_EPStartXfer+0x11d8>
 8006796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679a:	2b3e      	cmp	r3, #62	; 0x3e
 800679c:	d818      	bhi.n	80067d0 <USB_EPStartXfer+0x1154>
 800679e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <USB_EPStartXfer+0x1142>
 80067b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b8:	3301      	adds	r3, #1
 80067ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e041      	b.n	8006854 <USB_EPStartXfer+0x11d8>
 80067d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <USB_EPStartXfer+0x1174>
 80067e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ea:	3b01      	subs	r3, #1
 80067ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	e023      	b.n	8006854 <USB_EPStartXfer+0x11d8>
 800680c:	463b      	mov	r3, r7
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d11e      	bne.n	8006854 <USB_EPStartXfer+0x11d8>
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681e:	b29b      	uxth	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006826:	4413      	add	r3, r2
 8006828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	011a      	lsls	r2, r3, #4
 8006834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006838:	4413      	add	r3, r2
 800683a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800683e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	e001      	b.n	8006854 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e02e      	b.n	80068b2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006854:	1d3b      	adds	r3, r7, #4
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	463b      	mov	r3, r7
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006872:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006876:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800687a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800687e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006882:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006886:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800688a:	1d3b      	adds	r3, r7, #4
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	441a      	add	r2, r3
 8006898:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800689c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	81bb      	strh	r3, [r7, #12]
 80068e6:	89bb      	ldrh	r3, [r7, #12]
 80068e8:	f083 0310 	eor.w	r3, r3, #16
 80068ec:	81bb      	strh	r3, [r7, #12]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	441a      	add	r2, r3
 80068f8:	89bb      	ldrh	r3, [r7, #12]
 80068fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690a:	b29b      	uxth	r3, r3
 800690c:	8013      	strh	r3, [r2, #0]
 800690e:	e01f      	b.n	8006950 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	81fb      	strh	r3, [r7, #14]
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800692e:	81fb      	strh	r3, [r7, #14]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	7b1b      	ldrb	r3, [r3, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 809d 	bne.w	8006aaa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d04c      	beq.n	8006a12 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	823b      	strh	r3, [r7, #16]
 8006986:	8a3b      	ldrh	r3, [r7, #16]
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <USB_EPClearStall+0x6c>
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	81fb      	strh	r3, [r7, #14]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	89fb      	ldrh	r3, [r7, #14]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	78db      	ldrb	r3, [r3, #3]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d06c      	beq.n	8006aaa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e6:	81bb      	strh	r3, [r7, #12]
 80069e8:	89bb      	ldrh	r3, [r7, #12]
 80069ea:	f083 0320 	eor.w	r3, r3, #32
 80069ee:	81bb      	strh	r3, [r7, #12]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	89bb      	ldrh	r3, [r7, #12]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]
 8006a10:	e04b      	b.n	8006aaa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	82fb      	strh	r3, [r7, #22]
 8006a20:	8afb      	ldrh	r3, [r7, #22]
 8006a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01b      	beq.n	8006a62 <USB_EPClearStall+0x106>
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a40:	82bb      	strh	r3, [r7, #20]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	8abb      	ldrh	r3, [r7, #20]
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	827b      	strh	r3, [r7, #18]
 8006a7a:	8a7b      	ldrh	r3, [r7, #18]
 8006a7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a80:	827b      	strh	r3, [r7, #18]
 8006a82:	8a7b      	ldrh	r3, [r7, #18]
 8006a84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a88:	827b      	strh	r3, [r7, #18]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8a7b      	ldrh	r3, [r7, #18]
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b16:	68fb      	ldr	r3, [r7, #12]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b08d      	sub	sp, #52	; 0x34
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	460b      	mov	r3, r1
 8006b48:	80fb      	strh	r3, [r7, #6]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b4e:	88bb      	ldrh	r3, [r7, #4]
 8006b50:	3301      	adds	r3, #1
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	005a      	lsls	r2, r3, #1
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b70:	e01e      	b.n	8006bb0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	3b01      	subs	r3, #1
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1dd      	bne.n	8006b72 <USB_WritePMA+0x3a>
  }
}
 8006bb6:	bf00      	nop
 8006bb8:	3734      	adds	r7, #52	; 0x34
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b08b      	sub	sp, #44	; 0x2c
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	460b      	mov	r3, r1
 8006bd0:	80fb      	strh	r3, [r7, #6]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006bd6:	88bb      	ldrh	r3, [r7, #4]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	005a      	lsls	r2, r3, #1
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	e01b      	b.n	8006c32 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	3302      	adds	r3, #2
 8006c06:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3301      	adds	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	3301      	adds	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	3302      	adds	r3, #2
 8006c2a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e0      	bne.n	8006bfa <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c38:	88bb      	ldrh	r3, [r7, #4]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	701a      	strb	r2, [r3, #0]
  }
}
 8006c54:	bf00      	nop
 8006c56:	372c      	adds	r7, #44	; 0x2c
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	7c1b      	ldrb	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d115      	bne.n	8006ca2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	2181      	movs	r1, #129	; 0x81
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fe75 	bl	800896e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8e:	2202      	movs	r2, #2
 8006c90:	2101      	movs	r1, #1
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fe6b 	bl	800896e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006ca0:	e012      	b.n	8006cc8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ca2:	2340      	movs	r3, #64	; 0x40
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	2181      	movs	r1, #129	; 0x81
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fe60 	bl	800896e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	2101      	movs	r1, #1
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fe57 	bl	800896e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cc8:	2308      	movs	r3, #8
 8006cca:	2203      	movs	r2, #3
 8006ccc:	2182      	movs	r1, #130	; 0x82
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fe4d 	bl	800896e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cda:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cde:	f001 ff6d 	bl	8008bbc <USBD_static_malloc>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e026      	b.n	8006d48 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d00:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c1b      	ldrb	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 ff0d 	bl	8008b50 <USBD_LL_PrepareReceive>
 8006d36:	e007      	b.n	8006d48 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	2101      	movs	r1, #1
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 ff04 	bl	8008b50 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d62:	2181      	movs	r1, #129	; 0x81
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 fe28 	bl	80089ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d70:	2101      	movs	r1, #1
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fe21 	bl	80089ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d80:	2182      	movs	r1, #130	; 0x82
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fe19 	bl	80089ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00e      	beq.n	8006db6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 ff13 	bl	8008bd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d039      	beq.n	8006e5e <USBD_CDC_Setup+0x9e>
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d17c      	bne.n	8006ee8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	88db      	ldrh	r3, [r3, #6]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d029      	beq.n	8006e4a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b25b      	sxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da11      	bge.n	8006e24 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	88d2      	ldrh	r2, [r2, #6]
 8006e12:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e14:	6939      	ldr	r1, [r7, #16]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 f9f9 	bl	8008214 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e22:	e068      	b.n	8006ef6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	785a      	ldrb	r2, [r3, #1]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e3a:	6939      	ldr	r1, [r7, #16]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fa14 	bl	8008270 <USBD_CtlPrepareRx>
      break;
 8006e48:	e055      	b.n	8006ef6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	7850      	ldrb	r0, [r2, #1]
 8006e56:	2200      	movs	r2, #0
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	4798      	blx	r3
      break;
 8006e5c:	e04b      	b.n	8006ef6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	785b      	ldrb	r3, [r3, #1]
 8006e62:	2b0a      	cmp	r3, #10
 8006e64:	d017      	beq.n	8006e96 <USBD_CDC_Setup+0xd6>
 8006e66:	2b0b      	cmp	r3, #11
 8006e68:	d029      	beq.n	8006ebe <USBD_CDC_Setup+0xfe>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d133      	bne.n	8006ed6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d107      	bne.n	8006e88 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e78:	f107 030c 	add.w	r3, r7, #12
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f9c7 	bl	8008214 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e86:	e02e      	b.n	8006ee6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 f958 	bl	8008140 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e90:	2302      	movs	r3, #2
 8006e92:	75fb      	strb	r3, [r7, #23]
          break;
 8006e94:	e027      	b.n	8006ee6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d107      	bne.n	8006eb0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ea0:	f107 030f 	add.w	r3, r7, #15
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 f9b3 	bl	8008214 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eae:	e01a      	b.n	8006ee6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f944 	bl	8008140 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebc:	e013      	b.n	8006ee6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d00d      	beq.n	8006ee4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f938 	bl	8008140 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ed4:	e006      	b.n	8006ee4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 f931 	bl	8008140 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee2:	e000      	b.n	8006ee6 <USBD_CDC_Setup+0x126>
          break;
 8006ee4:	bf00      	nop
      }
      break;
 8006ee6:	e006      	b.n	8006ef6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f928 	bl	8008140 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	bf00      	nop
  }

  return ret;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d03a      	beq.n	8006f9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	331c      	adds	r3, #28
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d029      	beq.n	8006f90 <USBD_CDC_DataIn+0x90>
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	331c      	adds	r3, #28
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	78f9      	ldrb	r1, [r7, #3]
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	460b      	mov	r3, r1
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	4403      	add	r3, r0
 8006f5c:	3338      	adds	r3, #56	; 0x38
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f64:	fb03 f301 	mul.w	r3, r3, r1
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d110      	bne.n	8006f90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	331c      	adds	r3, #28
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f82:	78f9      	ldrb	r1, [r7, #3]
 8006f84:	2300      	movs	r3, #0
 8006f86:	2200      	movs	r2, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fdbe 	bl	8008b0a <USBD_LL_Transmit>
 8006f8e:	e003      	b.n	8006f98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e000      	b.n	8006f9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f9c:	2302      	movs	r3, #2
  }
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fde9 	bl	8008b96 <USBD_LL_GetRxDataSize>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fea:	4611      	mov	r1, r2
 8006fec:	4798      	blx	r3

    return USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
  }
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007012:	2b00      	cmp	r3, #0
 8007014:	d015      	beq.n	8007042 <USBD_CDC_EP0_RxReady+0x46>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800701c:	2bff      	cmp	r3, #255	; 0xff
 800701e:	d010      	beq.n	8007042 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800702e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007036:	b292      	uxth	r2, r2
 8007038:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	22ff      	movs	r2, #255	; 0xff
 800703e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2243      	movs	r2, #67	; 0x43
 8007058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000094 	.word	0x20000094

0800706c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2243      	movs	r2, #67	; 0x43
 8007078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800707a:	4b03      	ldr	r3, [pc, #12]	; (8007088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000050 	.word	0x20000050

0800708c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2243      	movs	r2, #67	; 0x43
 8007098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800709a:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	200000d8 	.word	0x200000d8

080070ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	220a      	movs	r2, #10
 80070b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80070ba:	4b03      	ldr	r3, [pc, #12]	; (80070c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	2000000c 	.word	0x2000000c

080070cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01c      	beq.n	80071a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007170:	2b00      	cmp	r3, #0
 8007172:	d115      	bne.n	80071a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007192:	b29b      	uxth	r3, r3
 8007194:	2181      	movs	r1, #129	; 0x81
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fcb7 	bl	8008b0a <USBD_LL_Transmit>

      return USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e002      	b.n	80071a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80071a4:	2302      	movs	r3, #2
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d017      	beq.n	80071f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 fcb7 	bl	8008b50 <USBD_LL_PrepareReceive>
 80071e2:	e007      	b.n	80071f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	2101      	movs	r1, #1
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fcae 	bl	8008b50 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e000      	b.n	80071fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071f8:	2302      	movs	r3, #2
  }
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	4613      	mov	r3, r2
 800720e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007216:	2302      	movs	r3, #2
 8007218:	e01a      	b.n	8007250 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	79fa      	ldrb	r2, [r7, #7]
 8007246:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fb1b 	bl	8008884 <USBD_LL_Init>

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
 8007278:	e001      	b.n	800727e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr

0800728a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fb50 	bl	8008938 <USBD_LL_Start>

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr

080072b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072c2:	2302      	movs	r3, #2
 80072c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00c      	beq.n	80072ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	4611      	mov	r1, r2
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4611      	mov	r1, r2
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fecb 	bl	80080c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007340:	461a      	mov	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2b01      	cmp	r3, #1
 8007354:	d00c      	beq.n	8007370 <USBD_LL_SetupStage+0x56>
 8007356:	2b01      	cmp	r3, #1
 8007358:	d302      	bcc.n	8007360 <USBD_LL_SetupStage+0x46>
 800735a:	2b02      	cmp	r3, #2
 800735c:	d010      	beq.n	8007380 <USBD_LL_SetupStage+0x66>
 800735e:	e017      	b.n	8007390 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f9cb 	bl	8007704 <USBD_StdDevReq>
      break;
 800736e:	e01a      	b.n	80073a6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa2d 	bl	80077d8 <USBD_StdItfReq>
      break;
 800737e:	e012      	b.n	80073a6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa6b 	bl	8007864 <USBD_StdEPReq>
      break;
 800738e:	e00a      	b.n	80073a6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007396:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800739a:	b2db      	uxtb	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 fb2a 	bl	80089f8 <USBD_LL_StallEP>
      break;
 80073a4:	bf00      	nop
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	460b      	mov	r3, r1
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d14b      	bne.n	800745c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d134      	bne.n	8007440 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d919      	bls.n	8007416 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d203      	bcs.n	8007404 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007400:	b29b      	uxth	r3, r3
 8007402:	e002      	b.n	800740a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007408:	b29b      	uxth	r3, r3
 800740a:	461a      	mov	r2, r3
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 ff4c 	bl	80082ac <USBD_CtlContinueRx>
 8007414:	e038      	b.n	8007488 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007428:	2b03      	cmp	r3, #3
 800742a:	d105      	bne.n	8007438 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 ff49 	bl	80082d0 <USBD_CtlSendStatus>
 800743e:	e023      	b.n	8007488 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007446:	2b05      	cmp	r3, #5
 8007448:	d11e      	bne.n	8007488 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007452:	2100      	movs	r1, #0
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f001 facf 	bl	80089f8 <USBD_LL_StallEP>
 800745a:	e015      	b.n	8007488 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800746e:	2b03      	cmp	r3, #3
 8007470:	d108      	bne.n	8007484 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	7afa      	ldrb	r2, [r7, #11]
 800747c:	4611      	mov	r1, r2
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	4798      	blx	r3
 8007482:	e001      	b.n	8007488 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007484:	2302      	movs	r3, #2
 8007486:	e000      	b.n	800748a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	460b      	mov	r3, r1
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d17f      	bne.n	80075a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3314      	adds	r3, #20
 80074aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d15c      	bne.n	8007570 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d915      	bls.n	80074ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 feb6 	bl	800824c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074e0:	2300      	movs	r3, #0
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f001 fb32 	bl	8008b50 <USBD_LL_PrepareReceive>
 80074ec:	e04e      	b.n	800758c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	6912      	ldr	r2, [r2, #16]
 80074f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80074fa:	fb02 f201 	mul.w	r2, r2, r1
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d11c      	bne.n	800753e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800750c:	429a      	cmp	r2, r3
 800750e:	d316      	bcc.n	800753e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800751a:	429a      	cmp	r2, r3
 800751c:	d20f      	bcs.n	800753e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800751e:	2200      	movs	r2, #0
 8007520:	2100      	movs	r1, #0
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fe92 	bl	800824c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007530:	2300      	movs	r3, #0
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f001 fb0a 	bl	8008b50 <USBD_LL_PrepareReceive>
 800753c:	e026      	b.n	800758c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007550:	2b03      	cmp	r3, #3
 8007552:	d105      	bne.n	8007560 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007560:	2180      	movs	r1, #128	; 0x80
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f001 fa48 	bl	80089f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fec4 	bl	80082f6 <USBD_CtlReceiveStatus>
 800756e:	e00d      	b.n	800758c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007576:	2b04      	cmp	r3, #4
 8007578:	d004      	beq.n	8007584 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 fa36 	bl	80089f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007592:	2b01      	cmp	r3, #1
 8007594:	d11d      	bne.n	80075d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fe83 	bl	80072a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075a4:	e015      	b.n	80075d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d108      	bne.n	80075ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	7afa      	ldrb	r2, [r7, #11]
 80075c6:	4611      	mov	r1, r2
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	4798      	blx	r3
 80075cc:	e001      	b.n	80075d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075ce:	2302      	movs	r3, #2
 80075d0:	e000      	b.n	80075d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	2200      	movs	r2, #0
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f9bf 	bl	800896e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2240      	movs	r2, #64	; 0x40
 80075fc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	2200      	movs	r2, #0
 8007604:	2180      	movs	r1, #128	; 0x80
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 f9b1 	bl	800896e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2240      	movs	r2, #64	; 0x40
 8007616:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6852      	ldr	r2, [r2, #4]
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	4611      	mov	r1, r2
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
  }

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2204      	movs	r2, #4
 8007694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d105      	bne.n	80076c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr

080076ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d10b      	bne.n	80076f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800771a:	2b20      	cmp	r3, #32
 800771c:	d004      	beq.n	8007728 <USBD_StdDevReq+0x24>
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d002      	beq.n	8007728 <USBD_StdDevReq+0x24>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <USBD_StdDevReq+0x34>
 8007726:	e04c      	b.n	80077c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      break;
 8007736:	e049      	b.n	80077cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	2b09      	cmp	r3, #9
 800773e:	d83a      	bhi.n	80077b6 <USBD_StdDevReq+0xb2>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <USBD_StdDevReq+0x44>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007799 	.word	0x08007799
 800774c:	080077ad 	.word	0x080077ad
 8007750:	080077b7 	.word	0x080077b7
 8007754:	080077a3 	.word	0x080077a3
 8007758:	080077b7 	.word	0x080077b7
 800775c:	0800777b 	.word	0x0800777b
 8007760:	08007771 	.word	0x08007771
 8007764:	080077b7 	.word	0x080077b7
 8007768:	0800778f 	.word	0x0800778f
 800776c:	08007785 	.word	0x08007785
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f9d4 	bl	8007b20 <USBD_GetDescriptor>
          break;
 8007778:	e022      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fb37 	bl	8007df0 <USBD_SetAddress>
          break;
 8007782:	e01d      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fb74 	bl	8007e74 <USBD_SetConfig>
          break;
 800778c:	e018      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fbfd 	bl	8007f90 <USBD_GetConfig>
          break;
 8007796:	e013      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc2c 	bl	8007ff8 <USBD_GetStatus>
          break;
 80077a0:	e00e      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fc5a 	bl	800805e <USBD_SetFeature>
          break;
 80077aa:	e009      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fc69 	bl	8008086 <USBD_ClrFeature>
          break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcc1 	bl	8008140 <USBD_CtlError>
          break;
 80077be:	bf00      	nop
      }
      break;
 80077c0:	e004      	b.n	80077cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fcbb 	bl	8008140 <USBD_CtlError>
      break;
 80077ca:	bf00      	nop
  }

  return ret;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop

080077d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	d003      	beq.n	80077fa <USBD_StdItfReq+0x22>
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d001      	beq.n	80077fa <USBD_StdItfReq+0x22>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d12a      	bne.n	8007850 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	3b01      	subs	r3, #1
 8007802:	2b02      	cmp	r3, #2
 8007804:	d81d      	bhi.n	8007842 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	889b      	ldrh	r3, [r3, #4]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	d813      	bhi.n	8007838 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	88db      	ldrh	r3, [r3, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d110      	bne.n	800784c <USBD_StdItfReq+0x74>
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10d      	bne.n	800784c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fd4d 	bl	80082d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007836:	e009      	b.n	800784c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fc80 	bl	8008140 <USBD_CtlError>
          break;
 8007840:	e004      	b.n	800784c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc7b 	bl	8008140 <USBD_CtlError>
          break;
 800784a:	e000      	b.n	800784e <USBD_StdItfReq+0x76>
          break;
 800784c:	bf00      	nop
      }
      break;
 800784e:	e004      	b.n	800785a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fc74 	bl	8008140 <USBD_CtlError>
      break;
 8007858:	bf00      	nop
  }

  return USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007880:	2b20      	cmp	r3, #32
 8007882:	d004      	beq.n	800788e <USBD_StdEPReq+0x2a>
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	d002      	beq.n	800788e <USBD_StdEPReq+0x2a>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d008      	beq.n	800789e <USBD_StdEPReq+0x3a>
 800788c:	e13d      	b.n	8007b0a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
      break;
 800789c:	e13a      	b.n	8007b14 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d10a      	bne.n	80078c0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	e12a      	b.n	8007b16 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d03e      	beq.n	8007946 <USBD_StdEPReq+0xe2>
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d002      	beq.n	80078d2 <USBD_StdEPReq+0x6e>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d070      	beq.n	80079b2 <USBD_StdEPReq+0x14e>
 80078d0:	e115      	b.n	8007afe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d002      	beq.n	80078e2 <USBD_StdEPReq+0x7e>
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d015      	beq.n	800790c <USBD_StdEPReq+0xa8>
 80078e0:	e02b      	b.n	800793a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00c      	beq.n	8007902 <USBD_StdEPReq+0x9e>
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d009      	beq.n	8007902 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f880 	bl	80089f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078f8:	2180      	movs	r1, #128	; 0x80
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 f87c 	bl	80089f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007900:	e020      	b.n	8007944 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc1b 	bl	8008140 <USBD_CtlError>
              break;
 800790a:	e01b      	b.n	8007944 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	885b      	ldrh	r3, [r3, #2]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10e      	bne.n	8007932 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <USBD_StdEPReq+0xce>
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b80      	cmp	r3, #128	; 0x80
 800791e:	d008      	beq.n	8007932 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	88db      	ldrh	r3, [r3, #6]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f863 	bl	80089f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fccc 	bl	80082d0 <USBD_CtlSendStatus>

              break;
 8007938:	e004      	b.n	8007944 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbff 	bl	8008140 <USBD_CtlError>
              break;
 8007942:	bf00      	nop
          }
          break;
 8007944:	e0e0      	b.n	8007b08 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794c:	2b02      	cmp	r3, #2
 800794e:	d002      	beq.n	8007956 <USBD_StdEPReq+0xf2>
 8007950:	2b03      	cmp	r3, #3
 8007952:	d015      	beq.n	8007980 <USBD_StdEPReq+0x11c>
 8007954:	e026      	b.n	80079a4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00c      	beq.n	8007976 <USBD_StdEPReq+0x112>
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b80      	cmp	r3, #128	; 0x80
 8007960:	d009      	beq.n	8007976 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 f846 	bl	80089f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800796c:	2180      	movs	r1, #128	; 0x80
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 f842 	bl	80089f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007974:	e01c      	b.n	80079b0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fbe1 	bl	8008140 <USBD_CtlError>
              break;
 800797e:	e017      	b.n	80079b0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	885b      	ldrh	r3, [r3, #2]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d112      	bne.n	80079ae <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 f84d 	bl	8008a36 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc97 	bl	80082d0 <USBD_CtlSendStatus>
              }
              break;
 80079a2:	e004      	b.n	80079ae <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fbca 	bl	8008140 <USBD_CtlError>
              break;
 80079ac:	e000      	b.n	80079b0 <USBD_StdEPReq+0x14c>
              break;
 80079ae:	bf00      	nop
          }
          break;
 80079b0:	e0aa      	b.n	8007b08 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d002      	beq.n	80079c2 <USBD_StdEPReq+0x15e>
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d032      	beq.n	8007a26 <USBD_StdEPReq+0x1c2>
 80079c0:	e097      	b.n	8007af2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <USBD_StdEPReq+0x174>
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b80      	cmp	r3, #128	; 0x80
 80079cc:	d004      	beq.n	80079d8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fbb5 	bl	8008140 <USBD_CtlError>
                break;
 80079d6:	e091      	b.n	8007afc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da0b      	bge.n	80079f8 <USBD_StdEPReq+0x194>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	3310      	adds	r3, #16
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	3304      	adds	r3, #4
 80079f6:	e00b      	b.n	8007a10 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fbf8 	bl	8008214 <USBD_CtlSendData>
              break;
 8007a24:	e06a      	b.n	8007afc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da11      	bge.n	8007a52 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	3318      	adds	r3, #24
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d117      	bne.n	8007a78 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb78 	bl	8008140 <USBD_CtlError>
                  break;
 8007a50:	e054      	b.n	8007afc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fb65 	bl	8008140 <USBD_CtlError>
                  break;
 8007a76:	e041      	b.n	8007afc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	da0b      	bge.n	8007a98 <USBD_StdEPReq+0x234>
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	3310      	adds	r3, #16
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	3304      	adds	r3, #4
 8007a96:	e00b      	b.n	8007ab0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	3304      	adds	r3, #4
 8007ab0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <USBD_StdEPReq+0x25a>
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d103      	bne.n	8007ac6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	e00e      	b.n	8007ae4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 ffd2 	bl	8008a74 <USBD_LL_IsStallEP>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e002      	b.n	8007ae4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fb92 	bl	8008214 <USBD_CtlSendData>
              break;
 8007af0:	e004      	b.n	8007afc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb23 	bl	8008140 <USBD_CtlError>
              break;
 8007afa:	bf00      	nop
          }
          break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb1d 	bl	8008140 <USBD_CtlError>
          break;
 8007b06:	bf00      	nop
      }
      break;
 8007b08:	e004      	b.n	8007b14 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb17 	bl	8008140 <USBD_CtlError>
      break;
 8007b12:	bf00      	nop
  }

  return ret;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b06      	cmp	r3, #6
 8007b42:	f200 8128 	bhi.w	8007d96 <USBD_GetDescriptor+0x276>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <USBD_GetDescriptor+0x2c>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007bc1 	.word	0x08007bc1
 8007b58:	08007d97 	.word	0x08007d97
 8007b5c:	08007d97 	.word	0x08007d97
 8007b60:	08007d37 	.word	0x08007d37
 8007b64:	08007d63 	.word	0x08007d63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
      break;
 8007b7e:	e112      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7c1b      	ldrb	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ba2:	e100      	b.n	8007da6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f107 0208 	add.w	r2, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
      break;
 8007bbe:	e0f2      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	f200 80ac 	bhi.w	8007d24 <USBD_GetDescriptor+0x204>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <USBD_GetDescriptor+0xb4>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c55 	.word	0x08007c55
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	08007cf1 	.word	0x08007cf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0e:	e091      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa94 	bl	8008140 <USBD_CtlError>
            err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1e:	e089      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c42:	e077      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa7a 	bl	8008140 <USBD_CtlError>
            err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
          break;
 8007c52:	e06f      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c76:	e05d      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa60 	bl	8008140 <USBD_CtlError>
            err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
          break;
 8007c86:	e055      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007caa:	e043      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa46 	bl	8008140 <USBD_CtlError>
            err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cba:	e03b      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cde:	e029      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa2c 	bl	8008140 <USBD_CtlError>
            err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
          break;
 8007cee:	e021      	b.n	8007d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d12:	e00f      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa12 	bl	8008140 <USBD_CtlError>
            err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
          break;
 8007d22:	e007      	b.n	8007d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa0a 	bl	8008140 <USBD_CtlError>
          err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d32:	e038      	b.n	8007da6 <USBD_GetDescriptor+0x286>
 8007d34:	e037      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d50:	e029      	b.n	8007da6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9f3 	bl	8008140 <USBD_CtlError>
        err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d60:	e021      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	2207      	movs	r2, #7
 8007d82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d84:	e00f      	b.n	8007da6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9d9 	bl	8008140 <USBD_CtlError>
        err++;
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	3301      	adds	r3, #1
 8007d92:	72fb      	strb	r3, [r7, #11]
      break;
 8007d94:	e007      	b.n	8007da6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9d1 	bl	8008140 <USBD_CtlError>
      err++;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	3301      	adds	r3, #1
 8007da2:	72fb      	strb	r3, [r7, #11]
      break;
 8007da4:	bf00      	nop
  }

  if (err != 0U)
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d11c      	bne.n	8007de6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007dac:	893b      	ldrh	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d011      	beq.n	8007dd6 <USBD_GetDescriptor+0x2b6>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00d      	beq.n	8007dd6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88da      	ldrh	r2, [r3, #6]
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bf28      	it	cs
 8007dc4:	4613      	movcs	r3, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa1f 	bl	8008214 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	88db      	ldrh	r3, [r3, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa76 	bl	80082d0 <USBD_CtlSendStatus>
 8007de4:	e000      	b.n	8007de8 <USBD_GetDescriptor+0x2c8>
    return;
 8007de6:	bf00      	nop
    }
  }
}
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	889b      	ldrh	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d130      	bne.n	8007e64 <USBD_SetAddress+0x74>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	88db      	ldrh	r3, [r3, #6]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d12c      	bne.n	8007e64 <USBD_SetAddress+0x74>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	885b      	ldrh	r3, [r3, #2]
 8007e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e10:	d828      	bhi.n	8007e64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d104      	bne.n	8007e32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f988 	bl	8008140 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	e01c      	b.n	8007e6c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7bfa      	ldrb	r2, [r7, #15]
 8007e36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fe44 	bl	8008acc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa43 	bl	80082d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e58:	e008      	b.n	8007e6c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	e003      	b.n	8007e6c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f96a 	bl	8008140 <USBD_CtlError>
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	4b41      	ldr	r3, [pc, #260]	; (8007f8c <USBD_SetConfig+0x118>)
 8007e86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e88:	4b40      	ldr	r3, [pc, #256]	; (8007f8c <USBD_SetConfig+0x118>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d904      	bls.n	8007e9a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f954 	bl	8008140 <USBD_CtlError>
 8007e98:	e075      	b.n	8007f86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d002      	beq.n	8007eaa <USBD_SetConfig+0x36>
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d023      	beq.n	8007ef0 <USBD_SetConfig+0x7c>
 8007ea8:	e062      	b.n	8007f70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007eaa:	4b38      	ldr	r3, [pc, #224]	; (8007f8c <USBD_SetConfig+0x118>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01a      	beq.n	8007ee8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007eb2:	4b36      	ldr	r3, [pc, #216]	; (8007f8c <USBD_SetConfig+0x118>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ec4:	4b31      	ldr	r3, [pc, #196]	; (8007f8c <USBD_SetConfig+0x118>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff f9f3 	bl	80072b6 <USBD_SetClassConfig>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d104      	bne.n	8007ee0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f931 	bl	8008140 <USBD_CtlError>
            return;
 8007ede:	e052      	b.n	8007f86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9f5 	bl	80082d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ee6:	e04e      	b.n	8007f86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9f1 	bl	80082d0 <USBD_CtlSendStatus>
        break;
 8007eee:	e04a      	b.n	8007f86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ef0:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <USBD_SetConfig+0x118>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d112      	bne.n	8007f1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f00:	4b22      	ldr	r3, [pc, #136]	; (8007f8c <USBD_SetConfig+0x118>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f0a:	4b20      	ldr	r3, [pc, #128]	; (8007f8c <USBD_SetConfig+0x118>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff f9ef 	bl	80072f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f9da 	bl	80082d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f1c:	e033      	b.n	8007f86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f1e:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <USBD_SetConfig+0x118>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d01d      	beq.n	8007f68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff f9dd 	bl	80072f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f3a:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <USBD_SetConfig+0x118>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <USBD_SetConfig+0x118>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff f9b3 	bl	80072b6 <USBD_SetClassConfig>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d104      	bne.n	8007f60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f8f1 	bl	8008140 <USBD_CtlError>
            return;
 8007f5e:	e012      	b.n	8007f86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f9b5 	bl	80082d0 <USBD_CtlSendStatus>
        break;
 8007f66:	e00e      	b.n	8007f86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9b1 	bl	80082d0 <USBD_CtlSendStatus>
        break;
 8007f6e:	e00a      	b.n	8007f86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f8e4 	bl	8008140 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <USBD_SetConfig+0x118>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff f9b8 	bl	80072f4 <USBD_ClrClassConfig>
        break;
 8007f84:	bf00      	nop
    }
  }
}
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	2000036c 	.word	0x2000036c

08007f90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d004      	beq.n	8007fac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8cb 	bl	8008140 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007faa:	e021      	b.n	8007ff0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	db17      	blt.n	8007fe6 <USBD_GetConfig+0x56>
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dd02      	ble.n	8007fc0 <USBD_GetConfig+0x30>
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_GetConfig+0x46>
 8007fbe:	e012      	b.n	8007fe6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3308      	adds	r3, #8
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f920 	bl	8008214 <USBD_CtlSendData>
        break;
 8007fd4:	e00c      	b.n	8007ff0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f918 	bl	8008214 <USBD_CtlSendData>
        break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f8a9 	bl	8008140 <USBD_CtlError>
        break;
 8007fee:	bf00      	nop
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	3b01      	subs	r3, #1
 800800a:	2b02      	cmp	r3, #2
 800800c:	d81e      	bhi.n	800804c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	88db      	ldrh	r3, [r3, #6]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d004      	beq.n	8008020 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f891 	bl	8008140 <USBD_CtlError>
        break;
 800801e:	e01a      	b.n	8008056 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f043 0202 	orr.w	r2, r3, #2
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	330c      	adds	r3, #12
 8008040:	2202      	movs	r2, #2
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8e5 	bl	8008214 <USBD_CtlSendData>
      break;
 800804a:	e004      	b.n	8008056 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f876 	bl	8008140 <USBD_CtlError>
      break;
 8008054:	bf00      	nop
  }
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	885b      	ldrh	r3, [r3, #2]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d106      	bne.n	800807e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f929 	bl	80082d0 <USBD_CtlSendStatus>
  }
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	3b01      	subs	r3, #1
 8008098:	2b02      	cmp	r3, #2
 800809a:	d80b      	bhi.n	80080b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	885b      	ldrh	r3, [r3, #2]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d10c      	bne.n	80080be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f90f 	bl	80082d0 <USBD_CtlSendStatus>
      }
      break;
 80080b2:	e004      	b.n	80080be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f842 	bl	8008140 <USBD_CtlError>
      break;
 80080bc:	e000      	b.n	80080c0 <USBD_ClrFeature+0x3a>
      break;
 80080be:	bf00      	nop
  }
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	785a      	ldrb	r2, [r3, #1]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	3302      	adds	r3, #2
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	3303      	adds	r3, #3
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4413      	add	r3, r2
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	3304      	adds	r3, #4
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b29a      	uxth	r2, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	3305      	adds	r3, #5
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	b29b      	uxth	r3, r3
 8008112:	4413      	add	r3, r2
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	3306      	adds	r3, #6
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	b29a      	uxth	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	3307      	adds	r3, #7
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	b29b      	uxth	r3, r3
 800812e:	4413      	add	r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	80da      	strh	r2, [r3, #6]

}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800814a:	2180      	movs	r1, #128	; 0x80
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fc53 	bl	80089f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008152:	2100      	movs	r1, #0
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fc4f 	bl	80089f8 <USBD_LL_StallEP>
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d032      	beq.n	80081de <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f834 	bl	80081e6 <USBD_GetLen>
 800817e:	4603      	mov	r3, r0
 8008180:	3301      	adds	r3, #1
 8008182:	b29b      	uxth	r3, r3
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	b29a      	uxth	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	75fa      	strb	r2, [r7, #23]
 8008192:	461a      	mov	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4413      	add	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7812      	ldrb	r2, [r2, #0]
 800819c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	75fa      	strb	r2, [r7, #23]
 80081a4:	461a      	mov	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	2203      	movs	r2, #3
 80081ac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081ae:	e012      	b.n	80081d6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	60fa      	str	r2, [r7, #12]
 80081b6:	7dfa      	ldrb	r2, [r7, #23]
 80081b8:	1c51      	adds	r1, r2, #1
 80081ba:	75f9      	strb	r1, [r7, #23]
 80081bc:	4611      	mov	r1, r2
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	440a      	add	r2, r1
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	75fa      	strb	r2, [r7, #23]
 80081cc:	461a      	mov	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e8      	bne.n	80081b0 <USBD_GetString+0x4e>
    }
  }
}
 80081de:	bf00      	nop
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081f2:	e005      	b.n	8008200 <USBD_GetLen+0x1a>
  {
    len++;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	3301      	adds	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3301      	adds	r3, #1
 80081fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f5      	bne.n	80081f4 <USBD_GetLen+0xe>
  }

  return len;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2202      	movs	r2, #2
 8008226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800822a:	88fa      	ldrh	r2, [r7, #6]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	2100      	movs	r1, #0
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 fc64 	bl	8008b0a <USBD_LL_Transmit>

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	2100      	movs	r1, #0
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fc52 	bl	8008b0a <USBD_LL_Transmit>

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2203      	movs	r2, #3
 8008282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008286:	88fa      	ldrh	r2, [r7, #6]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	2100      	movs	r1, #0
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fc57 	bl	8008b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4613      	mov	r3, r2
 80082b8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	2100      	movs	r1, #0
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fc45 	bl	8008b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2204      	movs	r2, #4
 80082dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082e0:	2300      	movs	r3, #0
 80082e2:	2200      	movs	r2, #0
 80082e4:	2100      	movs	r1, #0
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fc0f 	bl	8008b0a <USBD_LL_Transmit>

  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2205      	movs	r2, #5
 8008302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008306:	2300      	movs	r3, #0
 8008308:	2200      	movs	r2, #0
 800830a:	2100      	movs	r1, #0
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fc1f 	bl	8008b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008320:	2200      	movs	r2, #0
 8008322:	4912      	ldr	r1, [pc, #72]	; (800836c <MX_USB_DEVICE_Init+0x50>)
 8008324:	4812      	ldr	r0, [pc, #72]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 8008326:	f7fe ff6c 	bl	8007202 <USBD_Init>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008330:	f7f9 f810 	bl	8001354 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008334:	490f      	ldr	r1, [pc, #60]	; (8008374 <MX_USB_DEVICE_Init+0x58>)
 8008336:	480e      	ldr	r0, [pc, #56]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 8008338:	f7fe ff8e 	bl	8007258 <USBD_RegisterClass>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008342:	f7f9 f807 	bl	8001354 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008346:	490c      	ldr	r1, [pc, #48]	; (8008378 <MX_USB_DEVICE_Init+0x5c>)
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 800834a:	f7fe febf 	bl	80070cc <USBD_CDC_RegisterInterface>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008354:	f7f8 fffe 	bl	8001354 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008358:	4805      	ldr	r0, [pc, #20]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 800835a:	f7fe ff96 	bl	800728a <USBD_Start>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008364:	f7f8 fff6 	bl	8001354 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}
 800836c:	2000012c 	.word	0x2000012c
 8008370:	200006f0 	.word	0x200006f0
 8008374:	20000018 	.word	0x20000018
 8008378:	2000011c 	.word	0x2000011c

0800837c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008380:	2200      	movs	r2, #0
 8008382:	4905      	ldr	r1, [pc, #20]	; (8008398 <CDC_Init_FS+0x1c>)
 8008384:	4805      	ldr	r0, [pc, #20]	; (800839c <CDC_Init_FS+0x20>)
 8008386:	f7fe feb7 	bl	80070f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800838a:	4905      	ldr	r1, [pc, #20]	; (80083a0 <CDC_Init_FS+0x24>)
 800838c:	4803      	ldr	r0, [pc, #12]	; (800839c <CDC_Init_FS+0x20>)
 800838e:	f7fe fecc 	bl	800712a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008392:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008394:	4618      	mov	r0, r3
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000d9c 	.word	0x20000d9c
 800839c:	200006f0 	.word	0x200006f0
 80083a0:	200009b4 	.word	0x200009b4

080083a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr
	...

080083b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
 80083c0:	4613      	mov	r3, r2
 80083c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	2b23      	cmp	r3, #35	; 0x23
 80083c8:	d84a      	bhi.n	8008460 <CDC_Control_FS+0xac>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <CDC_Control_FS+0x1c>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008461 	.word	0x08008461
 80083d4:	08008461 	.word	0x08008461
 80083d8:	08008461 	.word	0x08008461
 80083dc:	08008461 	.word	0x08008461
 80083e0:	08008461 	.word	0x08008461
 80083e4:	08008461 	.word	0x08008461
 80083e8:	08008461 	.word	0x08008461
 80083ec:	08008461 	.word	0x08008461
 80083f0:	08008461 	.word	0x08008461
 80083f4:	08008461 	.word	0x08008461
 80083f8:	08008461 	.word	0x08008461
 80083fc:	08008461 	.word	0x08008461
 8008400:	08008461 	.word	0x08008461
 8008404:	08008461 	.word	0x08008461
 8008408:	08008461 	.word	0x08008461
 800840c:	08008461 	.word	0x08008461
 8008410:	08008461 	.word	0x08008461
 8008414:	08008461 	.word	0x08008461
 8008418:	08008461 	.word	0x08008461
 800841c:	08008461 	.word	0x08008461
 8008420:	08008461 	.word	0x08008461
 8008424:	08008461 	.word	0x08008461
 8008428:	08008461 	.word	0x08008461
 800842c:	08008461 	.word	0x08008461
 8008430:	08008461 	.word	0x08008461
 8008434:	08008461 	.word	0x08008461
 8008438:	08008461 	.word	0x08008461
 800843c:	08008461 	.word	0x08008461
 8008440:	08008461 	.word	0x08008461
 8008444:	08008461 	.word	0x08008461
 8008448:	08008461 	.word	0x08008461
 800844c:	08008461 	.word	0x08008461
 8008450:	08008461 	.word	0x08008461
 8008454:	08008461 	.word	0x08008461
 8008458:	08008461 	.word	0x08008461
 800845c:	08008461 	.word	0x08008461
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008460:	bf00      	nop
  }

  return (USBD_OK);
 8008462:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <CDC_Receive_FS+0x24>)
 800847e:	f7fe fe54 	bl	800712a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008482:	4804      	ldr	r0, [pc, #16]	; (8008494 <CDC_Receive_FS+0x24>)
 8008484:	f7fe fe93 	bl	80071ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008488:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200006f0 	.word	0x200006f0

08008498 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <CDC_Transmit_FS+0x48>)
 80084aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e00b      	b.n	80084d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	4806      	ldr	r0, [pc, #24]	; (80084e0 <CDC_Transmit_FS+0x48>)
 80084c6:	f7fe fe17 	bl	80070f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084ca:	4805      	ldr	r0, [pc, #20]	; (80084e0 <CDC_Transmit_FS+0x48>)
 80084cc:	f7fe fe40 	bl	8007150 <USBD_CDC_TransmitPacket>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200006f0 	.word	0x200006f0

080084e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	6039      	str	r1, [r7, #0]
 80084ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2212      	movs	r2, #18
 80084f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084f6:	4b03      	ldr	r3, [pc, #12]	; (8008504 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	20000148 	.word	0x20000148

08008508 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2204      	movs	r2, #4
 8008518:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800851a:	4b03      	ldr	r3, [pc, #12]	; (8008528 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2000015c 	.word	0x2000015c

0800852c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4907      	ldr	r1, [pc, #28]	; (8008560 <USBD_FS_ProductStrDescriptor+0x34>)
 8008542:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_FS_ProductStrDescriptor+0x38>)
 8008544:	f7ff fe0d 	bl	8008162 <USBD_GetString>
 8008548:	e004      	b.n	8008554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_ProductStrDescriptor+0x34>)
 800854e:	4805      	ldr	r0, [pc, #20]	; (8008564 <USBD_FS_ProductStrDescriptor+0x38>)
 8008550:	f7ff fe07 	bl	8008162 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20001184 	.word	0x20001184
 8008564:	0800ad70 	.word	0x0800ad70

08008568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	4904      	ldr	r1, [pc, #16]	; (8008588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008578:	4804      	ldr	r0, [pc, #16]	; (800858c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800857a:	f7ff fdf2 	bl	8008162 <USBD_GetString>
  return USBD_StrDesc;
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20001184 	.word	0x20001184
 800858c:	0800ad88 	.word	0x0800ad88

08008590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	221a      	movs	r2, #26
 80085a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085a2:	f000 f843 	bl	800862c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085a6:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20000160 	.word	0x20000160

080085b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	6039      	str	r1, [r7, #0]
 80085be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d105      	bne.n	80085d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	4907      	ldr	r1, [pc, #28]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ca:	4808      	ldr	r0, [pc, #32]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80085cc:	f7ff fdc9 	bl	8008162 <USBD_GetString>
 80085d0:	e004      	b.n	80085dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4904      	ldr	r1, [pc, #16]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085d6:	4805      	ldr	r0, [pc, #20]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80085d8:	f7ff fdc3 	bl	8008162 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085dc:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20001184 	.word	0x20001184
 80085ec:	0800ad9c 	.word	0x0800ad9c

080085f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4907      	ldr	r1, [pc, #28]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008606:	4808      	ldr	r0, [pc, #32]	; (8008628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008608:	f7ff fdab 	bl	8008162 <USBD_GetString>
 800860c:	e004      	b.n	8008618 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008614:	f7ff fda5 	bl	8008162 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20001184 	.word	0x20001184
 8008628:	0800ada8 	.word	0x0800ada8

0800862c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008632:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <Get_SerialNum+0x44>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <Get_SerialNum+0x48>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800863e:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <Get_SerialNum+0x4c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008652:	2208      	movs	r2, #8
 8008654:	4909      	ldr	r1, [pc, #36]	; (800867c <Get_SerialNum+0x50>)
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f814 	bl	8008684 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800865c:	2204      	movs	r2, #4
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <Get_SerialNum+0x54>)
 8008660:	68b8      	ldr	r0, [r7, #8]
 8008662:	f000 f80f 	bl	8008684 <IntToUnicode>
  }
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	1ffff7e8 	.word	0x1ffff7e8
 8008674:	1ffff7ec 	.word	0x1ffff7ec
 8008678:	1ffff7f0 	.word	0x1ffff7f0
 800867c:	20000162 	.word	0x20000162
 8008680:	20000172 	.word	0x20000172

08008684 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]
 800869a:	e027      	b.n	80086ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	0f1b      	lsrs	r3, r3, #28
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d80b      	bhi.n	80086bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	0f1b      	lsrs	r3, r3, #28
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4619      	mov	r1, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	440b      	add	r3, r1
 80086b4:	3230      	adds	r2, #48	; 0x30
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	e00a      	b.n	80086d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	0f1b      	lsrs	r3, r3, #28
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4619      	mov	r1, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	440b      	add	r3, r1
 80086cc:	3237      	adds	r2, #55	; 0x37
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	3301      	adds	r3, #1
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4413      	add	r3, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	3301      	adds	r3, #1
 80086ea:	75fb      	strb	r3, [r7, #23]
 80086ec:	7dfa      	ldrb	r2, [r7, #23]
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d3d3      	bcc.n	800869c <IntToUnicode+0x18>
  }
}
 80086f4:	bf00      	nop
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr
	...

08008700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a0d      	ldr	r2, [pc, #52]	; (8008744 <HAL_PCD_MspInit+0x44>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d113      	bne.n	800873a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <HAL_PCD_MspInit+0x48>)
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	4a0c      	ldr	r2, [pc, #48]	; (8008748 <HAL_PCD_MspInit+0x48>)
 8008718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800871c:	61d3      	str	r3, [r2, #28]
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <HAL_PCD_MspInit+0x48>)
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800872a:	2200      	movs	r2, #0
 800872c:	2100      	movs	r1, #0
 800872e:	2014      	movs	r0, #20
 8008730:	f7f9 f82f 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008734:	2014      	movs	r0, #20
 8008736:	f7f9 f848 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40005c00 	.word	0x40005c00
 8008748:	40021000 	.word	0x40021000

0800874c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe fdd9 	bl	800731a <USBD_LL_SetupStage>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	440b      	add	r3, r1
 8008790:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	4619      	mov	r1, r3
 800879a:	f7fe fe09 	bl	80073b0 <USBD_LL_DataOutStage>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	440b      	add	r3, r1
 80087c6:	333c      	adds	r3, #60	; 0x3c
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f7fe fe60 	bl	8007492 <USBD_LL_DataInStage>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe ff70 	bl	80076ce <USBD_LL_SOF>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d001      	beq.n	800880e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800880a:	f7f8 fda3 	bl	8001354 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008814:	7bfa      	ldrb	r2, [r7, #15]
 8008816:	4611      	mov	r1, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe ff20 	bl	800765e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fed9 	bl	80075dc <USBD_LL_Reset>
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe ff1a 	bl	800767c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008850:	4b04      	ldr	r3, [pc, #16]	; (8008864 <HAL_PCD_SuspendCallback+0x30>)
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	4a03      	ldr	r2, [pc, #12]	; (8008864 <HAL_PCD_SuspendCallback+0x30>)
 8008856:	f043 0306 	orr.w	r3, r3, #6
 800885a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	e000ed00 	.word	0xe000ed00

08008868 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe ff14 	bl	80076a4 <USBD_LL_Resume>
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800888c:	4a28      	ldr	r2, [pc, #160]	; (8008930 <USBD_LL_Init+0xac>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a26      	ldr	r2, [pc, #152]	; (8008930 <USBD_LL_Init+0xac>)
 8008898:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800889c:	4b24      	ldr	r3, [pc, #144]	; (8008930 <USBD_LL_Init+0xac>)
 800889e:	4a25      	ldr	r2, [pc, #148]	; (8008934 <USBD_LL_Init+0xb0>)
 80088a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088a2:	4b23      	ldr	r3, [pc, #140]	; (8008930 <USBD_LL_Init+0xac>)
 80088a4:	2208      	movs	r2, #8
 80088a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088a8:	4b21      	ldr	r3, [pc, #132]	; (8008930 <USBD_LL_Init+0xac>)
 80088aa:	2202      	movs	r2, #2
 80088ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088ae:	4b20      	ldr	r3, [pc, #128]	; (8008930 <USBD_LL_Init+0xac>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <USBD_LL_Init+0xac>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088ba:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <USBD_LL_Init+0xac>)
 80088bc:	2200      	movs	r2, #0
 80088be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088c0:	481b      	ldr	r0, [pc, #108]	; (8008930 <USBD_LL_Init+0xac>)
 80088c2:	f7fa f8d7 	bl	8002a74 <HAL_PCD_Init>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088cc:	f7f8 fd42 	bl	8001354 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088d6:	2318      	movs	r3, #24
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	f7fb fc0b 	bl	80040f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088e6:	2358      	movs	r3, #88	; 0x58
 80088e8:	2200      	movs	r2, #0
 80088ea:	2180      	movs	r1, #128	; 0x80
 80088ec:	f7fb fc03 	bl	80040f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088f6:	23c0      	movs	r3, #192	; 0xc0
 80088f8:	2200      	movs	r2, #0
 80088fa:	2181      	movs	r1, #129	; 0x81
 80088fc:	f7fb fbfb 	bl	80040f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008906:	f44f 7388 	mov.w	r3, #272	; 0x110
 800890a:	2200      	movs	r2, #0
 800890c:	2101      	movs	r1, #1
 800890e:	f7fb fbf2 	bl	80040f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800891c:	2200      	movs	r2, #0
 800891e:	2182      	movs	r1, #130	; 0x82
 8008920:	f7fb fbe9 	bl	80040f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20001384 	.word	0x20001384
 8008934:	40005c00 	.word	0x40005c00

08008938 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800894e:	4618      	mov	r0, r3
 8008950:	f7fa f99b 	bl	8002c8a <HAL_PCD_Start>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f94e 	bl	8008bfc <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008964:	7bbb      	ldrb	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	4608      	mov	r0, r1
 8008978:	4611      	mov	r1, r2
 800897a:	461a      	mov	r2, r3
 800897c:	4603      	mov	r3, r0
 800897e:	70fb      	strb	r3, [r7, #3]
 8008980:	460b      	mov	r3, r1
 8008982:	70bb      	strb	r3, [r7, #2]
 8008984:	4613      	mov	r3, r2
 8008986:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008996:	78bb      	ldrb	r3, [r7, #2]
 8008998:	883a      	ldrh	r2, [r7, #0]
 800899a:	78f9      	ldrb	r1, [r7, #3]
 800899c:	f7fa fb15 	bl	8002fca <HAL_PCD_EP_Open>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f928 	bl	8008bfc <USBD_Get_USB_Status>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d4:	78fa      	ldrb	r2, [r7, #3]
 80089d6:	4611      	mov	r1, r2
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fa fb5c 	bl	8003096 <HAL_PCD_EP_Close>
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 f909 	bl	8008bfc <USBD_Get_USB_Status>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fa fc1c 	bl	8003254 <HAL_PCD_EP_SetStall>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f8ea 	bl	8008bfc <USBD_Get_USB_Status>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a50:	78fa      	ldrb	r2, [r7, #3]
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fa fc5d 	bl	8003314 <HAL_PCD_EP_ClrStall>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f8cb 	bl	8008bfc <USBD_Get_USB_Status>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0c      	bge.n	8008aaa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	440b      	add	r3, r1
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	e00b      	b.n	8008ac2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab0:	68f9      	ldr	r1, [r7, #12]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	440b      	add	r3, r1
 8008abc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ac0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr

08008acc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fa fa48 	bl	8002f80 <HAL_PCD_SetAddress>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f880 	bl	8008bfc <USBD_Get_USB_Status>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	461a      	mov	r2, r3
 8008b16:	460b      	mov	r3, r1
 8008b18:	72fb      	strb	r3, [r7, #11]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b2c:	893b      	ldrh	r3, [r7, #8]
 8008b2e:	7af9      	ldrb	r1, [r7, #11]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	f7fa fb4c 	bl	80031ce <HAL_PCD_EP_Transmit>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f85d 	bl	8008bfc <USBD_Get_USB_Status>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b46:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	72fb      	strb	r3, [r7, #11]
 8008b60:	4613      	mov	r3, r2
 8008b62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b72:	893b      	ldrh	r3, [r7, #8]
 8008b74:	7af9      	ldrb	r1, [r7, #11]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f7fa fad5 	bl	8003126 <HAL_PCD_EP_Receive>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f83a 	bl	8008bfc <USBD_Get_USB_Status>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa faf7 	bl	80031a0 <HAL_PCD_EP_GetRxCount>
 8008bb2:	4603      	mov	r3, r0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <USBD_static_malloc+0x14>)
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr
 8008bd0:	20000370 	.word	0x20000370

08008bd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]

}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr

08008bfc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d817      	bhi.n	8008c40 <USBD_Get_USB_Status+0x44>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <USBD_Get_USB_Status+0x1c>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c2f 	.word	0x08008c2f
 8008c20:	08008c35 	.word	0x08008c35
 8008c24:	08008c3b 	.word	0x08008c3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	e00b      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	73fb      	strb	r3, [r7, #15]
    break;
 8008c32:	e008      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
    break;
 8008c38:	e005      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3e:	e002      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c40:	2302      	movs	r3, #2
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	bf00      	nop
  }
  return usb_status;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop

08008c54 <__errno>:
 8008c54:	4b01      	ldr	r3, [pc, #4]	; (8008c5c <__errno+0x8>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	2000017c 	.word	0x2000017c

08008c60 <__libc_init_array>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	2500      	movs	r5, #0
 8008c64:	4e0c      	ldr	r6, [pc, #48]	; (8008c98 <__libc_init_array+0x38>)
 8008c66:	4c0d      	ldr	r4, [pc, #52]	; (8008c9c <__libc_init_array+0x3c>)
 8008c68:	1ba4      	subs	r4, r4, r6
 8008c6a:	10a4      	asrs	r4, r4, #2
 8008c6c:	42a5      	cmp	r5, r4
 8008c6e:	d109      	bne.n	8008c84 <__libc_init_array+0x24>
 8008c70:	f002 f85c 	bl	800ad2c <_init>
 8008c74:	2500      	movs	r5, #0
 8008c76:	4e0a      	ldr	r6, [pc, #40]	; (8008ca0 <__libc_init_array+0x40>)
 8008c78:	4c0a      	ldr	r4, [pc, #40]	; (8008ca4 <__libc_init_array+0x44>)
 8008c7a:	1ba4      	subs	r4, r4, r6
 8008c7c:	10a4      	asrs	r4, r4, #2
 8008c7e:	42a5      	cmp	r5, r4
 8008c80:	d105      	bne.n	8008c8e <__libc_init_array+0x2e>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c88:	4798      	blx	r3
 8008c8a:	3501      	adds	r5, #1
 8008c8c:	e7ee      	b.n	8008c6c <__libc_init_array+0xc>
 8008c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c92:	4798      	blx	r3
 8008c94:	3501      	adds	r5, #1
 8008c96:	e7f2      	b.n	8008c7e <__libc_init_array+0x1e>
 8008c98:	0800b030 	.word	0x0800b030
 8008c9c:	0800b030 	.word	0x0800b030
 8008ca0:	0800b030 	.word	0x0800b030
 8008ca4:	0800b034 	.word	0x0800b034

08008ca8 <memcpy>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	1e43      	subs	r3, r0, #1
 8008cac:	440a      	add	r2, r1
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	d100      	bne.n	8008cb4 <memcpy+0xc>
 8008cb2:	bd10      	pop	{r4, pc}
 8008cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cbc:	e7f7      	b.n	8008cae <memcpy+0x6>

08008cbe <memset>:
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4402      	add	r2, r0
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d100      	bne.n	8008cc8 <memset+0xa>
 8008cc6:	4770      	bx	lr
 8008cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ccc:	e7f9      	b.n	8008cc2 <memset+0x4>

08008cce <__cvt>:
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	461e      	mov	r6, r3
 8008cd6:	bfbb      	ittet	lt
 8008cd8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	461e      	movlt	r6, r3
 8008cde:	2300      	movge	r3, #0
 8008ce0:	232d      	movlt	r3, #45	; 0x2d
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008ce6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008cea:	f027 0720 	bic.w	r7, r7, #32
 8008cee:	2f46      	cmp	r7, #70	; 0x46
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008cf4:	700b      	strb	r3, [r1, #0]
 8008cf6:	d004      	beq.n	8008d02 <__cvt+0x34>
 8008cf8:	2f45      	cmp	r7, #69	; 0x45
 8008cfa:	d100      	bne.n	8008cfe <__cvt+0x30>
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e000      	b.n	8008d04 <__cvt+0x36>
 8008d02:	2303      	movs	r3, #3
 8008d04:	aa07      	add	r2, sp, #28
 8008d06:	9204      	str	r2, [sp, #16]
 8008d08:	aa06      	add	r2, sp, #24
 8008d0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008d0e:	e9cd 3500 	strd	r3, r5, [sp]
 8008d12:	4622      	mov	r2, r4
 8008d14:	4633      	mov	r3, r6
 8008d16:	f000 fcd7 	bl	80096c8 <_dtoa_r>
 8008d1a:	2f47      	cmp	r7, #71	; 0x47
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	d102      	bne.n	8008d26 <__cvt+0x58>
 8008d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d22:	07db      	lsls	r3, r3, #31
 8008d24:	d526      	bpl.n	8008d74 <__cvt+0xa6>
 8008d26:	2f46      	cmp	r7, #70	; 0x46
 8008d28:	eb08 0905 	add.w	r9, r8, r5
 8008d2c:	d111      	bne.n	8008d52 <__cvt+0x84>
 8008d2e:	f898 3000 	ldrb.w	r3, [r8]
 8008d32:	2b30      	cmp	r3, #48	; 0x30
 8008d34:	d10a      	bne.n	8008d4c <__cvt+0x7e>
 8008d36:	2200      	movs	r2, #0
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	f7f7 fe33 	bl	80009a8 <__aeabi_dcmpeq>
 8008d42:	b918      	cbnz	r0, 8008d4c <__cvt+0x7e>
 8008d44:	f1c5 0501 	rsb	r5, r5, #1
 8008d48:	f8ca 5000 	str.w	r5, [sl]
 8008d4c:	f8da 3000 	ldr.w	r3, [sl]
 8008d50:	4499      	add	r9, r3
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	4620      	mov	r0, r4
 8008d58:	4631      	mov	r1, r6
 8008d5a:	f7f7 fe25 	bl	80009a8 <__aeabi_dcmpeq>
 8008d5e:	b938      	cbnz	r0, 8008d70 <__cvt+0xa2>
 8008d60:	2230      	movs	r2, #48	; 0x30
 8008d62:	9b07      	ldr	r3, [sp, #28]
 8008d64:	454b      	cmp	r3, r9
 8008d66:	d205      	bcs.n	8008d74 <__cvt+0xa6>
 8008d68:	1c59      	adds	r1, r3, #1
 8008d6a:	9107      	str	r1, [sp, #28]
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	e7f8      	b.n	8008d62 <__cvt+0x94>
 8008d70:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d74:	4640      	mov	r0, r8
 8008d76:	9b07      	ldr	r3, [sp, #28]
 8008d78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d7a:	eba3 0308 	sub.w	r3, r3, r8
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	b008      	add	sp, #32
 8008d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008d86 <__exponent>:
 8008d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	bfb4      	ite	lt
 8008d8c:	232d      	movlt	r3, #45	; 0x2d
 8008d8e:	232b      	movge	r3, #43	; 0x2b
 8008d90:	4604      	mov	r4, r0
 8008d92:	bfb8      	it	lt
 8008d94:	4249      	neglt	r1, r1
 8008d96:	2909      	cmp	r1, #9
 8008d98:	f804 2b02 	strb.w	r2, [r4], #2
 8008d9c:	7043      	strb	r3, [r0, #1]
 8008d9e:	dd21      	ble.n	8008de4 <__exponent+0x5e>
 8008da0:	f10d 0307 	add.w	r3, sp, #7
 8008da4:	461f      	mov	r7, r3
 8008da6:	260a      	movs	r6, #10
 8008da8:	fb91 f5f6 	sdiv	r5, r1, r6
 8008dac:	fb06 1115 	mls	r1, r6, r5, r1
 8008db0:	2d09      	cmp	r5, #9
 8008db2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008db6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dba:	f103 32ff 	add.w	r2, r3, #4294967295
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	dc09      	bgt.n	8008dd6 <__exponent+0x50>
 8008dc2:	3130      	adds	r1, #48	; 0x30
 8008dc4:	3b02      	subs	r3, #2
 8008dc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008dca:	42bb      	cmp	r3, r7
 8008dcc:	4622      	mov	r2, r4
 8008dce:	d304      	bcc.n	8008dda <__exponent+0x54>
 8008dd0:	1a10      	subs	r0, r2, r0
 8008dd2:	b003      	add	sp, #12
 8008dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	e7e6      	b.n	8008da8 <__exponent+0x22>
 8008dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dde:	f804 2b01 	strb.w	r2, [r4], #1
 8008de2:	e7f2      	b.n	8008dca <__exponent+0x44>
 8008de4:	2330      	movs	r3, #48	; 0x30
 8008de6:	4419      	add	r1, r3
 8008de8:	7083      	strb	r3, [r0, #2]
 8008dea:	1d02      	adds	r2, r0, #4
 8008dec:	70c1      	strb	r1, [r0, #3]
 8008dee:	e7ef      	b.n	8008dd0 <__exponent+0x4a>

08008df0 <_printf_float>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	b091      	sub	sp, #68	; 0x44
 8008df6:	460c      	mov	r4, r1
 8008df8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008dfa:	4693      	mov	fp, r2
 8008dfc:	461e      	mov	r6, r3
 8008dfe:	4605      	mov	r5, r0
 8008e00:	f001 fa16 	bl	800a230 <_localeconv_r>
 8008e04:	6803      	ldr	r3, [r0, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0a:	f7f7 f9a1 	bl	8000150 <strlen>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	930e      	str	r3, [sp, #56]	; 0x38
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	900a      	str	r0, [sp, #40]	; 0x28
 8008e16:	3307      	adds	r3, #7
 8008e18:	f023 0307 	bic.w	r3, r3, #7
 8008e1c:	f103 0208 	add.w	r2, r3, #8
 8008e20:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008e24:	f8d4 a000 	ldr.w	sl, [r4]
 8008e28:	603a      	str	r2, [r7, #0]
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e32:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e40:	4ba6      	ldr	r3, [pc, #664]	; (80090dc <_printf_float+0x2ec>)
 8008e42:	4638      	mov	r0, r7
 8008e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e46:	f7f7 fde1 	bl	8000a0c <__aeabi_dcmpun>
 8008e4a:	bb68      	cbnz	r0, 8008ea8 <_printf_float+0xb8>
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	4ba2      	ldr	r3, [pc, #648]	; (80090dc <_printf_float+0x2ec>)
 8008e52:	4638      	mov	r0, r7
 8008e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e56:	f7f7 fdbb 	bl	80009d0 <__aeabi_dcmple>
 8008e5a:	bb28      	cbnz	r0, 8008ea8 <_printf_float+0xb8>
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2300      	movs	r3, #0
 8008e60:	4638      	mov	r0, r7
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7f7 fdaa 	bl	80009bc <__aeabi_dcmplt>
 8008e68:	b110      	cbz	r0, 8008e70 <_printf_float+0x80>
 8008e6a:	232d      	movs	r3, #45	; 0x2d
 8008e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e70:	4f9b      	ldr	r7, [pc, #620]	; (80090e0 <_printf_float+0x2f0>)
 8008e72:	4b9c      	ldr	r3, [pc, #624]	; (80090e4 <_printf_float+0x2f4>)
 8008e74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e78:	bf98      	it	ls
 8008e7a:	461f      	movls	r7, r3
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	f04f 0900 	mov.w	r9, #0
 8008e82:	6123      	str	r3, [r4, #16]
 8008e84:	f02a 0304 	bic.w	r3, sl, #4
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	9600      	str	r6, [sp, #0]
 8008e8c:	465b      	mov	r3, fp
 8008e8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008e90:	4621      	mov	r1, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f9e2 	bl	800925c <_printf_common>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	f040 8090 	bne.w	8008fbe <_printf_float+0x1ce>
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea2:	b011      	add	sp, #68	; 0x44
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	463a      	mov	r2, r7
 8008eaa:	464b      	mov	r3, r9
 8008eac:	4638      	mov	r0, r7
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 fdac 	bl	8000a0c <__aeabi_dcmpun>
 8008eb4:	b110      	cbz	r0, 8008ebc <_printf_float+0xcc>
 8008eb6:	4f8c      	ldr	r7, [pc, #560]	; (80090e8 <_printf_float+0x2f8>)
 8008eb8:	4b8c      	ldr	r3, [pc, #560]	; (80090ec <_printf_float+0x2fc>)
 8008eba:	e7db      	b.n	8008e74 <_printf_float+0x84>
 8008ebc:	6863      	ldr	r3, [r4, #4]
 8008ebe:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008ec2:	1c59      	adds	r1, r3, #1
 8008ec4:	a80d      	add	r0, sp, #52	; 0x34
 8008ec6:	a90e      	add	r1, sp, #56	; 0x38
 8008ec8:	d140      	bne.n	8008f4c <_printf_float+0x15c>
 8008eca:	2306      	movs	r3, #6
 8008ecc:	6063      	str	r3, [r4, #4]
 8008ece:	f04f 0c00 	mov.w	ip, #0
 8008ed2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008ed6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	463a      	mov	r2, r7
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7ff feee 	bl	8008cce <__cvt>
 8008ef2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008ef6:	2b47      	cmp	r3, #71	; 0x47
 8008ef8:	4607      	mov	r7, r0
 8008efa:	d109      	bne.n	8008f10 <_printf_float+0x120>
 8008efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008efe:	1cd8      	adds	r0, r3, #3
 8008f00:	db02      	blt.n	8008f08 <_printf_float+0x118>
 8008f02:	6862      	ldr	r2, [r4, #4]
 8008f04:	4293      	cmp	r3, r2
 8008f06:	dd47      	ble.n	8008f98 <_printf_float+0x1a8>
 8008f08:	f1a8 0802 	sub.w	r8, r8, #2
 8008f0c:	fa5f f888 	uxtb.w	r8, r8
 8008f10:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008f14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f16:	d824      	bhi.n	8008f62 <_printf_float+0x172>
 8008f18:	3901      	subs	r1, #1
 8008f1a:	4642      	mov	r2, r8
 8008f1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f20:	910d      	str	r1, [sp, #52]	; 0x34
 8008f22:	f7ff ff30 	bl	8008d86 <__exponent>
 8008f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f28:	4681      	mov	r9, r0
 8008f2a:	1813      	adds	r3, r2, r0
 8008f2c:	2a01      	cmp	r2, #1
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	dc02      	bgt.n	8008f38 <_printf_float+0x148>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	07d1      	lsls	r1, r2, #31
 8008f36:	d501      	bpl.n	8008f3c <_printf_float+0x14c>
 8008f38:	3301      	adds	r3, #1
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0a2      	beq.n	8008e8a <_printf_float+0x9a>
 8008f44:	232d      	movs	r3, #45	; 0x2d
 8008f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f4a:	e79e      	b.n	8008e8a <_printf_float+0x9a>
 8008f4c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008f50:	f000 816e 	beq.w	8009230 <_printf_float+0x440>
 8008f54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f58:	d1b9      	bne.n	8008ece <_printf_float+0xde>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1b7      	bne.n	8008ece <_printf_float+0xde>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e7b4      	b.n	8008ecc <_printf_float+0xdc>
 8008f62:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8008f66:	d119      	bne.n	8008f9c <_printf_float+0x1ac>
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	6863      	ldr	r3, [r4, #4]
 8008f6c:	dd0c      	ble.n	8008f88 <_printf_float+0x198>
 8008f6e:	6121      	str	r1, [r4, #16]
 8008f70:	b913      	cbnz	r3, 8008f78 <_printf_float+0x188>
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	07d2      	lsls	r2, r2, #31
 8008f76:	d502      	bpl.n	8008f7e <_printf_float+0x18e>
 8008f78:	3301      	adds	r3, #1
 8008f7a:	440b      	add	r3, r1
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f80:	f04f 0900 	mov.w	r9, #0
 8008f84:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f86:	e7d9      	b.n	8008f3c <_printf_float+0x14c>
 8008f88:	b913      	cbnz	r3, 8008f90 <_printf_float+0x1a0>
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	07d0      	lsls	r0, r2, #31
 8008f8e:	d501      	bpl.n	8008f94 <_printf_float+0x1a4>
 8008f90:	3302      	adds	r3, #2
 8008f92:	e7f3      	b.n	8008f7c <_printf_float+0x18c>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e7f1      	b.n	8008f7c <_printf_float+0x18c>
 8008f98:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008f9c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	db05      	blt.n	8008fb0 <_printf_float+0x1c0>
 8008fa4:	6822      	ldr	r2, [r4, #0]
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	07d1      	lsls	r1, r2, #31
 8008faa:	d5e8      	bpl.n	8008f7e <_printf_float+0x18e>
 8008fac:	3301      	adds	r3, #1
 8008fae:	e7e5      	b.n	8008f7c <_printf_float+0x18c>
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bfcc      	ite	gt
 8008fb4:	2301      	movgt	r3, #1
 8008fb6:	f1c3 0302 	rsble	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	e7de      	b.n	8008f7c <_printf_float+0x18c>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	055a      	lsls	r2, r3, #21
 8008fc2:	d407      	bmi.n	8008fd4 <_printf_float+0x1e4>
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4659      	mov	r1, fp
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b0      	blx	r6
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d129      	bne.n	8009026 <_printf_float+0x236>
 8008fd2:	e764      	b.n	8008e9e <_printf_float+0xae>
 8008fd4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008fd8:	f240 80d7 	bls.w	800918a <_printf_float+0x39a>
 8008fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f7f7 fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8008fe8:	b388      	cbz	r0, 800904e <_printf_float+0x25e>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4a40      	ldr	r2, [pc, #256]	; (80090f0 <_printf_float+0x300>)
 8008fee:	4659      	mov	r1, fp
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f af52 	beq.w	8008e9e <_printf_float+0xae>
 8008ffa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ffe:	429a      	cmp	r2, r3
 8009000:	db02      	blt.n	8009008 <_printf_float+0x218>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	07d8      	lsls	r0, r3, #31
 8009006:	d50e      	bpl.n	8009026 <_printf_float+0x236>
 8009008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800900c:	4659      	mov	r1, fp
 800900e:	4628      	mov	r0, r5
 8009010:	47b0      	blx	r6
 8009012:	3001      	adds	r0, #1
 8009014:	f43f af43 	beq.w	8008e9e <_printf_float+0xae>
 8009018:	2700      	movs	r7, #0
 800901a:	f104 081a 	add.w	r8, r4, #26
 800901e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009020:	3b01      	subs	r3, #1
 8009022:	42bb      	cmp	r3, r7
 8009024:	dc09      	bgt.n	800903a <_printf_float+0x24a>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	079f      	lsls	r7, r3, #30
 800902a:	f100 80fd 	bmi.w	8009228 <_printf_float+0x438>
 800902e:	68e0      	ldr	r0, [r4, #12]
 8009030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009032:	4298      	cmp	r0, r3
 8009034:	bfb8      	it	lt
 8009036:	4618      	movlt	r0, r3
 8009038:	e733      	b.n	8008ea2 <_printf_float+0xb2>
 800903a:	2301      	movs	r3, #1
 800903c:	4642      	mov	r2, r8
 800903e:	4659      	mov	r1, fp
 8009040:	4628      	mov	r0, r5
 8009042:	47b0      	blx	r6
 8009044:	3001      	adds	r0, #1
 8009046:	f43f af2a 	beq.w	8008e9e <_printf_float+0xae>
 800904a:	3701      	adds	r7, #1
 800904c:	e7e7      	b.n	800901e <_printf_float+0x22e>
 800904e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009050:	2b00      	cmp	r3, #0
 8009052:	dc2b      	bgt.n	80090ac <_printf_float+0x2bc>
 8009054:	2301      	movs	r3, #1
 8009056:	4a26      	ldr	r2, [pc, #152]	; (80090f0 <_printf_float+0x300>)
 8009058:	4659      	mov	r1, fp
 800905a:	4628      	mov	r0, r5
 800905c:	47b0      	blx	r6
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af1d 	beq.w	8008e9e <_printf_float+0xae>
 8009064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009066:	b923      	cbnz	r3, 8009072 <_printf_float+0x282>
 8009068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800906a:	b913      	cbnz	r3, 8009072 <_printf_float+0x282>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	07d9      	lsls	r1, r3, #31
 8009070:	d5d9      	bpl.n	8009026 <_printf_float+0x236>
 8009072:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009076:	4659      	mov	r1, fp
 8009078:	4628      	mov	r0, r5
 800907a:	47b0      	blx	r6
 800907c:	3001      	adds	r0, #1
 800907e:	f43f af0e 	beq.w	8008e9e <_printf_float+0xae>
 8009082:	f04f 0800 	mov.w	r8, #0
 8009086:	f104 091a 	add.w	r9, r4, #26
 800908a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800908c:	425b      	negs	r3, r3
 800908e:	4543      	cmp	r3, r8
 8009090:	dc01      	bgt.n	8009096 <_printf_float+0x2a6>
 8009092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009094:	e797      	b.n	8008fc6 <_printf_float+0x1d6>
 8009096:	2301      	movs	r3, #1
 8009098:	464a      	mov	r2, r9
 800909a:	4659      	mov	r1, fp
 800909c:	4628      	mov	r0, r5
 800909e:	47b0      	blx	r6
 80090a0:	3001      	adds	r0, #1
 80090a2:	f43f aefc 	beq.w	8008e9e <_printf_float+0xae>
 80090a6:	f108 0801 	add.w	r8, r8, #1
 80090aa:	e7ee      	b.n	800908a <_printf_float+0x29a>
 80090ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090b0:	429a      	cmp	r2, r3
 80090b2:	bfa8      	it	ge
 80090b4:	461a      	movge	r2, r3
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	4690      	mov	r8, r2
 80090ba:	dd07      	ble.n	80090cc <_printf_float+0x2dc>
 80090bc:	4613      	mov	r3, r2
 80090be:	4659      	mov	r1, fp
 80090c0:	463a      	mov	r2, r7
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b0      	blx	r6
 80090c6:	3001      	adds	r0, #1
 80090c8:	f43f aee9 	beq.w	8008e9e <_printf_float+0xae>
 80090cc:	f104 031a 	add.w	r3, r4, #26
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80090d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80090da:	e015      	b.n	8009108 <_printf_float+0x318>
 80090dc:	7fefffff 	.word	0x7fefffff
 80090e0:	0800add4 	.word	0x0800add4
 80090e4:	0800add0 	.word	0x0800add0
 80090e8:	0800addc 	.word	0x0800addc
 80090ec:	0800add8 	.word	0x0800add8
 80090f0:	0800ade0 	.word	0x0800ade0
 80090f4:	2301      	movs	r3, #1
 80090f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090f8:	4659      	mov	r1, fp
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b0      	blx	r6
 80090fe:	3001      	adds	r0, #1
 8009100:	f43f aecd 	beq.w	8008e9e <_printf_float+0xae>
 8009104:	f10a 0a01 	add.w	sl, sl, #1
 8009108:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800910c:	eba9 0308 	sub.w	r3, r9, r8
 8009110:	4553      	cmp	r3, sl
 8009112:	dcef      	bgt.n	80090f4 <_printf_float+0x304>
 8009114:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009118:	429a      	cmp	r2, r3
 800911a:	444f      	add	r7, r9
 800911c:	db14      	blt.n	8009148 <_printf_float+0x358>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	07da      	lsls	r2, r3, #31
 8009122:	d411      	bmi.n	8009148 <_printf_float+0x358>
 8009124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009126:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009128:	eba3 0209 	sub.w	r2, r3, r9
 800912c:	eba3 0901 	sub.w	r9, r3, r1
 8009130:	4591      	cmp	r9, r2
 8009132:	bfa8      	it	ge
 8009134:	4691      	movge	r9, r2
 8009136:	f1b9 0f00 	cmp.w	r9, #0
 800913a:	dc0d      	bgt.n	8009158 <_printf_float+0x368>
 800913c:	2700      	movs	r7, #0
 800913e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009142:	f104 081a 	add.w	r8, r4, #26
 8009146:	e018      	b.n	800917a <_printf_float+0x38a>
 8009148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800914c:	4659      	mov	r1, fp
 800914e:	4628      	mov	r0, r5
 8009150:	47b0      	blx	r6
 8009152:	3001      	adds	r0, #1
 8009154:	d1e6      	bne.n	8009124 <_printf_float+0x334>
 8009156:	e6a2      	b.n	8008e9e <_printf_float+0xae>
 8009158:	464b      	mov	r3, r9
 800915a:	463a      	mov	r2, r7
 800915c:	4659      	mov	r1, fp
 800915e:	4628      	mov	r0, r5
 8009160:	47b0      	blx	r6
 8009162:	3001      	adds	r0, #1
 8009164:	d1ea      	bne.n	800913c <_printf_float+0x34c>
 8009166:	e69a      	b.n	8008e9e <_printf_float+0xae>
 8009168:	2301      	movs	r3, #1
 800916a:	4642      	mov	r2, r8
 800916c:	4659      	mov	r1, fp
 800916e:	4628      	mov	r0, r5
 8009170:	47b0      	blx	r6
 8009172:	3001      	adds	r0, #1
 8009174:	f43f ae93 	beq.w	8008e9e <_printf_float+0xae>
 8009178:	3701      	adds	r7, #1
 800917a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800917e:	1a9b      	subs	r3, r3, r2
 8009180:	eba3 0309 	sub.w	r3, r3, r9
 8009184:	42bb      	cmp	r3, r7
 8009186:	dcef      	bgt.n	8009168 <_printf_float+0x378>
 8009188:	e74d      	b.n	8009026 <_printf_float+0x236>
 800918a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800918c:	2a01      	cmp	r2, #1
 800918e:	dc01      	bgt.n	8009194 <_printf_float+0x3a4>
 8009190:	07db      	lsls	r3, r3, #31
 8009192:	d538      	bpl.n	8009206 <_printf_float+0x416>
 8009194:	2301      	movs	r3, #1
 8009196:	463a      	mov	r2, r7
 8009198:	4659      	mov	r1, fp
 800919a:	4628      	mov	r0, r5
 800919c:	47b0      	blx	r6
 800919e:	3001      	adds	r0, #1
 80091a0:	f43f ae7d 	beq.w	8008e9e <_printf_float+0xae>
 80091a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091a8:	4659      	mov	r1, fp
 80091aa:	4628      	mov	r0, r5
 80091ac:	47b0      	blx	r6
 80091ae:	3001      	adds	r0, #1
 80091b0:	f107 0701 	add.w	r7, r7, #1
 80091b4:	f43f ae73 	beq.w	8008e9e <_printf_float+0xae>
 80091b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091be:	2200      	movs	r2, #0
 80091c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80091c4:	2300      	movs	r3, #0
 80091c6:	f7f7 fbef 	bl	80009a8 <__aeabi_dcmpeq>
 80091ca:	b9c0      	cbnz	r0, 80091fe <_printf_float+0x40e>
 80091cc:	4643      	mov	r3, r8
 80091ce:	463a      	mov	r2, r7
 80091d0:	4659      	mov	r1, fp
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b0      	blx	r6
 80091d6:	3001      	adds	r0, #1
 80091d8:	d10d      	bne.n	80091f6 <_printf_float+0x406>
 80091da:	e660      	b.n	8008e9e <_printf_float+0xae>
 80091dc:	2301      	movs	r3, #1
 80091de:	4642      	mov	r2, r8
 80091e0:	4659      	mov	r1, fp
 80091e2:	4628      	mov	r0, r5
 80091e4:	47b0      	blx	r6
 80091e6:	3001      	adds	r0, #1
 80091e8:	f43f ae59 	beq.w	8008e9e <_printf_float+0xae>
 80091ec:	3701      	adds	r7, #1
 80091ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f0:	3b01      	subs	r3, #1
 80091f2:	42bb      	cmp	r3, r7
 80091f4:	dcf2      	bgt.n	80091dc <_printf_float+0x3ec>
 80091f6:	464b      	mov	r3, r9
 80091f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091fc:	e6e4      	b.n	8008fc8 <_printf_float+0x1d8>
 80091fe:	2700      	movs	r7, #0
 8009200:	f104 081a 	add.w	r8, r4, #26
 8009204:	e7f3      	b.n	80091ee <_printf_float+0x3fe>
 8009206:	2301      	movs	r3, #1
 8009208:	e7e1      	b.n	80091ce <_printf_float+0x3de>
 800920a:	2301      	movs	r3, #1
 800920c:	4642      	mov	r2, r8
 800920e:	4659      	mov	r1, fp
 8009210:	4628      	mov	r0, r5
 8009212:	47b0      	blx	r6
 8009214:	3001      	adds	r0, #1
 8009216:	f43f ae42 	beq.w	8008e9e <_printf_float+0xae>
 800921a:	3701      	adds	r7, #1
 800921c:	68e3      	ldr	r3, [r4, #12]
 800921e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	42bb      	cmp	r3, r7
 8009224:	dcf1      	bgt.n	800920a <_printf_float+0x41a>
 8009226:	e702      	b.n	800902e <_printf_float+0x23e>
 8009228:	2700      	movs	r7, #0
 800922a:	f104 0819 	add.w	r8, r4, #25
 800922e:	e7f5      	b.n	800921c <_printf_float+0x42c>
 8009230:	2b00      	cmp	r3, #0
 8009232:	f43f ae94 	beq.w	8008f5e <_printf_float+0x16e>
 8009236:	f04f 0c00 	mov.w	ip, #0
 800923a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800923e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009242:	6022      	str	r2, [r4, #0]
 8009244:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009248:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	463a      	mov	r2, r7
 8009250:	464b      	mov	r3, r9
 8009252:	4628      	mov	r0, r5
 8009254:	f7ff fd3b 	bl	8008cce <__cvt>
 8009258:	4607      	mov	r7, r0
 800925a:	e64f      	b.n	8008efc <_printf_float+0x10c>

0800925c <_printf_common>:
 800925c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009260:	4691      	mov	r9, r2
 8009262:	461f      	mov	r7, r3
 8009264:	688a      	ldr	r2, [r1, #8]
 8009266:	690b      	ldr	r3, [r1, #16]
 8009268:	4606      	mov	r6, r0
 800926a:	4293      	cmp	r3, r2
 800926c:	bfb8      	it	lt
 800926e:	4613      	movlt	r3, r2
 8009270:	f8c9 3000 	str.w	r3, [r9]
 8009274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009278:	460c      	mov	r4, r1
 800927a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800927e:	b112      	cbz	r2, 8009286 <_printf_common+0x2a>
 8009280:	3301      	adds	r3, #1
 8009282:	f8c9 3000 	str.w	r3, [r9]
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	0699      	lsls	r1, r3, #26
 800928a:	bf42      	ittt	mi
 800928c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009290:	3302      	addmi	r3, #2
 8009292:	f8c9 3000 	strmi.w	r3, [r9]
 8009296:	6825      	ldr	r5, [r4, #0]
 8009298:	f015 0506 	ands.w	r5, r5, #6
 800929c:	d107      	bne.n	80092ae <_printf_common+0x52>
 800929e:	f104 0a19 	add.w	sl, r4, #25
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	f8d9 2000 	ldr.w	r2, [r9]
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	dc29      	bgt.n	8009302 <_printf_common+0xa6>
 80092ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	3300      	adds	r3, #0
 80092b6:	bf18      	it	ne
 80092b8:	2301      	movne	r3, #1
 80092ba:	0692      	lsls	r2, r2, #26
 80092bc:	d42e      	bmi.n	800931c <_printf_common+0xc0>
 80092be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092c2:	4639      	mov	r1, r7
 80092c4:	4630      	mov	r0, r6
 80092c6:	47c0      	blx	r8
 80092c8:	3001      	adds	r0, #1
 80092ca:	d021      	beq.n	8009310 <_printf_common+0xb4>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	68e5      	ldr	r5, [r4, #12]
 80092d0:	f003 0306 	and.w	r3, r3, #6
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	bf18      	it	ne
 80092d8:	2500      	movne	r5, #0
 80092da:	f8d9 2000 	ldr.w	r2, [r9]
 80092de:	f04f 0900 	mov.w	r9, #0
 80092e2:	bf08      	it	eq
 80092e4:	1aad      	subeq	r5, r5, r2
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	bf08      	it	eq
 80092ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f0:	4293      	cmp	r3, r2
 80092f2:	bfc4      	itt	gt
 80092f4:	1a9b      	subgt	r3, r3, r2
 80092f6:	18ed      	addgt	r5, r5, r3
 80092f8:	341a      	adds	r4, #26
 80092fa:	454d      	cmp	r5, r9
 80092fc:	d11a      	bne.n	8009334 <_printf_common+0xd8>
 80092fe:	2000      	movs	r0, #0
 8009300:	e008      	b.n	8009314 <_printf_common+0xb8>
 8009302:	2301      	movs	r3, #1
 8009304:	4652      	mov	r2, sl
 8009306:	4639      	mov	r1, r7
 8009308:	4630      	mov	r0, r6
 800930a:	47c0      	blx	r8
 800930c:	3001      	adds	r0, #1
 800930e:	d103      	bne.n	8009318 <_printf_common+0xbc>
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009318:	3501      	adds	r5, #1
 800931a:	e7c2      	b.n	80092a2 <_printf_common+0x46>
 800931c:	2030      	movs	r0, #48	; 0x30
 800931e:	18e1      	adds	r1, r4, r3
 8009320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800932a:	4422      	add	r2, r4
 800932c:	3302      	adds	r3, #2
 800932e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009332:	e7c4      	b.n	80092be <_printf_common+0x62>
 8009334:	2301      	movs	r3, #1
 8009336:	4622      	mov	r2, r4
 8009338:	4639      	mov	r1, r7
 800933a:	4630      	mov	r0, r6
 800933c:	47c0      	blx	r8
 800933e:	3001      	adds	r0, #1
 8009340:	d0e6      	beq.n	8009310 <_printf_common+0xb4>
 8009342:	f109 0901 	add.w	r9, r9, #1
 8009346:	e7d8      	b.n	80092fa <_printf_common+0x9e>

08009348 <_printf_i>:
 8009348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800934c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009350:	460c      	mov	r4, r1
 8009352:	7e09      	ldrb	r1, [r1, #24]
 8009354:	b085      	sub	sp, #20
 8009356:	296e      	cmp	r1, #110	; 0x6e
 8009358:	4617      	mov	r7, r2
 800935a:	4606      	mov	r6, r0
 800935c:	4698      	mov	r8, r3
 800935e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009360:	f000 80b3 	beq.w	80094ca <_printf_i+0x182>
 8009364:	d822      	bhi.n	80093ac <_printf_i+0x64>
 8009366:	2963      	cmp	r1, #99	; 0x63
 8009368:	d036      	beq.n	80093d8 <_printf_i+0x90>
 800936a:	d80a      	bhi.n	8009382 <_printf_i+0x3a>
 800936c:	2900      	cmp	r1, #0
 800936e:	f000 80b9 	beq.w	80094e4 <_printf_i+0x19c>
 8009372:	2958      	cmp	r1, #88	; 0x58
 8009374:	f000 8083 	beq.w	800947e <_printf_i+0x136>
 8009378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800937c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009380:	e032      	b.n	80093e8 <_printf_i+0xa0>
 8009382:	2964      	cmp	r1, #100	; 0x64
 8009384:	d001      	beq.n	800938a <_printf_i+0x42>
 8009386:	2969      	cmp	r1, #105	; 0x69
 8009388:	d1f6      	bne.n	8009378 <_printf_i+0x30>
 800938a:	6820      	ldr	r0, [r4, #0]
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	0605      	lsls	r5, r0, #24
 8009390:	f103 0104 	add.w	r1, r3, #4
 8009394:	d52a      	bpl.n	80093ec <_printf_i+0xa4>
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6011      	str	r1, [r2, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	da03      	bge.n	80093a6 <_printf_i+0x5e>
 800939e:	222d      	movs	r2, #45	; 0x2d
 80093a0:	425b      	negs	r3, r3
 80093a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80093a6:	486f      	ldr	r0, [pc, #444]	; (8009564 <_printf_i+0x21c>)
 80093a8:	220a      	movs	r2, #10
 80093aa:	e039      	b.n	8009420 <_printf_i+0xd8>
 80093ac:	2973      	cmp	r1, #115	; 0x73
 80093ae:	f000 809d 	beq.w	80094ec <_printf_i+0x1a4>
 80093b2:	d808      	bhi.n	80093c6 <_printf_i+0x7e>
 80093b4:	296f      	cmp	r1, #111	; 0x6f
 80093b6:	d020      	beq.n	80093fa <_printf_i+0xb2>
 80093b8:	2970      	cmp	r1, #112	; 0x70
 80093ba:	d1dd      	bne.n	8009378 <_printf_i+0x30>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	f043 0320 	orr.w	r3, r3, #32
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	e003      	b.n	80093ce <_printf_i+0x86>
 80093c6:	2975      	cmp	r1, #117	; 0x75
 80093c8:	d017      	beq.n	80093fa <_printf_i+0xb2>
 80093ca:	2978      	cmp	r1, #120	; 0x78
 80093cc:	d1d4      	bne.n	8009378 <_printf_i+0x30>
 80093ce:	2378      	movs	r3, #120	; 0x78
 80093d0:	4865      	ldr	r0, [pc, #404]	; (8009568 <_printf_i+0x220>)
 80093d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093d6:	e055      	b.n	8009484 <_printf_i+0x13c>
 80093d8:	6813      	ldr	r3, [r2, #0]
 80093da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093de:	1d19      	adds	r1, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6011      	str	r1, [r2, #0]
 80093e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093e8:	2301      	movs	r3, #1
 80093ea:	e08c      	b.n	8009506 <_printf_i+0x1be>
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093f2:	6011      	str	r1, [r2, #0]
 80093f4:	bf18      	it	ne
 80093f6:	b21b      	sxthne	r3, r3
 80093f8:	e7cf      	b.n	800939a <_printf_i+0x52>
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	6825      	ldr	r5, [r4, #0]
 80093fe:	1d18      	adds	r0, r3, #4
 8009400:	6010      	str	r0, [r2, #0]
 8009402:	0628      	lsls	r0, r5, #24
 8009404:	d501      	bpl.n	800940a <_printf_i+0xc2>
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	e002      	b.n	8009410 <_printf_i+0xc8>
 800940a:	0668      	lsls	r0, r5, #25
 800940c:	d5fb      	bpl.n	8009406 <_printf_i+0xbe>
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	296f      	cmp	r1, #111	; 0x6f
 8009412:	bf14      	ite	ne
 8009414:	220a      	movne	r2, #10
 8009416:	2208      	moveq	r2, #8
 8009418:	4852      	ldr	r0, [pc, #328]	; (8009564 <_printf_i+0x21c>)
 800941a:	2100      	movs	r1, #0
 800941c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009420:	6865      	ldr	r5, [r4, #4]
 8009422:	2d00      	cmp	r5, #0
 8009424:	60a5      	str	r5, [r4, #8]
 8009426:	f2c0 8095 	blt.w	8009554 <_printf_i+0x20c>
 800942a:	6821      	ldr	r1, [r4, #0]
 800942c:	f021 0104 	bic.w	r1, r1, #4
 8009430:	6021      	str	r1, [r4, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d13d      	bne.n	80094b2 <_printf_i+0x16a>
 8009436:	2d00      	cmp	r5, #0
 8009438:	f040 808e 	bne.w	8009558 <_printf_i+0x210>
 800943c:	4665      	mov	r5, ip
 800943e:	2a08      	cmp	r2, #8
 8009440:	d10b      	bne.n	800945a <_printf_i+0x112>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	07db      	lsls	r3, r3, #31
 8009446:	d508      	bpl.n	800945a <_printf_i+0x112>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	6862      	ldr	r2, [r4, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	bfde      	ittt	le
 8009450:	2330      	movle	r3, #48	; 0x30
 8009452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009456:	f105 35ff 	addle.w	r5, r5, #4294967295
 800945a:	ebac 0305 	sub.w	r3, ip, r5
 800945e:	6123      	str	r3, [r4, #16]
 8009460:	f8cd 8000 	str.w	r8, [sp]
 8009464:	463b      	mov	r3, r7
 8009466:	aa03      	add	r2, sp, #12
 8009468:	4621      	mov	r1, r4
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff fef6 	bl	800925c <_printf_common>
 8009470:	3001      	adds	r0, #1
 8009472:	d14d      	bne.n	8009510 <_printf_i+0x1c8>
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	b005      	add	sp, #20
 800947a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947e:	4839      	ldr	r0, [pc, #228]	; (8009564 <_printf_i+0x21c>)
 8009480:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	6821      	ldr	r1, [r4, #0]
 8009488:	1d1d      	adds	r5, r3, #4
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6015      	str	r5, [r2, #0]
 800948e:	060a      	lsls	r2, r1, #24
 8009490:	d50b      	bpl.n	80094aa <_printf_i+0x162>
 8009492:	07ca      	lsls	r2, r1, #31
 8009494:	bf44      	itt	mi
 8009496:	f041 0120 	orrmi.w	r1, r1, #32
 800949a:	6021      	strmi	r1, [r4, #0]
 800949c:	b91b      	cbnz	r3, 80094a6 <_printf_i+0x15e>
 800949e:	6822      	ldr	r2, [r4, #0]
 80094a0:	f022 0220 	bic.w	r2, r2, #32
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	2210      	movs	r2, #16
 80094a8:	e7b7      	b.n	800941a <_printf_i+0xd2>
 80094aa:	064d      	lsls	r5, r1, #25
 80094ac:	bf48      	it	mi
 80094ae:	b29b      	uxthmi	r3, r3
 80094b0:	e7ef      	b.n	8009492 <_printf_i+0x14a>
 80094b2:	4665      	mov	r5, ip
 80094b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80094b8:	fb02 3311 	mls	r3, r2, r1, r3
 80094bc:	5cc3      	ldrb	r3, [r0, r3]
 80094be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80094c2:	460b      	mov	r3, r1
 80094c4:	2900      	cmp	r1, #0
 80094c6:	d1f5      	bne.n	80094b4 <_printf_i+0x16c>
 80094c8:	e7b9      	b.n	800943e <_printf_i+0xf6>
 80094ca:	6813      	ldr	r3, [r2, #0]
 80094cc:	6825      	ldr	r5, [r4, #0]
 80094ce:	1d18      	adds	r0, r3, #4
 80094d0:	6961      	ldr	r1, [r4, #20]
 80094d2:	6010      	str	r0, [r2, #0]
 80094d4:	0628      	lsls	r0, r5, #24
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	d501      	bpl.n	80094de <_printf_i+0x196>
 80094da:	6019      	str	r1, [r3, #0]
 80094dc:	e002      	b.n	80094e4 <_printf_i+0x19c>
 80094de:	066a      	lsls	r2, r5, #25
 80094e0:	d5fb      	bpl.n	80094da <_printf_i+0x192>
 80094e2:	8019      	strh	r1, [r3, #0]
 80094e4:	2300      	movs	r3, #0
 80094e6:	4665      	mov	r5, ip
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	e7b9      	b.n	8009460 <_printf_i+0x118>
 80094ec:	6813      	ldr	r3, [r2, #0]
 80094ee:	1d19      	adds	r1, r3, #4
 80094f0:	6011      	str	r1, [r2, #0]
 80094f2:	681d      	ldr	r5, [r3, #0]
 80094f4:	6862      	ldr	r2, [r4, #4]
 80094f6:	2100      	movs	r1, #0
 80094f8:	4628      	mov	r0, r5
 80094fa:	f000 feaf 	bl	800a25c <memchr>
 80094fe:	b108      	cbz	r0, 8009504 <_printf_i+0x1bc>
 8009500:	1b40      	subs	r0, r0, r5
 8009502:	6060      	str	r0, [r4, #4]
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	2300      	movs	r3, #0
 800950a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800950e:	e7a7      	b.n	8009460 <_printf_i+0x118>
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	462a      	mov	r2, r5
 8009514:	4639      	mov	r1, r7
 8009516:	4630      	mov	r0, r6
 8009518:	47c0      	blx	r8
 800951a:	3001      	adds	r0, #1
 800951c:	d0aa      	beq.n	8009474 <_printf_i+0x12c>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	079b      	lsls	r3, r3, #30
 8009522:	d413      	bmi.n	800954c <_printf_i+0x204>
 8009524:	68e0      	ldr	r0, [r4, #12]
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	4298      	cmp	r0, r3
 800952a:	bfb8      	it	lt
 800952c:	4618      	movlt	r0, r3
 800952e:	e7a3      	b.n	8009478 <_printf_i+0x130>
 8009530:	2301      	movs	r3, #1
 8009532:	464a      	mov	r2, r9
 8009534:	4639      	mov	r1, r7
 8009536:	4630      	mov	r0, r6
 8009538:	47c0      	blx	r8
 800953a:	3001      	adds	r0, #1
 800953c:	d09a      	beq.n	8009474 <_printf_i+0x12c>
 800953e:	3501      	adds	r5, #1
 8009540:	68e3      	ldr	r3, [r4, #12]
 8009542:	9a03      	ldr	r2, [sp, #12]
 8009544:	1a9b      	subs	r3, r3, r2
 8009546:	42ab      	cmp	r3, r5
 8009548:	dcf2      	bgt.n	8009530 <_printf_i+0x1e8>
 800954a:	e7eb      	b.n	8009524 <_printf_i+0x1dc>
 800954c:	2500      	movs	r5, #0
 800954e:	f104 0919 	add.w	r9, r4, #25
 8009552:	e7f5      	b.n	8009540 <_printf_i+0x1f8>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1ac      	bne.n	80094b2 <_printf_i+0x16a>
 8009558:	7803      	ldrb	r3, [r0, #0]
 800955a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800955e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009562:	e76c      	b.n	800943e <_printf_i+0xf6>
 8009564:	0800ade2 	.word	0x0800ade2
 8009568:	0800adf3 	.word	0x0800adf3

0800956c <siprintf>:
 800956c:	b40e      	push	{r1, r2, r3}
 800956e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009572:	b500      	push	{lr}
 8009574:	b09c      	sub	sp, #112	; 0x70
 8009576:	ab1d      	add	r3, sp, #116	; 0x74
 8009578:	9002      	str	r0, [sp, #8]
 800957a:	9006      	str	r0, [sp, #24]
 800957c:	9107      	str	r1, [sp, #28]
 800957e:	9104      	str	r1, [sp, #16]
 8009580:	4808      	ldr	r0, [pc, #32]	; (80095a4 <siprintf+0x38>)
 8009582:	4909      	ldr	r1, [pc, #36]	; (80095a8 <siprintf+0x3c>)
 8009584:	f853 2b04 	ldr.w	r2, [r3], #4
 8009588:	9105      	str	r1, [sp, #20]
 800958a:	6800      	ldr	r0, [r0, #0]
 800958c:	a902      	add	r1, sp, #8
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	f001 fa5c 	bl	800aa4c <_svfiprintf_r>
 8009594:	2200      	movs	r2, #0
 8009596:	9b02      	ldr	r3, [sp, #8]
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	b01c      	add	sp, #112	; 0x70
 800959c:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a0:	b003      	add	sp, #12
 80095a2:	4770      	bx	lr
 80095a4:	2000017c 	.word	0x2000017c
 80095a8:	ffff0208 	.word	0xffff0208

080095ac <quorem>:
 80095ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b0:	6903      	ldr	r3, [r0, #16]
 80095b2:	690c      	ldr	r4, [r1, #16]
 80095b4:	4680      	mov	r8, r0
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	f2c0 8084 	blt.w	80096c4 <quorem+0x118>
 80095bc:	3c01      	subs	r4, #1
 80095be:	f101 0714 	add.w	r7, r1, #20
 80095c2:	f100 0614 	add.w	r6, r0, #20
 80095c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80095ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80095ce:	3501      	adds	r5, #1
 80095d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80095d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80095d8:	eb06 030c 	add.w	r3, r6, ip
 80095dc:	eb07 090c 	add.w	r9, r7, ip
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	b39d      	cbz	r5, 800964c <quorem+0xa0>
 80095e4:	f04f 0a00 	mov.w	sl, #0
 80095e8:	4638      	mov	r0, r7
 80095ea:	46b6      	mov	lr, r6
 80095ec:	46d3      	mov	fp, sl
 80095ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80095f2:	b293      	uxth	r3, r2
 80095f4:	fb05 a303 	mla	r3, r5, r3, sl
 80095f8:	0c12      	lsrs	r2, r2, #16
 80095fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095fe:	fb05 a202 	mla	r2, r5, r2, sl
 8009602:	b29b      	uxth	r3, r3
 8009604:	ebab 0303 	sub.w	r3, fp, r3
 8009608:	f8de b000 	ldr.w	fp, [lr]
 800960c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009610:	fa1f fb8b 	uxth.w	fp, fp
 8009614:	445b      	add	r3, fp
 8009616:	fa1f fb82 	uxth.w	fp, r2
 800961a:	f8de 2000 	ldr.w	r2, [lr]
 800961e:	4581      	cmp	r9, r0
 8009620:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009628:	b29b      	uxth	r3, r3
 800962a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800962e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009632:	f84e 3b04 	str.w	r3, [lr], #4
 8009636:	d2da      	bcs.n	80095ee <quorem+0x42>
 8009638:	f856 300c 	ldr.w	r3, [r6, ip]
 800963c:	b933      	cbnz	r3, 800964c <quorem+0xa0>
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	3b04      	subs	r3, #4
 8009642:	429e      	cmp	r6, r3
 8009644:	461a      	mov	r2, r3
 8009646:	d331      	bcc.n	80096ac <quorem+0x100>
 8009648:	f8c8 4010 	str.w	r4, [r8, #16]
 800964c:	4640      	mov	r0, r8
 800964e:	f001 f827 	bl	800a6a0 <__mcmp>
 8009652:	2800      	cmp	r0, #0
 8009654:	db26      	blt.n	80096a4 <quorem+0xf8>
 8009656:	4630      	mov	r0, r6
 8009658:	f04f 0c00 	mov.w	ip, #0
 800965c:	3501      	adds	r5, #1
 800965e:	f857 1b04 	ldr.w	r1, [r7], #4
 8009662:	f8d0 e000 	ldr.w	lr, [r0]
 8009666:	b28b      	uxth	r3, r1
 8009668:	ebac 0303 	sub.w	r3, ip, r3
 800966c:	fa1f f28e 	uxth.w	r2, lr
 8009670:	4413      	add	r3, r2
 8009672:	0c0a      	lsrs	r2, r1, #16
 8009674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009682:	45b9      	cmp	r9, r7
 8009684:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009688:	f840 3b04 	str.w	r3, [r0], #4
 800968c:	d2e7      	bcs.n	800965e <quorem+0xb2>
 800968e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009692:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009696:	b92a      	cbnz	r2, 80096a4 <quorem+0xf8>
 8009698:	3b04      	subs	r3, #4
 800969a:	429e      	cmp	r6, r3
 800969c:	461a      	mov	r2, r3
 800969e:	d30b      	bcc.n	80096b8 <quorem+0x10c>
 80096a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80096a4:	4628      	mov	r0, r5
 80096a6:	b003      	add	sp, #12
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	3b04      	subs	r3, #4
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	d1c9      	bne.n	8009648 <quorem+0x9c>
 80096b4:	3c01      	subs	r4, #1
 80096b6:	e7c4      	b.n	8009642 <quorem+0x96>
 80096b8:	6812      	ldr	r2, [r2, #0]
 80096ba:	3b04      	subs	r3, #4
 80096bc:	2a00      	cmp	r2, #0
 80096be:	d1ef      	bne.n	80096a0 <quorem+0xf4>
 80096c0:	3c01      	subs	r4, #1
 80096c2:	e7ea      	b.n	800969a <quorem+0xee>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7ee      	b.n	80096a6 <quorem+0xfa>

080096c8 <_dtoa_r>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4616      	mov	r6, r2
 80096ce:	461f      	mov	r7, r3
 80096d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096d2:	b095      	sub	sp, #84	; 0x54
 80096d4:	4604      	mov	r4, r0
 80096d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80096da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80096de:	b93d      	cbnz	r5, 80096f0 <_dtoa_r+0x28>
 80096e0:	2010      	movs	r0, #16
 80096e2:	f000 fdb3 	bl	800a24c <malloc>
 80096e6:	6260      	str	r0, [r4, #36]	; 0x24
 80096e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096ec:	6005      	str	r5, [r0, #0]
 80096ee:	60c5      	str	r5, [r0, #12]
 80096f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	b151      	cbz	r1, 800970c <_dtoa_r+0x44>
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	2301      	movs	r3, #1
 80096fa:	4093      	lsls	r3, r2
 80096fc:	604a      	str	r2, [r1, #4]
 80096fe:	608b      	str	r3, [r1, #8]
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fded 	bl	800a2e0 <_Bfree>
 8009706:	2200      	movs	r2, #0
 8009708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	1e3b      	subs	r3, r7, #0
 800970e:	bfaf      	iteee	ge
 8009710:	2300      	movge	r3, #0
 8009712:	2201      	movlt	r2, #1
 8009714:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009718:	9303      	strlt	r3, [sp, #12]
 800971a:	bfac      	ite	ge
 800971c:	f8c8 3000 	strge.w	r3, [r8]
 8009720:	f8c8 2000 	strlt.w	r2, [r8]
 8009724:	4bae      	ldr	r3, [pc, #696]	; (80099e0 <_dtoa_r+0x318>)
 8009726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800972a:	ea33 0308 	bics.w	r3, r3, r8
 800972e:	d11b      	bne.n	8009768 <_dtoa_r+0xa0>
 8009730:	f242 730f 	movw	r3, #9999	; 0x270f
 8009734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	9b02      	ldr	r3, [sp, #8]
 800973a:	b923      	cbnz	r3, 8009746 <_dtoa_r+0x7e>
 800973c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009740:	2800      	cmp	r0, #0
 8009742:	f000 8545 	beq.w	800a1d0 <_dtoa_r+0xb08>
 8009746:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009748:	b953      	cbnz	r3, 8009760 <_dtoa_r+0x98>
 800974a:	4ba6      	ldr	r3, [pc, #664]	; (80099e4 <_dtoa_r+0x31c>)
 800974c:	e021      	b.n	8009792 <_dtoa_r+0xca>
 800974e:	4ba6      	ldr	r3, [pc, #664]	; (80099e8 <_dtoa_r+0x320>)
 8009750:	9306      	str	r3, [sp, #24]
 8009752:	3308      	adds	r3, #8
 8009754:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	9806      	ldr	r0, [sp, #24]
 800975a:	b015      	add	sp, #84	; 0x54
 800975c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009760:	4ba0      	ldr	r3, [pc, #640]	; (80099e4 <_dtoa_r+0x31c>)
 8009762:	9306      	str	r3, [sp, #24]
 8009764:	3303      	adds	r3, #3
 8009766:	e7f5      	b.n	8009754 <_dtoa_r+0x8c>
 8009768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	f7f7 f918 	bl	80009a8 <__aeabi_dcmpeq>
 8009778:	4682      	mov	sl, r0
 800977a:	b160      	cbz	r0, 8009796 <_dtoa_r+0xce>
 800977c:	2301      	movs	r3, #1
 800977e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8520 	beq.w	800a1ca <_dtoa_r+0xb02>
 800978a:	4b98      	ldr	r3, [pc, #608]	; (80099ec <_dtoa_r+0x324>)
 800978c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	3b01      	subs	r3, #1
 8009792:	9306      	str	r3, [sp, #24]
 8009794:	e7e0      	b.n	8009758 <_dtoa_r+0x90>
 8009796:	ab12      	add	r3, sp, #72	; 0x48
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	ab13      	add	r3, sp, #76	; 0x4c
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4632      	mov	r2, r6
 80097a0:	463b      	mov	r3, r7
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fff4 	bl	800a790 <__d2b>
 80097a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80097ac:	4683      	mov	fp, r0
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	d07d      	beq.n	80098ae <_dtoa_r+0x1e6>
 80097b2:	46b0      	mov	r8, r6
 80097b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80097bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80097c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80097c8:	2200      	movs	r2, #0
 80097ca:	4b89      	ldr	r3, [pc, #548]	; (80099f0 <_dtoa_r+0x328>)
 80097cc:	4640      	mov	r0, r8
 80097ce:	4649      	mov	r1, r9
 80097d0:	f7f6 fcca 	bl	8000168 <__aeabi_dsub>
 80097d4:	a37c      	add	r3, pc, #496	; (adr r3, 80099c8 <_dtoa_r+0x300>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	f7f6 fe7d 	bl	80004d8 <__aeabi_dmul>
 80097de:	a37c      	add	r3, pc, #496	; (adr r3, 80099d0 <_dtoa_r+0x308>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f7f6 fcc2 	bl	800016c <__adddf3>
 80097e8:	4606      	mov	r6, r0
 80097ea:	4628      	mov	r0, r5
 80097ec:	460f      	mov	r7, r1
 80097ee:	f7f6 fe09 	bl	8000404 <__aeabi_i2d>
 80097f2:	a379      	add	r3, pc, #484	; (adr r3, 80099d8 <_dtoa_r+0x310>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 fe6e 	bl	80004d8 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f6 fcb2 	bl	800016c <__adddf3>
 8009808:	4606      	mov	r6, r0
 800980a:	460f      	mov	r7, r1
 800980c:	f7f7 f914 	bl	8000a38 <__aeabi_d2iz>
 8009810:	2200      	movs	r2, #0
 8009812:	4682      	mov	sl, r0
 8009814:	2300      	movs	r3, #0
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	f7f7 f8cf 	bl	80009bc <__aeabi_dcmplt>
 800981e:	b148      	cbz	r0, 8009834 <_dtoa_r+0x16c>
 8009820:	4650      	mov	r0, sl
 8009822:	f7f6 fdef 	bl	8000404 <__aeabi_i2d>
 8009826:	4632      	mov	r2, r6
 8009828:	463b      	mov	r3, r7
 800982a:	f7f7 f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800982e:	b908      	cbnz	r0, 8009834 <_dtoa_r+0x16c>
 8009830:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009834:	f1ba 0f16 	cmp.w	sl, #22
 8009838:	d85a      	bhi.n	80098f0 <_dtoa_r+0x228>
 800983a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800983e:	496d      	ldr	r1, [pc, #436]	; (80099f4 <_dtoa_r+0x32c>)
 8009840:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009848:	f7f7 f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800984c:	2800      	cmp	r0, #0
 800984e:	d051      	beq.n	80098f4 <_dtoa_r+0x22c>
 8009850:	2300      	movs	r3, #0
 8009852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009856:	930d      	str	r3, [sp, #52]	; 0x34
 8009858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800985a:	1b5d      	subs	r5, r3, r5
 800985c:	1e6b      	subs	r3, r5, #1
 800985e:	9307      	str	r3, [sp, #28]
 8009860:	bf43      	ittte	mi
 8009862:	2300      	movmi	r3, #0
 8009864:	f1c5 0901 	rsbmi	r9, r5, #1
 8009868:	9307      	strmi	r3, [sp, #28]
 800986a:	f04f 0900 	movpl.w	r9, #0
 800986e:	f1ba 0f00 	cmp.w	sl, #0
 8009872:	db41      	blt.n	80098f8 <_dtoa_r+0x230>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800987a:	4453      	add	r3, sl
 800987c:	9307      	str	r3, [sp, #28]
 800987e:	2300      	movs	r3, #0
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009884:	2b09      	cmp	r3, #9
 8009886:	f200 808f 	bhi.w	80099a8 <_dtoa_r+0x2e0>
 800988a:	2b05      	cmp	r3, #5
 800988c:	bfc4      	itt	gt
 800988e:	3b04      	subgt	r3, #4
 8009890:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009894:	bfc8      	it	gt
 8009896:	2500      	movgt	r5, #0
 8009898:	f1a3 0302 	sub.w	r3, r3, #2
 800989c:	bfd8      	it	le
 800989e:	2501      	movle	r5, #1
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	f200 808d 	bhi.w	80099c0 <_dtoa_r+0x2f8>
 80098a6:	e8df f003 	tbb	[pc, r3]
 80098aa:	7d7b      	.short	0x7d7b
 80098ac:	6f2f      	.short	0x6f2f
 80098ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80098b2:	441d      	add	r5, r3
 80098b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80098b8:	2820      	cmp	r0, #32
 80098ba:	dd13      	ble.n	80098e4 <_dtoa_r+0x21c>
 80098bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80098c0:	9b02      	ldr	r3, [sp, #8]
 80098c2:	fa08 f800 	lsl.w	r8, r8, r0
 80098c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80098ca:	fa23 f000 	lsr.w	r0, r3, r0
 80098ce:	ea48 0000 	orr.w	r0, r8, r0
 80098d2:	f7f6 fd87 	bl	80003e4 <__aeabi_ui2d>
 80098d6:	2301      	movs	r3, #1
 80098d8:	4680      	mov	r8, r0
 80098da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80098de:	3d01      	subs	r5, #1
 80098e0:	9310      	str	r3, [sp, #64]	; 0x40
 80098e2:	e771      	b.n	80097c8 <_dtoa_r+0x100>
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	f1c0 0020 	rsb	r0, r0, #32
 80098ea:	fa03 f000 	lsl.w	r0, r3, r0
 80098ee:	e7f0      	b.n	80098d2 <_dtoa_r+0x20a>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e7b0      	b.n	8009856 <_dtoa_r+0x18e>
 80098f4:	900d      	str	r0, [sp, #52]	; 0x34
 80098f6:	e7af      	b.n	8009858 <_dtoa_r+0x190>
 80098f8:	f1ca 0300 	rsb	r3, sl, #0
 80098fc:	9308      	str	r3, [sp, #32]
 80098fe:	2300      	movs	r3, #0
 8009900:	eba9 090a 	sub.w	r9, r9, sl
 8009904:	930c      	str	r3, [sp, #48]	; 0x30
 8009906:	e7bc      	b.n	8009882 <_dtoa_r+0x1ba>
 8009908:	2301      	movs	r3, #1
 800990a:	9309      	str	r3, [sp, #36]	; 0x24
 800990c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd74      	ble.n	80099fc <_dtoa_r+0x334>
 8009912:	4698      	mov	r8, r3
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	2200      	movs	r2, #0
 8009918:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800991a:	6072      	str	r2, [r6, #4]
 800991c:	2204      	movs	r2, #4
 800991e:	f102 0014 	add.w	r0, r2, #20
 8009922:	4298      	cmp	r0, r3
 8009924:	6871      	ldr	r1, [r6, #4]
 8009926:	d96e      	bls.n	8009a06 <_dtoa_r+0x33e>
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fca5 	bl	800a278 <_Balloc>
 800992e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009930:	6030      	str	r0, [r6, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f1b8 0f0e 	cmp.w	r8, #14
 8009938:	9306      	str	r3, [sp, #24]
 800993a:	f200 80ed 	bhi.w	8009b18 <_dtoa_r+0x450>
 800993e:	2d00      	cmp	r5, #0
 8009940:	f000 80ea 	beq.w	8009b18 <_dtoa_r+0x450>
 8009944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009948:	f1ba 0f00 	cmp.w	sl, #0
 800994c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009950:	dd77      	ble.n	8009a42 <_dtoa_r+0x37a>
 8009952:	4a28      	ldr	r2, [pc, #160]	; (80099f4 <_dtoa_r+0x32c>)
 8009954:	f00a 030f 	and.w	r3, sl, #15
 8009958:	ea4f 162a 	mov.w	r6, sl, asr #4
 800995c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009960:	06f0      	lsls	r0, r6, #27
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800996a:	d568      	bpl.n	8009a3e <_dtoa_r+0x376>
 800996c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009970:	4b21      	ldr	r3, [pc, #132]	; (80099f8 <_dtoa_r+0x330>)
 8009972:	2503      	movs	r5, #3
 8009974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009978:	f7f6 fed8 	bl	800072c <__aeabi_ddiv>
 800997c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009980:	f006 060f 	and.w	r6, r6, #15
 8009984:	4f1c      	ldr	r7, [pc, #112]	; (80099f8 <_dtoa_r+0x330>)
 8009986:	e04f      	b.n	8009a28 <_dtoa_r+0x360>
 8009988:	2301      	movs	r3, #1
 800998a:	9309      	str	r3, [sp, #36]	; 0x24
 800998c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800998e:	4453      	add	r3, sl
 8009990:	f103 0801 	add.w	r8, r3, #1
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	4643      	mov	r3, r8
 8009998:	2b01      	cmp	r3, #1
 800999a:	bfb8      	it	lt
 800999c:	2301      	movlt	r3, #1
 800999e:	e7ba      	b.n	8009916 <_dtoa_r+0x24e>
 80099a0:	2300      	movs	r3, #0
 80099a2:	e7b2      	b.n	800990a <_dtoa_r+0x242>
 80099a4:	2300      	movs	r3, #0
 80099a6:	e7f0      	b.n	800998a <_dtoa_r+0x2c2>
 80099a8:	2501      	movs	r5, #1
 80099aa:	2300      	movs	r3, #0
 80099ac:	9509      	str	r5, [sp, #36]	; 0x24
 80099ae:	931e      	str	r3, [sp, #120]	; 0x78
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295
 80099b4:	2200      	movs	r2, #0
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	4698      	mov	r8, r3
 80099ba:	2312      	movs	r3, #18
 80099bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80099be:	e7aa      	b.n	8009916 <_dtoa_r+0x24e>
 80099c0:	2301      	movs	r3, #1
 80099c2:	9309      	str	r3, [sp, #36]	; 0x24
 80099c4:	e7f4      	b.n	80099b0 <_dtoa_r+0x2e8>
 80099c6:	bf00      	nop
 80099c8:	636f4361 	.word	0x636f4361
 80099cc:	3fd287a7 	.word	0x3fd287a7
 80099d0:	8b60c8b3 	.word	0x8b60c8b3
 80099d4:	3fc68a28 	.word	0x3fc68a28
 80099d8:	509f79fb 	.word	0x509f79fb
 80099dc:	3fd34413 	.word	0x3fd34413
 80099e0:	7ff00000 	.word	0x7ff00000
 80099e4:	0800ae0d 	.word	0x0800ae0d
 80099e8:	0800ae04 	.word	0x0800ae04
 80099ec:	0800ade1 	.word	0x0800ade1
 80099f0:	3ff80000 	.word	0x3ff80000
 80099f4:	0800ae40 	.word	0x0800ae40
 80099f8:	0800ae18 	.word	0x0800ae18
 80099fc:	2301      	movs	r3, #1
 80099fe:	9304      	str	r3, [sp, #16]
 8009a00:	4698      	mov	r8, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	e7da      	b.n	80099bc <_dtoa_r+0x2f4>
 8009a06:	3101      	adds	r1, #1
 8009a08:	6071      	str	r1, [r6, #4]
 8009a0a:	0052      	lsls	r2, r2, #1
 8009a0c:	e787      	b.n	800991e <_dtoa_r+0x256>
 8009a0e:	07f1      	lsls	r1, r6, #31
 8009a10:	d508      	bpl.n	8009a24 <_dtoa_r+0x35c>
 8009a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a1a:	f7f6 fd5d 	bl	80004d8 <__aeabi_dmul>
 8009a1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a22:	3501      	adds	r5, #1
 8009a24:	1076      	asrs	r6, r6, #1
 8009a26:	3708      	adds	r7, #8
 8009a28:	2e00      	cmp	r6, #0
 8009a2a:	d1f0      	bne.n	8009a0e <_dtoa_r+0x346>
 8009a2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a34:	f7f6 fe7a 	bl	800072c <__aeabi_ddiv>
 8009a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a3c:	e01b      	b.n	8009a76 <_dtoa_r+0x3ae>
 8009a3e:	2502      	movs	r5, #2
 8009a40:	e7a0      	b.n	8009984 <_dtoa_r+0x2bc>
 8009a42:	f000 80a4 	beq.w	8009b8e <_dtoa_r+0x4c6>
 8009a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a4a:	f1ca 0600 	rsb	r6, sl, #0
 8009a4e:	4ba0      	ldr	r3, [pc, #640]	; (8009cd0 <_dtoa_r+0x608>)
 8009a50:	f006 020f 	and.w	r2, r6, #15
 8009a54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	f7f6 fd3c 	bl	80004d8 <__aeabi_dmul>
 8009a60:	2502      	movs	r5, #2
 8009a62:	2300      	movs	r3, #0
 8009a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a68:	4f9a      	ldr	r7, [pc, #616]	; (8009cd4 <_dtoa_r+0x60c>)
 8009a6a:	1136      	asrs	r6, r6, #4
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	f040 8083 	bne.w	8009b78 <_dtoa_r+0x4b0>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e0      	bne.n	8009a38 <_dtoa_r+0x370>
 8009a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 808a 	beq.w	8009b92 <_dtoa_r+0x4ca>
 8009a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	4b92      	ldr	r3, [pc, #584]	; (8009cd8 <_dtoa_r+0x610>)
 8009a8e:	f7f6 ff95 	bl	80009bc <__aeabi_dcmplt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d07d      	beq.n	8009b92 <_dtoa_r+0x4ca>
 8009a96:	f1b8 0f00 	cmp.w	r8, #0
 8009a9a:	d07a      	beq.n	8009b92 <_dtoa_r+0x4ca>
 8009a9c:	9b04      	ldr	r3, [sp, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	dd36      	ble.n	8009b10 <_dtoa_r+0x448>
 8009aa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4b8c      	ldr	r3, [pc, #560]	; (8009cdc <_dtoa_r+0x614>)
 8009aaa:	f7f6 fd15 	bl	80004d8 <__aeabi_dmul>
 8009aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ab2:	9e04      	ldr	r6, [sp, #16]
 8009ab4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009ab8:	3501      	adds	r5, #1
 8009aba:	4628      	mov	r0, r5
 8009abc:	f7f6 fca2 	bl	8000404 <__aeabi_i2d>
 8009ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ac4:	f7f6 fd08 	bl	80004d8 <__aeabi_dmul>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4b85      	ldr	r3, [pc, #532]	; (8009ce0 <_dtoa_r+0x618>)
 8009acc:	f7f6 fb4e 	bl	800016c <__adddf3>
 8009ad0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009ad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ad8:	950b      	str	r5, [sp, #44]	; 0x2c
 8009ada:	2e00      	cmp	r6, #0
 8009adc:	d15c      	bne.n	8009b98 <_dtoa_r+0x4d0>
 8009ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	4b7f      	ldr	r3, [pc, #508]	; (8009ce4 <_dtoa_r+0x61c>)
 8009ae6:	f7f6 fb3f 	bl	8000168 <__aeabi_dsub>
 8009aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aec:	462b      	mov	r3, r5
 8009aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009af2:	f7f6 ff81 	bl	80009f8 <__aeabi_dcmpgt>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f040 8281 	bne.w	8009ffe <_dtoa_r+0x936>
 8009afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009b06:	f7f6 ff59 	bl	80009bc <__aeabi_dcmplt>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f040 8275 	bne.w	8009ffa <_dtoa_r+0x932>
 8009b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f2c0 814b 	blt.w	8009db6 <_dtoa_r+0x6ee>
 8009b20:	f1ba 0f0e 	cmp.w	sl, #14
 8009b24:	f300 8147 	bgt.w	8009db6 <_dtoa_r+0x6ee>
 8009b28:	4b69      	ldr	r3, [pc, #420]	; (8009cd0 <_dtoa_r+0x608>)
 8009b2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f280 80d7 	bge.w	8009cec <_dtoa_r+0x624>
 8009b3e:	f1b8 0f00 	cmp.w	r8, #0
 8009b42:	f300 80d3 	bgt.w	8009cec <_dtoa_r+0x624>
 8009b46:	f040 8257 	bne.w	8009ff8 <_dtoa_r+0x930>
 8009b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	4b64      	ldr	r3, [pc, #400]	; (8009ce4 <_dtoa_r+0x61c>)
 8009b52:	f7f6 fcc1 	bl	80004d8 <__aeabi_dmul>
 8009b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b5a:	f7f6 ff43 	bl	80009e4 <__aeabi_dcmpge>
 8009b5e:	4646      	mov	r6, r8
 8009b60:	4647      	mov	r7, r8
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f040 822d 	bne.w	8009fc2 <_dtoa_r+0x8fa>
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	9a06      	ldr	r2, [sp, #24]
 8009b6c:	1c5d      	adds	r5, r3, #1
 8009b6e:	2331      	movs	r3, #49	; 0x31
 8009b70:	f10a 0a01 	add.w	sl, sl, #1
 8009b74:	7013      	strb	r3, [r2, #0]
 8009b76:	e228      	b.n	8009fca <_dtoa_r+0x902>
 8009b78:	07f2      	lsls	r2, r6, #31
 8009b7a:	d505      	bpl.n	8009b88 <_dtoa_r+0x4c0>
 8009b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b80:	f7f6 fcaa 	bl	80004d8 <__aeabi_dmul>
 8009b84:	2301      	movs	r3, #1
 8009b86:	3501      	adds	r5, #1
 8009b88:	1076      	asrs	r6, r6, #1
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	e76e      	b.n	8009a6c <_dtoa_r+0x3a4>
 8009b8e:	2502      	movs	r5, #2
 8009b90:	e771      	b.n	8009a76 <_dtoa_r+0x3ae>
 8009b92:	4657      	mov	r7, sl
 8009b94:	4646      	mov	r6, r8
 8009b96:	e790      	b.n	8009aba <_dtoa_r+0x3f2>
 8009b98:	4b4d      	ldr	r3, [pc, #308]	; (8009cd0 <_dtoa_r+0x608>)
 8009b9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d048      	beq.n	8009c3a <_dtoa_r+0x572>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	2000      	movs	r0, #0
 8009bae:	494e      	ldr	r1, [pc, #312]	; (8009ce8 <_dtoa_r+0x620>)
 8009bb0:	f7f6 fdbc 	bl	800072c <__aeabi_ddiv>
 8009bb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bb8:	f7f6 fad6 	bl	8000168 <__aeabi_dsub>
 8009bbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009bc0:	9d06      	ldr	r5, [sp, #24]
 8009bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc6:	f7f6 ff37 	bl	8000a38 <__aeabi_d2iz>
 8009bca:	9011      	str	r0, [sp, #68]	; 0x44
 8009bcc:	f7f6 fc1a 	bl	8000404 <__aeabi_i2d>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bd8:	f7f6 fac6 	bl	8000168 <__aeabi_dsub>
 8009bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be2:	3330      	adds	r3, #48	; 0x30
 8009be4:	f805 3b01 	strb.w	r3, [r5], #1
 8009be8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bec:	f7f6 fee6 	bl	80009bc <__aeabi_dcmplt>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d163      	bne.n	8009cbc <_dtoa_r+0x5f4>
 8009bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	4937      	ldr	r1, [pc, #220]	; (8009cd8 <_dtoa_r+0x610>)
 8009bfc:	f7f6 fab4 	bl	8000168 <__aeabi_dsub>
 8009c00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c04:	f7f6 feda 	bl	80009bc <__aeabi_dcmplt>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	f040 80b5 	bne.w	8009d78 <_dtoa_r+0x6b0>
 8009c0e:	9b06      	ldr	r3, [sp, #24]
 8009c10:	1aeb      	subs	r3, r5, r3
 8009c12:	429e      	cmp	r6, r3
 8009c14:	f77f af7c 	ble.w	8009b10 <_dtoa_r+0x448>
 8009c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4b2f      	ldr	r3, [pc, #188]	; (8009cdc <_dtoa_r+0x614>)
 8009c20:	f7f6 fc5a 	bl	80004d8 <__aeabi_dmul>
 8009c24:	2200      	movs	r2, #0
 8009c26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c2e:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <_dtoa_r+0x614>)
 8009c30:	f7f6 fc52 	bl	80004d8 <__aeabi_dmul>
 8009c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c38:	e7c3      	b.n	8009bc2 <_dtoa_r+0x4fa>
 8009c3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c3e:	f7f6 fc4b 	bl	80004d8 <__aeabi_dmul>
 8009c42:	9b06      	ldr	r3, [sp, #24]
 8009c44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c48:	199d      	adds	r5, r3, r6
 8009c4a:	461e      	mov	r6, r3
 8009c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c50:	f7f6 fef2 	bl	8000a38 <__aeabi_d2iz>
 8009c54:	9011      	str	r0, [sp, #68]	; 0x44
 8009c56:	f7f6 fbd5 	bl	8000404 <__aeabi_i2d>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c62:	f7f6 fa81 	bl	8000168 <__aeabi_dsub>
 8009c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c6c:	3330      	adds	r3, #48	; 0x30
 8009c6e:	f806 3b01 	strb.w	r3, [r6], #1
 8009c72:	42ae      	cmp	r6, r5
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	d124      	bne.n	8009cc4 <_dtoa_r+0x5fc>
 8009c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <_dtoa_r+0x620>)
 8009c80:	f7f6 fa74 	bl	800016c <__adddf3>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c8c:	f7f6 feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d171      	bne.n	8009d78 <_dtoa_r+0x6b0>
 8009c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c98:	2000      	movs	r0, #0
 8009c9a:	4913      	ldr	r1, [pc, #76]	; (8009ce8 <_dtoa_r+0x620>)
 8009c9c:	f7f6 fa64 	bl	8000168 <__aeabi_dsub>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ca8:	f7f6 fe88 	bl	80009bc <__aeabi_dcmplt>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f43f af2f 	beq.w	8009b10 <_dtoa_r+0x448>
 8009cb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cb6:	1e6a      	subs	r2, r5, #1
 8009cb8:	2b30      	cmp	r3, #48	; 0x30
 8009cba:	d001      	beq.n	8009cc0 <_dtoa_r+0x5f8>
 8009cbc:	46ba      	mov	sl, r7
 8009cbe:	e04a      	b.n	8009d56 <_dtoa_r+0x68e>
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	e7f6      	b.n	8009cb2 <_dtoa_r+0x5ea>
 8009cc4:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <_dtoa_r+0x614>)
 8009cc6:	f7f6 fc07 	bl	80004d8 <__aeabi_dmul>
 8009cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cce:	e7bd      	b.n	8009c4c <_dtoa_r+0x584>
 8009cd0:	0800ae40 	.word	0x0800ae40
 8009cd4:	0800ae18 	.word	0x0800ae18
 8009cd8:	3ff00000 	.word	0x3ff00000
 8009cdc:	40240000 	.word	0x40240000
 8009ce0:	401c0000 	.word	0x401c0000
 8009ce4:	40140000 	.word	0x40140000
 8009ce8:	3fe00000 	.word	0x3fe00000
 8009cec:	9d06      	ldr	r5, [sp, #24]
 8009cee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 fd17 	bl	800072c <__aeabi_ddiv>
 8009cfe:	f7f6 fe9b 	bl	8000a38 <__aeabi_d2iz>
 8009d02:	4681      	mov	r9, r0
 8009d04:	f7f6 fb7e 	bl	8000404 <__aeabi_i2d>
 8009d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0c:	f7f6 fbe4 	bl	80004d8 <__aeabi_dmul>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4630      	mov	r0, r6
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7f6 fa26 	bl	8000168 <__aeabi_dsub>
 8009d1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009d20:	f805 6b01 	strb.w	r6, [r5], #1
 8009d24:	9e06      	ldr	r6, [sp, #24]
 8009d26:	4602      	mov	r2, r0
 8009d28:	1bae      	subs	r6, r5, r6
 8009d2a:	45b0      	cmp	r8, r6
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	d135      	bne.n	8009d9c <_dtoa_r+0x6d4>
 8009d30:	f7f6 fa1c 	bl	800016c <__adddf3>
 8009d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d38:	4606      	mov	r6, r0
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	f7f6 fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 8009d40:	b9c8      	cbnz	r0, 8009d76 <_dtoa_r+0x6ae>
 8009d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d46:	4630      	mov	r0, r6
 8009d48:	4639      	mov	r1, r7
 8009d4a:	f7f6 fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 8009d4e:	b110      	cbz	r0, 8009d56 <_dtoa_r+0x68e>
 8009d50:	f019 0f01 	tst.w	r9, #1
 8009d54:	d10f      	bne.n	8009d76 <_dtoa_r+0x6ae>
 8009d56:	4659      	mov	r1, fp
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fac1 	bl	800a2e0 <_Bfree>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d62:	702b      	strb	r3, [r5, #0]
 8009d64:	f10a 0301 	add.w	r3, sl, #1
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f43f acf3 	beq.w	8009758 <_dtoa_r+0x90>
 8009d72:	601d      	str	r5, [r3, #0]
 8009d74:	e4f0      	b.n	8009758 <_dtoa_r+0x90>
 8009d76:	4657      	mov	r7, sl
 8009d78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d7c:	1e6b      	subs	r3, r5, #1
 8009d7e:	2a39      	cmp	r2, #57	; 0x39
 8009d80:	d106      	bne.n	8009d90 <_dtoa_r+0x6c8>
 8009d82:	9a06      	ldr	r2, [sp, #24]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d107      	bne.n	8009d98 <_dtoa_r+0x6d0>
 8009d88:	2330      	movs	r3, #48	; 0x30
 8009d8a:	7013      	strb	r3, [r2, #0]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	3701      	adds	r7, #1
 8009d90:	781a      	ldrb	r2, [r3, #0]
 8009d92:	3201      	adds	r2, #1
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	e791      	b.n	8009cbc <_dtoa_r+0x5f4>
 8009d98:	461d      	mov	r5, r3
 8009d9a:	e7ed      	b.n	8009d78 <_dtoa_r+0x6b0>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4b99      	ldr	r3, [pc, #612]	; (800a004 <_dtoa_r+0x93c>)
 8009da0:	f7f6 fb9a 	bl	80004d8 <__aeabi_dmul>
 8009da4:	2200      	movs	r2, #0
 8009da6:	2300      	movs	r3, #0
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	f7f6 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d09e      	beq.n	8009cf2 <_dtoa_r+0x62a>
 8009db4:	e7cf      	b.n	8009d56 <_dtoa_r+0x68e>
 8009db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	f000 8088 	beq.w	8009ece <_dtoa_r+0x806>
 8009dbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dc0:	2a01      	cmp	r2, #1
 8009dc2:	dc6d      	bgt.n	8009ea0 <_dtoa_r+0x7d8>
 8009dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	d066      	beq.n	8009e98 <_dtoa_r+0x7d0>
 8009dca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009dce:	464d      	mov	r5, r9
 8009dd0:	9e08      	ldr	r6, [sp, #32]
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	441a      	add	r2, r3
 8009dd8:	4620      	mov	r0, r4
 8009dda:	4499      	add	r9, r3
 8009ddc:	9207      	str	r2, [sp, #28]
 8009dde:	f000 fb1f 	bl	800a420 <__i2b>
 8009de2:	4607      	mov	r7, r0
 8009de4:	2d00      	cmp	r5, #0
 8009de6:	dd0b      	ble.n	8009e00 <_dtoa_r+0x738>
 8009de8:	9b07      	ldr	r3, [sp, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dd08      	ble.n	8009e00 <_dtoa_r+0x738>
 8009dee:	42ab      	cmp	r3, r5
 8009df0:	bfa8      	it	ge
 8009df2:	462b      	movge	r3, r5
 8009df4:	9a07      	ldr	r2, [sp, #28]
 8009df6:	eba9 0903 	sub.w	r9, r9, r3
 8009dfa:	1aed      	subs	r5, r5, r3
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	b1eb      	cbz	r3, 8009e40 <_dtoa_r+0x778>
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d065      	beq.n	8009ed6 <_dtoa_r+0x80e>
 8009e0a:	b18e      	cbz	r6, 8009e30 <_dtoa_r+0x768>
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	4632      	mov	r2, r6
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fba3 	bl	800a55c <__pow5mult>
 8009e16:	465a      	mov	r2, fp
 8009e18:	4601      	mov	r1, r0
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fb08 	bl	800a432 <__multiply>
 8009e22:	4659      	mov	r1, fp
 8009e24:	900a      	str	r0, [sp, #40]	; 0x28
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fa5a 	bl	800a2e0 <_Bfree>
 8009e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2e:	469b      	mov	fp, r3
 8009e30:	9b08      	ldr	r3, [sp, #32]
 8009e32:	1b9a      	subs	r2, r3, r6
 8009e34:	d004      	beq.n	8009e40 <_dtoa_r+0x778>
 8009e36:	4659      	mov	r1, fp
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fb8f 	bl	800a55c <__pow5mult>
 8009e3e:	4683      	mov	fp, r0
 8009e40:	2101      	movs	r1, #1
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 faec 	bl	800a420 <__i2b>
 8009e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 81c6 	beq.w	800a1de <_dtoa_r+0xb16>
 8009e52:	461a      	mov	r2, r3
 8009e54:	4601      	mov	r1, r0
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fb80 	bl	800a55c <__pow5mult>
 8009e5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e5e:	4606      	mov	r6, r0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	dc3e      	bgt.n	8009ee2 <_dtoa_r+0x81a>
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d137      	bne.n	8009eda <_dtoa_r+0x812>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d134      	bne.n	8009ede <_dtoa_r+0x816>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e7a:	0d1b      	lsrs	r3, r3, #20
 8009e7c:	051b      	lsls	r3, r3, #20
 8009e7e:	b12b      	cbz	r3, 8009e8c <_dtoa_r+0x7c4>
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	f109 0901 	add.w	r9, r9, #1
 8009e86:	3301      	adds	r3, #1
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	9308      	str	r3, [sp, #32]
 8009e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d128      	bne.n	8009ee6 <_dtoa_r+0x81e>
 8009e94:	2001      	movs	r0, #1
 8009e96:	e02e      	b.n	8009ef6 <_dtoa_r+0x82e>
 8009e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e9e:	e796      	b.n	8009dce <_dtoa_r+0x706>
 8009ea0:	9b08      	ldr	r3, [sp, #32]
 8009ea2:	f108 36ff 	add.w	r6, r8, #4294967295
 8009ea6:	42b3      	cmp	r3, r6
 8009ea8:	bfb7      	itett	lt
 8009eaa:	9b08      	ldrlt	r3, [sp, #32]
 8009eac:	1b9e      	subge	r6, r3, r6
 8009eae:	1af2      	sublt	r2, r6, r3
 8009eb0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009eb2:	bfbf      	itttt	lt
 8009eb4:	9608      	strlt	r6, [sp, #32]
 8009eb6:	189b      	addlt	r3, r3, r2
 8009eb8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009eba:	2600      	movlt	r6, #0
 8009ebc:	f1b8 0f00 	cmp.w	r8, #0
 8009ec0:	bfb9      	ittee	lt
 8009ec2:	eba9 0508 	sublt.w	r5, r9, r8
 8009ec6:	2300      	movlt	r3, #0
 8009ec8:	464d      	movge	r5, r9
 8009eca:	4643      	movge	r3, r8
 8009ecc:	e781      	b.n	8009dd2 <_dtoa_r+0x70a>
 8009ece:	9e08      	ldr	r6, [sp, #32]
 8009ed0:	464d      	mov	r5, r9
 8009ed2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ed4:	e786      	b.n	8009de4 <_dtoa_r+0x71c>
 8009ed6:	9a08      	ldr	r2, [sp, #32]
 8009ed8:	e7ad      	b.n	8009e36 <_dtoa_r+0x76e>
 8009eda:	2300      	movs	r3, #0
 8009edc:	e7d6      	b.n	8009e8c <_dtoa_r+0x7c4>
 8009ede:	9b02      	ldr	r3, [sp, #8]
 8009ee0:	e7d4      	b.n	8009e8c <_dtoa_r+0x7c4>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9308      	str	r3, [sp, #32]
 8009ee6:	6933      	ldr	r3, [r6, #16]
 8009ee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009eec:	6918      	ldr	r0, [r3, #16]
 8009eee:	f000 fa49 	bl	800a384 <__hi0bits>
 8009ef2:	f1c0 0020 	rsb	r0, r0, #32
 8009ef6:	9b07      	ldr	r3, [sp, #28]
 8009ef8:	4418      	add	r0, r3
 8009efa:	f010 001f 	ands.w	r0, r0, #31
 8009efe:	d047      	beq.n	8009f90 <_dtoa_r+0x8c8>
 8009f00:	f1c0 0320 	rsb	r3, r0, #32
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	dd3b      	ble.n	8009f80 <_dtoa_r+0x8b8>
 8009f08:	9b07      	ldr	r3, [sp, #28]
 8009f0a:	f1c0 001c 	rsb	r0, r0, #28
 8009f0e:	4481      	add	r9, r0
 8009f10:	4405      	add	r5, r0
 8009f12:	4403      	add	r3, r0
 8009f14:	9307      	str	r3, [sp, #28]
 8009f16:	f1b9 0f00 	cmp.w	r9, #0
 8009f1a:	dd05      	ble.n	8009f28 <_dtoa_r+0x860>
 8009f1c:	4659      	mov	r1, fp
 8009f1e:	464a      	mov	r2, r9
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fb69 	bl	800a5f8 <__lshift>
 8009f26:	4683      	mov	fp, r0
 8009f28:	9b07      	ldr	r3, [sp, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dd05      	ble.n	8009f3a <_dtoa_r+0x872>
 8009f2e:	4631      	mov	r1, r6
 8009f30:	461a      	mov	r2, r3
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 fb60 	bl	800a5f8 <__lshift>
 8009f38:	4606      	mov	r6, r0
 8009f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f3c:	b353      	cbz	r3, 8009f94 <_dtoa_r+0x8cc>
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4658      	mov	r0, fp
 8009f42:	f000 fbad 	bl	800a6a0 <__mcmp>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	da24      	bge.n	8009f94 <_dtoa_r+0x8cc>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	220a      	movs	r2, #10
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f9dc 	bl	800a30e <__multadd>
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f5c:	4683      	mov	fp, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 8144 	beq.w	800a1ec <_dtoa_r+0xb24>
 8009f64:	2300      	movs	r3, #0
 8009f66:	4639      	mov	r1, r7
 8009f68:	220a      	movs	r2, #10
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 f9cf 	bl	800a30e <__multadd>
 8009f70:	9b04      	ldr	r3, [sp, #16]
 8009f72:	4607      	mov	r7, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dc4d      	bgt.n	800a014 <_dtoa_r+0x94c>
 8009f78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	dd4a      	ble.n	800a014 <_dtoa_r+0x94c>
 8009f7e:	e011      	b.n	8009fa4 <_dtoa_r+0x8dc>
 8009f80:	d0c9      	beq.n	8009f16 <_dtoa_r+0x84e>
 8009f82:	9a07      	ldr	r2, [sp, #28]
 8009f84:	331c      	adds	r3, #28
 8009f86:	441a      	add	r2, r3
 8009f88:	4499      	add	r9, r3
 8009f8a:	441d      	add	r5, r3
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	e7c1      	b.n	8009f14 <_dtoa_r+0x84c>
 8009f90:	4603      	mov	r3, r0
 8009f92:	e7f6      	b.n	8009f82 <_dtoa_r+0x8ba>
 8009f94:	f1b8 0f00 	cmp.w	r8, #0
 8009f98:	dc36      	bgt.n	800a008 <_dtoa_r+0x940>
 8009f9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	dd33      	ble.n	800a008 <_dtoa_r+0x940>
 8009fa0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009fa4:	9b04      	ldr	r3, [sp, #16]
 8009fa6:	b963      	cbnz	r3, 8009fc2 <_dtoa_r+0x8fa>
 8009fa8:	4631      	mov	r1, r6
 8009faa:	2205      	movs	r2, #5
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 f9ae 	bl	800a30e <__multadd>
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	f000 fb72 	bl	800a6a0 <__mcmp>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f73f add3 	bgt.w	8009b68 <_dtoa_r+0x4a0>
 8009fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fc4:	9d06      	ldr	r5, [sp, #24]
 8009fc6:	ea6f 0a03 	mvn.w	sl, r3
 8009fca:	f04f 0900 	mov.w	r9, #0
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 f985 	bl	800a2e0 <_Bfree>
 8009fd6:	2f00      	cmp	r7, #0
 8009fd8:	f43f aebd 	beq.w	8009d56 <_dtoa_r+0x68e>
 8009fdc:	f1b9 0f00 	cmp.w	r9, #0
 8009fe0:	d005      	beq.n	8009fee <_dtoa_r+0x926>
 8009fe2:	45b9      	cmp	r9, r7
 8009fe4:	d003      	beq.n	8009fee <_dtoa_r+0x926>
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 f979 	bl	800a2e0 <_Bfree>
 8009fee:	4639      	mov	r1, r7
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f975 	bl	800a2e0 <_Bfree>
 8009ff6:	e6ae      	b.n	8009d56 <_dtoa_r+0x68e>
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	4637      	mov	r7, r6
 8009ffc:	e7e1      	b.n	8009fc2 <_dtoa_r+0x8fa>
 8009ffe:	46ba      	mov	sl, r7
 800a000:	4637      	mov	r7, r6
 800a002:	e5b1      	b.n	8009b68 <_dtoa_r+0x4a0>
 800a004:	40240000 	.word	0x40240000
 800a008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 80f3 	beq.w	800a1fa <_dtoa_r+0xb32>
 800a014:	2d00      	cmp	r5, #0
 800a016:	dd05      	ble.n	800a024 <_dtoa_r+0x95c>
 800a018:	4639      	mov	r1, r7
 800a01a:	462a      	mov	r2, r5
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 faeb 	bl	800a5f8 <__lshift>
 800a022:	4607      	mov	r7, r0
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d04c      	beq.n	800a0c4 <_dtoa_r+0x9fc>
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 f923 	bl	800a278 <_Balloc>
 800a032:	4605      	mov	r5, r0
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	f107 010c 	add.w	r1, r7, #12
 800a03a:	3202      	adds	r2, #2
 800a03c:	0092      	lsls	r2, r2, #2
 800a03e:	300c      	adds	r0, #12
 800a040:	f7fe fe32 	bl	8008ca8 <memcpy>
 800a044:	2201      	movs	r2, #1
 800a046:	4629      	mov	r1, r5
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fad5 	bl	800a5f8 <__lshift>
 800a04e:	46b9      	mov	r9, r7
 800a050:	4607      	mov	r7, r0
 800a052:	9b06      	ldr	r3, [sp, #24]
 800a054:	9307      	str	r3, [sp, #28]
 800a056:	9b02      	ldr	r3, [sp, #8]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	9308      	str	r3, [sp, #32]
 800a05e:	4631      	mov	r1, r6
 800a060:	4658      	mov	r0, fp
 800a062:	f7ff faa3 	bl	80095ac <quorem>
 800a066:	4649      	mov	r1, r9
 800a068:	4605      	mov	r5, r0
 800a06a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a06e:	4658      	mov	r0, fp
 800a070:	f000 fb16 	bl	800a6a0 <__mcmp>
 800a074:	463a      	mov	r2, r7
 800a076:	9002      	str	r0, [sp, #8]
 800a078:	4631      	mov	r1, r6
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fb2a 	bl	800a6d4 <__mdiff>
 800a080:	68c3      	ldr	r3, [r0, #12]
 800a082:	4602      	mov	r2, r0
 800a084:	bb03      	cbnz	r3, 800a0c8 <_dtoa_r+0xa00>
 800a086:	4601      	mov	r1, r0
 800a088:	9009      	str	r0, [sp, #36]	; 0x24
 800a08a:	4658      	mov	r0, fp
 800a08c:	f000 fb08 	bl	800a6a0 <__mcmp>
 800a090:	4603      	mov	r3, r0
 800a092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a094:	4611      	mov	r1, r2
 800a096:	4620      	mov	r0, r4
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	f000 f921 	bl	800a2e0 <_Bfree>
 800a09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a0:	b9a3      	cbnz	r3, 800a0cc <_dtoa_r+0xa04>
 800a0a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a0a4:	b992      	cbnz	r2, 800a0cc <_dtoa_r+0xa04>
 800a0a6:	9a08      	ldr	r2, [sp, #32]
 800a0a8:	b982      	cbnz	r2, 800a0cc <_dtoa_r+0xa04>
 800a0aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0ae:	d029      	beq.n	800a104 <_dtoa_r+0xa3c>
 800a0b0:	9b02      	ldr	r3, [sp, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd01      	ble.n	800a0ba <_dtoa_r+0x9f2>
 800a0b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a0ba:	9b07      	ldr	r3, [sp, #28]
 800a0bc:	1c5d      	adds	r5, r3, #1
 800a0be:	f883 8000 	strb.w	r8, [r3]
 800a0c2:	e784      	b.n	8009fce <_dtoa_r+0x906>
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	e7c2      	b.n	800a04e <_dtoa_r+0x986>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e7e3      	b.n	800a094 <_dtoa_r+0x9cc>
 800a0cc:	9a02      	ldr	r2, [sp, #8]
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	db04      	blt.n	800a0dc <_dtoa_r+0xa14>
 800a0d2:	d123      	bne.n	800a11c <_dtoa_r+0xa54>
 800a0d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a0d6:	bb0a      	cbnz	r2, 800a11c <_dtoa_r+0xa54>
 800a0d8:	9a08      	ldr	r2, [sp, #32]
 800a0da:	b9fa      	cbnz	r2, 800a11c <_dtoa_r+0xa54>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	ddec      	ble.n	800a0ba <_dtoa_r+0x9f2>
 800a0e0:	4659      	mov	r1, fp
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f000 fa87 	bl	800a5f8 <__lshift>
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4683      	mov	fp, r0
 800a0ee:	f000 fad7 	bl	800a6a0 <__mcmp>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	dc03      	bgt.n	800a0fe <_dtoa_r+0xa36>
 800a0f6:	d1e0      	bne.n	800a0ba <_dtoa_r+0x9f2>
 800a0f8:	f018 0f01 	tst.w	r8, #1
 800a0fc:	d0dd      	beq.n	800a0ba <_dtoa_r+0x9f2>
 800a0fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a102:	d1d8      	bne.n	800a0b6 <_dtoa_r+0x9ee>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	9a07      	ldr	r2, [sp, #28]
 800a108:	1c5d      	adds	r5, r3, #1
 800a10a:	2339      	movs	r3, #57	; 0x39
 800a10c:	7013      	strb	r3, [r2, #0]
 800a10e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a112:	1e6a      	subs	r2, r5, #1
 800a114:	2b39      	cmp	r3, #57	; 0x39
 800a116:	d04d      	beq.n	800a1b4 <_dtoa_r+0xaec>
 800a118:	3301      	adds	r3, #1
 800a11a:	e052      	b.n	800a1c2 <_dtoa_r+0xafa>
 800a11c:	9a07      	ldr	r2, [sp, #28]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f102 0501 	add.w	r5, r2, #1
 800a124:	dd06      	ble.n	800a134 <_dtoa_r+0xa6c>
 800a126:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a12a:	d0eb      	beq.n	800a104 <_dtoa_r+0xa3c>
 800a12c:	f108 0801 	add.w	r8, r8, #1
 800a130:	9b07      	ldr	r3, [sp, #28]
 800a132:	e7c4      	b.n	800a0be <_dtoa_r+0x9f6>
 800a134:	9b06      	ldr	r3, [sp, #24]
 800a136:	9a04      	ldr	r2, [sp, #16]
 800a138:	1aeb      	subs	r3, r5, r3
 800a13a:	4293      	cmp	r3, r2
 800a13c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a140:	d021      	beq.n	800a186 <_dtoa_r+0xabe>
 800a142:	4659      	mov	r1, fp
 800a144:	2300      	movs	r3, #0
 800a146:	220a      	movs	r2, #10
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 f8e0 	bl	800a30e <__multadd>
 800a14e:	45b9      	cmp	r9, r7
 800a150:	4683      	mov	fp, r0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	f04f 020a 	mov.w	r2, #10
 800a15a:	4649      	mov	r1, r9
 800a15c:	4620      	mov	r0, r4
 800a15e:	d105      	bne.n	800a16c <_dtoa_r+0xaa4>
 800a160:	f000 f8d5 	bl	800a30e <__multadd>
 800a164:	4681      	mov	r9, r0
 800a166:	4607      	mov	r7, r0
 800a168:	9507      	str	r5, [sp, #28]
 800a16a:	e778      	b.n	800a05e <_dtoa_r+0x996>
 800a16c:	f000 f8cf 	bl	800a30e <__multadd>
 800a170:	4639      	mov	r1, r7
 800a172:	4681      	mov	r9, r0
 800a174:	2300      	movs	r3, #0
 800a176:	220a      	movs	r2, #10
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 f8c8 	bl	800a30e <__multadd>
 800a17e:	4607      	mov	r7, r0
 800a180:	e7f2      	b.n	800a168 <_dtoa_r+0xaa0>
 800a182:	f04f 0900 	mov.w	r9, #0
 800a186:	4659      	mov	r1, fp
 800a188:	2201      	movs	r2, #1
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fa34 	bl	800a5f8 <__lshift>
 800a190:	4631      	mov	r1, r6
 800a192:	4683      	mov	fp, r0
 800a194:	f000 fa84 	bl	800a6a0 <__mcmp>
 800a198:	2800      	cmp	r0, #0
 800a19a:	dcb8      	bgt.n	800a10e <_dtoa_r+0xa46>
 800a19c:	d102      	bne.n	800a1a4 <_dtoa_r+0xadc>
 800a19e:	f018 0f01 	tst.w	r8, #1
 800a1a2:	d1b4      	bne.n	800a10e <_dtoa_r+0xa46>
 800a1a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1a8:	1e6a      	subs	r2, r5, #1
 800a1aa:	2b30      	cmp	r3, #48	; 0x30
 800a1ac:	f47f af0f 	bne.w	8009fce <_dtoa_r+0x906>
 800a1b0:	4615      	mov	r5, r2
 800a1b2:	e7f7      	b.n	800a1a4 <_dtoa_r+0xadc>
 800a1b4:	9b06      	ldr	r3, [sp, #24]
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d105      	bne.n	800a1c6 <_dtoa_r+0xafe>
 800a1ba:	2331      	movs	r3, #49	; 0x31
 800a1bc:	9a06      	ldr	r2, [sp, #24]
 800a1be:	f10a 0a01 	add.w	sl, sl, #1
 800a1c2:	7013      	strb	r3, [r2, #0]
 800a1c4:	e703      	b.n	8009fce <_dtoa_r+0x906>
 800a1c6:	4615      	mov	r5, r2
 800a1c8:	e7a1      	b.n	800a10e <_dtoa_r+0xa46>
 800a1ca:	4b17      	ldr	r3, [pc, #92]	; (800a228 <_dtoa_r+0xb60>)
 800a1cc:	f7ff bae1 	b.w	8009792 <_dtoa_r+0xca>
 800a1d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f47f aabb 	bne.w	800974e <_dtoa_r+0x86>
 800a1d8:	4b14      	ldr	r3, [pc, #80]	; (800a22c <_dtoa_r+0xb64>)
 800a1da:	f7ff bada 	b.w	8009792 <_dtoa_r+0xca>
 800a1de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	f77f ae3f 	ble.w	8009e64 <_dtoa_r+0x79c>
 800a1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e8:	9308      	str	r3, [sp, #32]
 800a1ea:	e653      	b.n	8009e94 <_dtoa_r+0x7cc>
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dc03      	bgt.n	800a1fa <_dtoa_r+0xb32>
 800a1f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	f73f aed5 	bgt.w	8009fa4 <_dtoa_r+0x8dc>
 800a1fa:	9d06      	ldr	r5, [sp, #24]
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4658      	mov	r0, fp
 800a200:	f7ff f9d4 	bl	80095ac <quorem>
 800a204:	9b06      	ldr	r3, [sp, #24]
 800a206:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a20a:	f805 8b01 	strb.w	r8, [r5], #1
 800a20e:	9a04      	ldr	r2, [sp, #16]
 800a210:	1aeb      	subs	r3, r5, r3
 800a212:	429a      	cmp	r2, r3
 800a214:	ddb5      	ble.n	800a182 <_dtoa_r+0xaba>
 800a216:	4659      	mov	r1, fp
 800a218:	2300      	movs	r3, #0
 800a21a:	220a      	movs	r2, #10
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 f876 	bl	800a30e <__multadd>
 800a222:	4683      	mov	fp, r0
 800a224:	e7ea      	b.n	800a1fc <_dtoa_r+0xb34>
 800a226:	bf00      	nop
 800a228:	0800ade0 	.word	0x0800ade0
 800a22c:	0800ae04 	.word	0x0800ae04

0800a230 <_localeconv_r>:
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <_localeconv_r+0x14>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6a18      	ldr	r0, [r3, #32]
 800a236:	4b04      	ldr	r3, [pc, #16]	; (800a248 <_localeconv_r+0x18>)
 800a238:	2800      	cmp	r0, #0
 800a23a:	bf08      	it	eq
 800a23c:	4618      	moveq	r0, r3
 800a23e:	30f0      	adds	r0, #240	; 0xf0
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	2000017c 	.word	0x2000017c
 800a248:	200001e0 	.word	0x200001e0

0800a24c <malloc>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <malloc+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f000 bb47 	b.w	800a8e4 <_malloc_r>
 800a256:	bf00      	nop
 800a258:	2000017c 	.word	0x2000017c

0800a25c <memchr>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	b2c9      	uxtb	r1, r1
 800a260:	4402      	add	r2, r0
 800a262:	4290      	cmp	r0, r2
 800a264:	4603      	mov	r3, r0
 800a266:	d101      	bne.n	800a26c <memchr+0x10>
 800a268:	2300      	movs	r3, #0
 800a26a:	e003      	b.n	800a274 <memchr+0x18>
 800a26c:	781c      	ldrb	r4, [r3, #0]
 800a26e:	3001      	adds	r0, #1
 800a270:	428c      	cmp	r4, r1
 800a272:	d1f6      	bne.n	800a262 <memchr+0x6>
 800a274:	4618      	mov	r0, r3
 800a276:	bd10      	pop	{r4, pc}

0800a278 <_Balloc>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a27c:	4604      	mov	r4, r0
 800a27e:	460e      	mov	r6, r1
 800a280:	b93d      	cbnz	r5, 800a292 <_Balloc+0x1a>
 800a282:	2010      	movs	r0, #16
 800a284:	f7ff ffe2 	bl	800a24c <malloc>
 800a288:	6260      	str	r0, [r4, #36]	; 0x24
 800a28a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a28e:	6005      	str	r5, [r0, #0]
 800a290:	60c5      	str	r5, [r0, #12]
 800a292:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a294:	68eb      	ldr	r3, [r5, #12]
 800a296:	b183      	cbz	r3, 800a2ba <_Balloc+0x42>
 800a298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a2a0:	b9b8      	cbnz	r0, 800a2d2 <_Balloc+0x5a>
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	fa01 f506 	lsl.w	r5, r1, r6
 800a2a8:	1d6a      	adds	r2, r5, #5
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fabe 	bl	800a82e <_calloc_r>
 800a2b2:	b160      	cbz	r0, 800a2ce <_Balloc+0x56>
 800a2b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a2b8:	e00e      	b.n	800a2d8 <_Balloc+0x60>
 800a2ba:	2221      	movs	r2, #33	; 0x21
 800a2bc:	2104      	movs	r1, #4
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f000 fab5 	bl	800a82e <_calloc_r>
 800a2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c6:	60e8      	str	r0, [r5, #12]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e4      	bne.n	800a298 <_Balloc+0x20>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	6802      	ldr	r2, [r0, #0]
 800a2d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2de:	e7f7      	b.n	800a2d0 <_Balloc+0x58>

0800a2e0 <_Bfree>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	b93c      	cbnz	r4, 800a2fa <_Bfree+0x1a>
 800a2ea:	2010      	movs	r0, #16
 800a2ec:	f7ff ffae 	bl	800a24c <malloc>
 800a2f0:	6270      	str	r0, [r6, #36]	; 0x24
 800a2f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2f6:	6004      	str	r4, [r0, #0]
 800a2f8:	60c4      	str	r4, [r0, #12]
 800a2fa:	b13d      	cbz	r5, 800a30c <_Bfree+0x2c>
 800a2fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2fe:	686a      	ldr	r2, [r5, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a306:	6029      	str	r1, [r5, #0]
 800a308:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a30c:	bd70      	pop	{r4, r5, r6, pc}

0800a30e <__multadd>:
 800a30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a312:	461f      	mov	r7, r3
 800a314:	4606      	mov	r6, r0
 800a316:	460c      	mov	r4, r1
 800a318:	2300      	movs	r3, #0
 800a31a:	690d      	ldr	r5, [r1, #16]
 800a31c:	f101 0c14 	add.w	ip, r1, #20
 800a320:	f8dc 0000 	ldr.w	r0, [ip]
 800a324:	3301      	adds	r3, #1
 800a326:	b281      	uxth	r1, r0
 800a328:	fb02 7101 	mla	r1, r2, r1, r7
 800a32c:	0c00      	lsrs	r0, r0, #16
 800a32e:	0c0f      	lsrs	r7, r1, #16
 800a330:	fb02 7000 	mla	r0, r2, r0, r7
 800a334:	b289      	uxth	r1, r1
 800a336:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a33a:	429d      	cmp	r5, r3
 800a33c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a340:	f84c 1b04 	str.w	r1, [ip], #4
 800a344:	dcec      	bgt.n	800a320 <__multadd+0x12>
 800a346:	b1d7      	cbz	r7, 800a37e <__multadd+0x70>
 800a348:	68a3      	ldr	r3, [r4, #8]
 800a34a:	42ab      	cmp	r3, r5
 800a34c:	dc12      	bgt.n	800a374 <__multadd+0x66>
 800a34e:	6861      	ldr	r1, [r4, #4]
 800a350:	4630      	mov	r0, r6
 800a352:	3101      	adds	r1, #1
 800a354:	f7ff ff90 	bl	800a278 <_Balloc>
 800a358:	4680      	mov	r8, r0
 800a35a:	6922      	ldr	r2, [r4, #16]
 800a35c:	f104 010c 	add.w	r1, r4, #12
 800a360:	3202      	adds	r2, #2
 800a362:	0092      	lsls	r2, r2, #2
 800a364:	300c      	adds	r0, #12
 800a366:	f7fe fc9f 	bl	8008ca8 <memcpy>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7ff ffb7 	bl	800a2e0 <_Bfree>
 800a372:	4644      	mov	r4, r8
 800a374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a378:	3501      	adds	r5, #1
 800a37a:	615f      	str	r7, [r3, #20]
 800a37c:	6125      	str	r5, [r4, #16]
 800a37e:	4620      	mov	r0, r4
 800a380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a384 <__hi0bits>:
 800a384:	0c02      	lsrs	r2, r0, #16
 800a386:	0412      	lsls	r2, r2, #16
 800a388:	4603      	mov	r3, r0
 800a38a:	b9b2      	cbnz	r2, 800a3ba <__hi0bits+0x36>
 800a38c:	0403      	lsls	r3, r0, #16
 800a38e:	2010      	movs	r0, #16
 800a390:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a394:	bf04      	itt	eq
 800a396:	021b      	lsleq	r3, r3, #8
 800a398:	3008      	addeq	r0, #8
 800a39a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a39e:	bf04      	itt	eq
 800a3a0:	011b      	lsleq	r3, r3, #4
 800a3a2:	3004      	addeq	r0, #4
 800a3a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a3a8:	bf04      	itt	eq
 800a3aa:	009b      	lsleq	r3, r3, #2
 800a3ac:	3002      	addeq	r0, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	db06      	blt.n	800a3c0 <__hi0bits+0x3c>
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	d503      	bpl.n	800a3be <__hi0bits+0x3a>
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	4770      	bx	lr
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e7e8      	b.n	800a390 <__hi0bits+0xc>
 800a3be:	2020      	movs	r0, #32
 800a3c0:	4770      	bx	lr

0800a3c2 <__lo0bits>:
 800a3c2:	6803      	ldr	r3, [r0, #0]
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	f013 0207 	ands.w	r2, r3, #7
 800a3ca:	d00b      	beq.n	800a3e4 <__lo0bits+0x22>
 800a3cc:	07da      	lsls	r2, r3, #31
 800a3ce:	d423      	bmi.n	800a418 <__lo0bits+0x56>
 800a3d0:	0798      	lsls	r0, r3, #30
 800a3d2:	bf49      	itett	mi
 800a3d4:	085b      	lsrmi	r3, r3, #1
 800a3d6:	089b      	lsrpl	r3, r3, #2
 800a3d8:	2001      	movmi	r0, #1
 800a3da:	600b      	strmi	r3, [r1, #0]
 800a3dc:	bf5c      	itt	pl
 800a3de:	600b      	strpl	r3, [r1, #0]
 800a3e0:	2002      	movpl	r0, #2
 800a3e2:	4770      	bx	lr
 800a3e4:	b298      	uxth	r0, r3
 800a3e6:	b9a8      	cbnz	r0, 800a414 <__lo0bits+0x52>
 800a3e8:	2010      	movs	r0, #16
 800a3ea:	0c1b      	lsrs	r3, r3, #16
 800a3ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3f0:	bf04      	itt	eq
 800a3f2:	0a1b      	lsreq	r3, r3, #8
 800a3f4:	3008      	addeq	r0, #8
 800a3f6:	071a      	lsls	r2, r3, #28
 800a3f8:	bf04      	itt	eq
 800a3fa:	091b      	lsreq	r3, r3, #4
 800a3fc:	3004      	addeq	r0, #4
 800a3fe:	079a      	lsls	r2, r3, #30
 800a400:	bf04      	itt	eq
 800a402:	089b      	lsreq	r3, r3, #2
 800a404:	3002      	addeq	r0, #2
 800a406:	07da      	lsls	r2, r3, #31
 800a408:	d402      	bmi.n	800a410 <__lo0bits+0x4e>
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	d006      	beq.n	800a41c <__lo0bits+0x5a>
 800a40e:	3001      	adds	r0, #1
 800a410:	600b      	str	r3, [r1, #0]
 800a412:	4770      	bx	lr
 800a414:	4610      	mov	r0, r2
 800a416:	e7e9      	b.n	800a3ec <__lo0bits+0x2a>
 800a418:	2000      	movs	r0, #0
 800a41a:	4770      	bx	lr
 800a41c:	2020      	movs	r0, #32
 800a41e:	4770      	bx	lr

0800a420 <__i2b>:
 800a420:	b510      	push	{r4, lr}
 800a422:	460c      	mov	r4, r1
 800a424:	2101      	movs	r1, #1
 800a426:	f7ff ff27 	bl	800a278 <_Balloc>
 800a42a:	2201      	movs	r2, #1
 800a42c:	6144      	str	r4, [r0, #20]
 800a42e:	6102      	str	r2, [r0, #16]
 800a430:	bd10      	pop	{r4, pc}

0800a432 <__multiply>:
 800a432:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a436:	4614      	mov	r4, r2
 800a438:	690a      	ldr	r2, [r1, #16]
 800a43a:	6923      	ldr	r3, [r4, #16]
 800a43c:	4688      	mov	r8, r1
 800a43e:	429a      	cmp	r2, r3
 800a440:	bfbe      	ittt	lt
 800a442:	460b      	movlt	r3, r1
 800a444:	46a0      	movlt	r8, r4
 800a446:	461c      	movlt	r4, r3
 800a448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a44c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a450:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a454:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a458:	eb07 0609 	add.w	r6, r7, r9
 800a45c:	42b3      	cmp	r3, r6
 800a45e:	bfb8      	it	lt
 800a460:	3101      	addlt	r1, #1
 800a462:	f7ff ff09 	bl	800a278 <_Balloc>
 800a466:	f100 0514 	add.w	r5, r0, #20
 800a46a:	462b      	mov	r3, r5
 800a46c:	2200      	movs	r2, #0
 800a46e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a472:	4573      	cmp	r3, lr
 800a474:	d316      	bcc.n	800a4a4 <__multiply+0x72>
 800a476:	f104 0214 	add.w	r2, r4, #20
 800a47a:	f108 0114 	add.w	r1, r8, #20
 800a47e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a482:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	9201      	str	r2, [sp, #4]
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d80c      	bhi.n	800a4aa <__multiply+0x78>
 800a490:	2e00      	cmp	r6, #0
 800a492:	dd03      	ble.n	800a49c <__multiply+0x6a>
 800a494:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d05d      	beq.n	800a558 <__multiply+0x126>
 800a49c:	6106      	str	r6, [r0, #16]
 800a49e:	b003      	add	sp, #12
 800a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	f843 2b04 	str.w	r2, [r3], #4
 800a4a8:	e7e3      	b.n	800a472 <__multiply+0x40>
 800a4aa:	f8b2 b000 	ldrh.w	fp, [r2]
 800a4ae:	f1bb 0f00 	cmp.w	fp, #0
 800a4b2:	d023      	beq.n	800a4fc <__multiply+0xca>
 800a4b4:	4689      	mov	r9, r1
 800a4b6:	46ac      	mov	ip, r5
 800a4b8:	f04f 0800 	mov.w	r8, #0
 800a4bc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4c0:	f8dc a000 	ldr.w	sl, [ip]
 800a4c4:	b2a3      	uxth	r3, r4
 800a4c6:	fa1f fa8a 	uxth.w	sl, sl
 800a4ca:	fb0b a303 	mla	r3, fp, r3, sl
 800a4ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a4d2:	f8dc 4000 	ldr.w	r4, [ip]
 800a4d6:	4443      	add	r3, r8
 800a4d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4dc:	fb0b 840a 	mla	r4, fp, sl, r8
 800a4e0:	46e2      	mov	sl, ip
 800a4e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4ec:	454f      	cmp	r7, r9
 800a4ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a4f6:	d82b      	bhi.n	800a550 <__multiply+0x11e>
 800a4f8:	f8cc 8004 	str.w	r8, [ip, #4]
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	3204      	adds	r2, #4
 800a500:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a504:	f1ba 0f00 	cmp.w	sl, #0
 800a508:	d020      	beq.n	800a54c <__multiply+0x11a>
 800a50a:	4689      	mov	r9, r1
 800a50c:	46a8      	mov	r8, r5
 800a50e:	f04f 0b00 	mov.w	fp, #0
 800a512:	682b      	ldr	r3, [r5, #0]
 800a514:	f8b9 c000 	ldrh.w	ip, [r9]
 800a518:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	fb0a 440c 	mla	r4, sl, ip, r4
 800a522:	46c4      	mov	ip, r8
 800a524:	445c      	add	r4, fp
 800a526:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a52a:	f84c 3b04 	str.w	r3, [ip], #4
 800a52e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a532:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	fb0a b303 	mla	r3, sl, r3, fp
 800a53c:	454f      	cmp	r7, r9
 800a53e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a542:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a546:	d805      	bhi.n	800a554 <__multiply+0x122>
 800a548:	f8c8 3004 	str.w	r3, [r8, #4]
 800a54c:	3504      	adds	r5, #4
 800a54e:	e79b      	b.n	800a488 <__multiply+0x56>
 800a550:	46d4      	mov	ip, sl
 800a552:	e7b3      	b.n	800a4bc <__multiply+0x8a>
 800a554:	46e0      	mov	r8, ip
 800a556:	e7dd      	b.n	800a514 <__multiply+0xe2>
 800a558:	3e01      	subs	r6, #1
 800a55a:	e799      	b.n	800a490 <__multiply+0x5e>

0800a55c <__pow5mult>:
 800a55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a560:	4615      	mov	r5, r2
 800a562:	f012 0203 	ands.w	r2, r2, #3
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	d007      	beq.n	800a57c <__pow5mult+0x20>
 800a56c:	4c21      	ldr	r4, [pc, #132]	; (800a5f4 <__pow5mult+0x98>)
 800a56e:	3a01      	subs	r2, #1
 800a570:	2300      	movs	r3, #0
 800a572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a576:	f7ff feca 	bl	800a30e <__multadd>
 800a57a:	4607      	mov	r7, r0
 800a57c:	10ad      	asrs	r5, r5, #2
 800a57e:	d035      	beq.n	800a5ec <__pow5mult+0x90>
 800a580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a582:	b93c      	cbnz	r4, 800a594 <__pow5mult+0x38>
 800a584:	2010      	movs	r0, #16
 800a586:	f7ff fe61 	bl	800a24c <malloc>
 800a58a:	6270      	str	r0, [r6, #36]	; 0x24
 800a58c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a590:	6004      	str	r4, [r0, #0]
 800a592:	60c4      	str	r4, [r0, #12]
 800a594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a59c:	b94c      	cbnz	r4, 800a5b2 <__pow5mult+0x56>
 800a59e:	f240 2171 	movw	r1, #625	; 0x271
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ff3c 	bl	800a420 <__i2b>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 0800 	mov.w	r8, #0
 800a5b6:	07eb      	lsls	r3, r5, #31
 800a5b8:	d50a      	bpl.n	800a5d0 <__pow5mult+0x74>
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff ff37 	bl	800a432 <__multiply>
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	4639      	mov	r1, r7
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff fe89 	bl	800a2e0 <_Bfree>
 800a5ce:	464f      	mov	r7, r9
 800a5d0:	106d      	asrs	r5, r5, #1
 800a5d2:	d00b      	beq.n	800a5ec <__pow5mult+0x90>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	b938      	cbnz	r0, 800a5e8 <__pow5mult+0x8c>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ff28 	bl	800a432 <__multiply>
 800a5e2:	6020      	str	r0, [r4, #0]
 800a5e4:	f8c0 8000 	str.w	r8, [r0]
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	e7e4      	b.n	800a5b6 <__pow5mult+0x5a>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800af08 	.word	0x0800af08

0800a5f8 <__lshift>:
 800a5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	4607      	mov	r7, r0
 800a600:	4616      	mov	r6, r2
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a608:	eb0a 0903 	add.w	r9, sl, r3
 800a60c:	6849      	ldr	r1, [r1, #4]
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	f109 0501 	add.w	r5, r9, #1
 800a614:	42ab      	cmp	r3, r5
 800a616:	db32      	blt.n	800a67e <__lshift+0x86>
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff fe2d 	bl	800a278 <_Balloc>
 800a61e:	2300      	movs	r3, #0
 800a620:	4680      	mov	r8, r0
 800a622:	461a      	mov	r2, r3
 800a624:	f100 0114 	add.w	r1, r0, #20
 800a628:	4553      	cmp	r3, sl
 800a62a:	db2b      	blt.n	800a684 <__lshift+0x8c>
 800a62c:	6920      	ldr	r0, [r4, #16]
 800a62e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a632:	f104 0314 	add.w	r3, r4, #20
 800a636:	f016 021f 	ands.w	r2, r6, #31
 800a63a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a63e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a642:	d025      	beq.n	800a690 <__lshift+0x98>
 800a644:	2000      	movs	r0, #0
 800a646:	f1c2 0e20 	rsb	lr, r2, #32
 800a64a:	468a      	mov	sl, r1
 800a64c:	681e      	ldr	r6, [r3, #0]
 800a64e:	4096      	lsls	r6, r2
 800a650:	4330      	orrs	r0, r6
 800a652:	f84a 0b04 	str.w	r0, [sl], #4
 800a656:	f853 0b04 	ldr.w	r0, [r3], #4
 800a65a:	459c      	cmp	ip, r3
 800a65c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a660:	d814      	bhi.n	800a68c <__lshift+0x94>
 800a662:	6048      	str	r0, [r1, #4]
 800a664:	b108      	cbz	r0, 800a66a <__lshift+0x72>
 800a666:	f109 0502 	add.w	r5, r9, #2
 800a66a:	3d01      	subs	r5, #1
 800a66c:	4638      	mov	r0, r7
 800a66e:	f8c8 5010 	str.w	r5, [r8, #16]
 800a672:	4621      	mov	r1, r4
 800a674:	f7ff fe34 	bl	800a2e0 <_Bfree>
 800a678:	4640      	mov	r0, r8
 800a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67e:	3101      	adds	r1, #1
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	e7c7      	b.n	800a614 <__lshift+0x1c>
 800a684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a688:	3301      	adds	r3, #1
 800a68a:	e7cd      	b.n	800a628 <__lshift+0x30>
 800a68c:	4651      	mov	r1, sl
 800a68e:	e7dc      	b.n	800a64a <__lshift+0x52>
 800a690:	3904      	subs	r1, #4
 800a692:	f853 2b04 	ldr.w	r2, [r3], #4
 800a696:	459c      	cmp	ip, r3
 800a698:	f841 2f04 	str.w	r2, [r1, #4]!
 800a69c:	d8f9      	bhi.n	800a692 <__lshift+0x9a>
 800a69e:	e7e4      	b.n	800a66a <__lshift+0x72>

0800a6a0 <__mcmp>:
 800a6a0:	6903      	ldr	r3, [r0, #16]
 800a6a2:	690a      	ldr	r2, [r1, #16]
 800a6a4:	b530      	push	{r4, r5, lr}
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	d10c      	bne.n	800a6c4 <__mcmp+0x24>
 800a6aa:	0092      	lsls	r2, r2, #2
 800a6ac:	3014      	adds	r0, #20
 800a6ae:	3114      	adds	r1, #20
 800a6b0:	1884      	adds	r4, r0, r2
 800a6b2:	4411      	add	r1, r2
 800a6b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6bc:	4295      	cmp	r5, r2
 800a6be:	d003      	beq.n	800a6c8 <__mcmp+0x28>
 800a6c0:	d305      	bcc.n	800a6ce <__mcmp+0x2e>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	bd30      	pop	{r4, r5, pc}
 800a6c8:	42a0      	cmp	r0, r4
 800a6ca:	d3f3      	bcc.n	800a6b4 <__mcmp+0x14>
 800a6cc:	e7fa      	b.n	800a6c4 <__mcmp+0x24>
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	e7f7      	b.n	800a6c4 <__mcmp+0x24>

0800a6d4 <__mdiff>:
 800a6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d8:	460d      	mov	r5, r1
 800a6da:	4607      	mov	r7, r0
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4628      	mov	r0, r5
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	f7ff ffdd 	bl	800a6a0 <__mcmp>
 800a6e6:	1e06      	subs	r6, r0, #0
 800a6e8:	d108      	bne.n	800a6fc <__mdiff+0x28>
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	f7ff fdc3 	bl	800a278 <_Balloc>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fc:	bfa4      	itt	ge
 800a6fe:	4623      	movge	r3, r4
 800a700:	462c      	movge	r4, r5
 800a702:	4638      	mov	r0, r7
 800a704:	6861      	ldr	r1, [r4, #4]
 800a706:	bfa6      	itte	ge
 800a708:	461d      	movge	r5, r3
 800a70a:	2600      	movge	r6, #0
 800a70c:	2601      	movlt	r6, #1
 800a70e:	f7ff fdb3 	bl	800a278 <_Balloc>
 800a712:	f04f 0e00 	mov.w	lr, #0
 800a716:	60c6      	str	r6, [r0, #12]
 800a718:	692b      	ldr	r3, [r5, #16]
 800a71a:	6926      	ldr	r6, [r4, #16]
 800a71c:	f104 0214 	add.w	r2, r4, #20
 800a720:	f105 0914 	add.w	r9, r5, #20
 800a724:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a728:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a72c:	f100 0114 	add.w	r1, r0, #20
 800a730:	f852 ab04 	ldr.w	sl, [r2], #4
 800a734:	f859 5b04 	ldr.w	r5, [r9], #4
 800a738:	fa1f f38a 	uxth.w	r3, sl
 800a73c:	4473      	add	r3, lr
 800a73e:	b2ac      	uxth	r4, r5
 800a740:	1b1b      	subs	r3, r3, r4
 800a742:	0c2c      	lsrs	r4, r5, #16
 800a744:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a748:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a752:	45c8      	cmp	r8, r9
 800a754:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a758:	4694      	mov	ip, r2
 800a75a:	f841 4b04 	str.w	r4, [r1], #4
 800a75e:	d8e7      	bhi.n	800a730 <__mdiff+0x5c>
 800a760:	45bc      	cmp	ip, r7
 800a762:	d304      	bcc.n	800a76e <__mdiff+0x9a>
 800a764:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a768:	b183      	cbz	r3, 800a78c <__mdiff+0xb8>
 800a76a:	6106      	str	r6, [r0, #16]
 800a76c:	e7c4      	b.n	800a6f8 <__mdiff+0x24>
 800a76e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a772:	b2a2      	uxth	r2, r4
 800a774:	4472      	add	r2, lr
 800a776:	1413      	asrs	r3, r2, #16
 800a778:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a77c:	b292      	uxth	r2, r2
 800a77e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a782:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a786:	f841 2b04 	str.w	r2, [r1], #4
 800a78a:	e7e9      	b.n	800a760 <__mdiff+0x8c>
 800a78c:	3e01      	subs	r6, #1
 800a78e:	e7e9      	b.n	800a764 <__mdiff+0x90>

0800a790 <__d2b>:
 800a790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a794:	461c      	mov	r4, r3
 800a796:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a79a:	2101      	movs	r1, #1
 800a79c:	4690      	mov	r8, r2
 800a79e:	f7ff fd6b 	bl	800a278 <_Balloc>
 800a7a2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a7a6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	bb34      	cbnz	r4, 800a7fc <__d2b+0x6c>
 800a7ae:	9201      	str	r2, [sp, #4]
 800a7b0:	f1b8 0200 	subs.w	r2, r8, #0
 800a7b4:	d027      	beq.n	800a806 <__d2b+0x76>
 800a7b6:	a802      	add	r0, sp, #8
 800a7b8:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a7bc:	f7ff fe01 	bl	800a3c2 <__lo0bits>
 800a7c0:	9900      	ldr	r1, [sp, #0]
 800a7c2:	b1f0      	cbz	r0, 800a802 <__d2b+0x72>
 800a7c4:	9a01      	ldr	r2, [sp, #4]
 800a7c6:	f1c0 0320 	rsb	r3, r0, #32
 800a7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	40c2      	lsrs	r2, r0
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bf14      	ite	ne
 800a7dc:	2102      	movne	r1, #2
 800a7de:	2101      	moveq	r1, #1
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	6139      	str	r1, [r7, #16]
 800a7e4:	b1c4      	cbz	r4, 800a818 <__d2b+0x88>
 800a7e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7ea:	4404      	add	r4, r0
 800a7ec:	6034      	str	r4, [r6, #0]
 800a7ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7f2:	6028      	str	r0, [r5, #0]
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	b002      	add	sp, #8
 800a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a800:	e7d5      	b.n	800a7ae <__d2b+0x1e>
 800a802:	6179      	str	r1, [r7, #20]
 800a804:	e7e7      	b.n	800a7d6 <__d2b+0x46>
 800a806:	a801      	add	r0, sp, #4
 800a808:	f7ff fddb 	bl	800a3c2 <__lo0bits>
 800a80c:	2101      	movs	r1, #1
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	6139      	str	r1, [r7, #16]
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	3020      	adds	r0, #32
 800a816:	e7e5      	b.n	800a7e4 <__d2b+0x54>
 800a818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a81c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a820:	6030      	str	r0, [r6, #0]
 800a822:	6918      	ldr	r0, [r3, #16]
 800a824:	f7ff fdae 	bl	800a384 <__hi0bits>
 800a828:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a82c:	e7e1      	b.n	800a7f2 <__d2b+0x62>

0800a82e <_calloc_r>:
 800a82e:	b538      	push	{r3, r4, r5, lr}
 800a830:	fb02 f401 	mul.w	r4, r2, r1
 800a834:	4621      	mov	r1, r4
 800a836:	f000 f855 	bl	800a8e4 <_malloc_r>
 800a83a:	4605      	mov	r5, r0
 800a83c:	b118      	cbz	r0, 800a846 <_calloc_r+0x18>
 800a83e:	4622      	mov	r2, r4
 800a840:	2100      	movs	r1, #0
 800a842:	f7fe fa3c 	bl	8008cbe <memset>
 800a846:	4628      	mov	r0, r5
 800a848:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a84c <_free_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4605      	mov	r5, r0
 800a850:	2900      	cmp	r1, #0
 800a852:	d043      	beq.n	800a8dc <_free_r+0x90>
 800a854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a858:	1f0c      	subs	r4, r1, #4
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfb8      	it	lt
 800a85e:	18e4      	addlt	r4, r4, r3
 800a860:	f000 fa27 	bl	800acb2 <__malloc_lock>
 800a864:	4a1e      	ldr	r2, [pc, #120]	; (800a8e0 <_free_r+0x94>)
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	4610      	mov	r0, r2
 800a86a:	b933      	cbnz	r3, 800a87a <_free_r+0x2e>
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	6014      	str	r4, [r2, #0]
 800a870:	4628      	mov	r0, r5
 800a872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a876:	f000 ba1d 	b.w	800acb4 <__malloc_unlock>
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	d90b      	bls.n	800a896 <_free_r+0x4a>
 800a87e:	6821      	ldr	r1, [r4, #0]
 800a880:	1862      	adds	r2, r4, r1
 800a882:	4293      	cmp	r3, r2
 800a884:	bf01      	itttt	eq
 800a886:	681a      	ldreq	r2, [r3, #0]
 800a888:	685b      	ldreq	r3, [r3, #4]
 800a88a:	1852      	addeq	r2, r2, r1
 800a88c:	6022      	streq	r2, [r4, #0]
 800a88e:	6063      	str	r3, [r4, #4]
 800a890:	6004      	str	r4, [r0, #0]
 800a892:	e7ed      	b.n	800a870 <_free_r+0x24>
 800a894:	4613      	mov	r3, r2
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	b10a      	cbz	r2, 800a89e <_free_r+0x52>
 800a89a:	42a2      	cmp	r2, r4
 800a89c:	d9fa      	bls.n	800a894 <_free_r+0x48>
 800a89e:	6819      	ldr	r1, [r3, #0]
 800a8a0:	1858      	adds	r0, r3, r1
 800a8a2:	42a0      	cmp	r0, r4
 800a8a4:	d10b      	bne.n	800a8be <_free_r+0x72>
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	4401      	add	r1, r0
 800a8aa:	1858      	adds	r0, r3, r1
 800a8ac:	4282      	cmp	r2, r0
 800a8ae:	6019      	str	r1, [r3, #0]
 800a8b0:	d1de      	bne.n	800a870 <_free_r+0x24>
 800a8b2:	6810      	ldr	r0, [r2, #0]
 800a8b4:	6852      	ldr	r2, [r2, #4]
 800a8b6:	4401      	add	r1, r0
 800a8b8:	6019      	str	r1, [r3, #0]
 800a8ba:	605a      	str	r2, [r3, #4]
 800a8bc:	e7d8      	b.n	800a870 <_free_r+0x24>
 800a8be:	d902      	bls.n	800a8c6 <_free_r+0x7a>
 800a8c0:	230c      	movs	r3, #12
 800a8c2:	602b      	str	r3, [r5, #0]
 800a8c4:	e7d4      	b.n	800a870 <_free_r+0x24>
 800a8c6:	6820      	ldr	r0, [r4, #0]
 800a8c8:	1821      	adds	r1, r4, r0
 800a8ca:	428a      	cmp	r2, r1
 800a8cc:	bf01      	itttt	eq
 800a8ce:	6811      	ldreq	r1, [r2, #0]
 800a8d0:	6852      	ldreq	r2, [r2, #4]
 800a8d2:	1809      	addeq	r1, r1, r0
 800a8d4:	6021      	streq	r1, [r4, #0]
 800a8d6:	6062      	str	r2, [r4, #4]
 800a8d8:	605c      	str	r4, [r3, #4]
 800a8da:	e7c9      	b.n	800a870 <_free_r+0x24>
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
 800a8de:	bf00      	nop
 800a8e0:	20000590 	.word	0x20000590

0800a8e4 <_malloc_r>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	1ccd      	adds	r5, r1, #3
 800a8e8:	f025 0503 	bic.w	r5, r5, #3
 800a8ec:	3508      	adds	r5, #8
 800a8ee:	2d0c      	cmp	r5, #12
 800a8f0:	bf38      	it	cc
 800a8f2:	250c      	movcc	r5, #12
 800a8f4:	2d00      	cmp	r5, #0
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	db01      	blt.n	800a8fe <_malloc_r+0x1a>
 800a8fa:	42a9      	cmp	r1, r5
 800a8fc:	d903      	bls.n	800a906 <_malloc_r+0x22>
 800a8fe:	230c      	movs	r3, #12
 800a900:	6033      	str	r3, [r6, #0]
 800a902:	2000      	movs	r0, #0
 800a904:	bd70      	pop	{r4, r5, r6, pc}
 800a906:	f000 f9d4 	bl	800acb2 <__malloc_lock>
 800a90a:	4a21      	ldr	r2, [pc, #132]	; (800a990 <_malloc_r+0xac>)
 800a90c:	6814      	ldr	r4, [r2, #0]
 800a90e:	4621      	mov	r1, r4
 800a910:	b991      	cbnz	r1, 800a938 <_malloc_r+0x54>
 800a912:	4c20      	ldr	r4, [pc, #128]	; (800a994 <_malloc_r+0xb0>)
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	b91b      	cbnz	r3, 800a920 <_malloc_r+0x3c>
 800a918:	4630      	mov	r0, r6
 800a91a:	f000 f98f 	bl	800ac3c <_sbrk_r>
 800a91e:	6020      	str	r0, [r4, #0]
 800a920:	4629      	mov	r1, r5
 800a922:	4630      	mov	r0, r6
 800a924:	f000 f98a 	bl	800ac3c <_sbrk_r>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d124      	bne.n	800a976 <_malloc_r+0x92>
 800a92c:	230c      	movs	r3, #12
 800a92e:	4630      	mov	r0, r6
 800a930:	6033      	str	r3, [r6, #0]
 800a932:	f000 f9bf 	bl	800acb4 <__malloc_unlock>
 800a936:	e7e4      	b.n	800a902 <_malloc_r+0x1e>
 800a938:	680b      	ldr	r3, [r1, #0]
 800a93a:	1b5b      	subs	r3, r3, r5
 800a93c:	d418      	bmi.n	800a970 <_malloc_r+0x8c>
 800a93e:	2b0b      	cmp	r3, #11
 800a940:	d90f      	bls.n	800a962 <_malloc_r+0x7e>
 800a942:	600b      	str	r3, [r1, #0]
 800a944:	18cc      	adds	r4, r1, r3
 800a946:	50cd      	str	r5, [r1, r3]
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 f9b3 	bl	800acb4 <__malloc_unlock>
 800a94e:	f104 000b 	add.w	r0, r4, #11
 800a952:	1d23      	adds	r3, r4, #4
 800a954:	f020 0007 	bic.w	r0, r0, #7
 800a958:	1ac3      	subs	r3, r0, r3
 800a95a:	d0d3      	beq.n	800a904 <_malloc_r+0x20>
 800a95c:	425a      	negs	r2, r3
 800a95e:	50e2      	str	r2, [r4, r3]
 800a960:	e7d0      	b.n	800a904 <_malloc_r+0x20>
 800a962:	684b      	ldr	r3, [r1, #4]
 800a964:	428c      	cmp	r4, r1
 800a966:	bf16      	itet	ne
 800a968:	6063      	strne	r3, [r4, #4]
 800a96a:	6013      	streq	r3, [r2, #0]
 800a96c:	460c      	movne	r4, r1
 800a96e:	e7eb      	b.n	800a948 <_malloc_r+0x64>
 800a970:	460c      	mov	r4, r1
 800a972:	6849      	ldr	r1, [r1, #4]
 800a974:	e7cc      	b.n	800a910 <_malloc_r+0x2c>
 800a976:	1cc4      	adds	r4, r0, #3
 800a978:	f024 0403 	bic.w	r4, r4, #3
 800a97c:	42a0      	cmp	r0, r4
 800a97e:	d005      	beq.n	800a98c <_malloc_r+0xa8>
 800a980:	1a21      	subs	r1, r4, r0
 800a982:	4630      	mov	r0, r6
 800a984:	f000 f95a 	bl	800ac3c <_sbrk_r>
 800a988:	3001      	adds	r0, #1
 800a98a:	d0cf      	beq.n	800a92c <_malloc_r+0x48>
 800a98c:	6025      	str	r5, [r4, #0]
 800a98e:	e7db      	b.n	800a948 <_malloc_r+0x64>
 800a990:	20000590 	.word	0x20000590
 800a994:	20000594 	.word	0x20000594

0800a998 <__ssputs_r>:
 800a998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a99c:	688e      	ldr	r6, [r1, #8]
 800a99e:	4682      	mov	sl, r0
 800a9a0:	429e      	cmp	r6, r3
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	4690      	mov	r8, r2
 800a9a6:	4699      	mov	r9, r3
 800a9a8:	d837      	bhi.n	800aa1a <__ssputs_r+0x82>
 800a9aa:	898a      	ldrh	r2, [r1, #12]
 800a9ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9b0:	d031      	beq.n	800aa16 <__ssputs_r+0x7e>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	6825      	ldr	r5, [r4, #0]
 800a9b6:	6909      	ldr	r1, [r1, #16]
 800a9b8:	1a6f      	subs	r7, r5, r1
 800a9ba:	6965      	ldr	r5, [r4, #20]
 800a9bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9c0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a9c4:	f109 0301 	add.w	r3, r9, #1
 800a9c8:	443b      	add	r3, r7
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	bf38      	it	cc
 800a9ce:	461d      	movcc	r5, r3
 800a9d0:	0553      	lsls	r3, r2, #21
 800a9d2:	d530      	bpl.n	800aa36 <__ssputs_r+0x9e>
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	f7ff ff85 	bl	800a8e4 <_malloc_r>
 800a9da:	4606      	mov	r6, r0
 800a9dc:	b950      	cbnz	r0, 800a9f4 <__ssputs_r+0x5c>
 800a9de:	230c      	movs	r3, #12
 800a9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e4:	f8ca 3000 	str.w	r3, [sl]
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f4:	463a      	mov	r2, r7
 800a9f6:	6921      	ldr	r1, [r4, #16]
 800a9f8:	f7fe f956 	bl	8008ca8 <memcpy>
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa06:	81a3      	strh	r3, [r4, #12]
 800aa08:	6126      	str	r6, [r4, #16]
 800aa0a:	443e      	add	r6, r7
 800aa0c:	6026      	str	r6, [r4, #0]
 800aa0e:	464e      	mov	r6, r9
 800aa10:	6165      	str	r5, [r4, #20]
 800aa12:	1bed      	subs	r5, r5, r7
 800aa14:	60a5      	str	r5, [r4, #8]
 800aa16:	454e      	cmp	r6, r9
 800aa18:	d900      	bls.n	800aa1c <__ssputs_r+0x84>
 800aa1a:	464e      	mov	r6, r9
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	4641      	mov	r1, r8
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	f000 f92d 	bl	800ac80 <memmove>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	2000      	movs	r0, #0
 800aa2a:	1b9b      	subs	r3, r3, r6
 800aa2c:	60a3      	str	r3, [r4, #8]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	441e      	add	r6, r3
 800aa32:	6026      	str	r6, [r4, #0]
 800aa34:	e7dc      	b.n	800a9f0 <__ssputs_r+0x58>
 800aa36:	462a      	mov	r2, r5
 800aa38:	f000 f93d 	bl	800acb6 <_realloc_r>
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d1e2      	bne.n	800aa08 <__ssputs_r+0x70>
 800aa42:	6921      	ldr	r1, [r4, #16]
 800aa44:	4650      	mov	r0, sl
 800aa46:	f7ff ff01 	bl	800a84c <_free_r>
 800aa4a:	e7c8      	b.n	800a9de <__ssputs_r+0x46>

0800aa4c <_svfiprintf_r>:
 800aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	461d      	mov	r5, r3
 800aa52:	898b      	ldrh	r3, [r1, #12]
 800aa54:	b09d      	sub	sp, #116	; 0x74
 800aa56:	061f      	lsls	r7, r3, #24
 800aa58:	4680      	mov	r8, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	d50f      	bpl.n	800aa80 <_svfiprintf_r+0x34>
 800aa60:	690b      	ldr	r3, [r1, #16]
 800aa62:	b96b      	cbnz	r3, 800aa80 <_svfiprintf_r+0x34>
 800aa64:	2140      	movs	r1, #64	; 0x40
 800aa66:	f7ff ff3d 	bl	800a8e4 <_malloc_r>
 800aa6a:	6020      	str	r0, [r4, #0]
 800aa6c:	6120      	str	r0, [r4, #16]
 800aa6e:	b928      	cbnz	r0, 800aa7c <_svfiprintf_r+0x30>
 800aa70:	230c      	movs	r3, #12
 800aa72:	f8c8 3000 	str.w	r3, [r8]
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	e0c8      	b.n	800ac0e <_svfiprintf_r+0x1c2>
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	6163      	str	r3, [r4, #20]
 800aa80:	2300      	movs	r3, #0
 800aa82:	9309      	str	r3, [sp, #36]	; 0x24
 800aa84:	2320      	movs	r3, #32
 800aa86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa8a:	2330      	movs	r3, #48	; 0x30
 800aa8c:	f04f 0b01 	mov.w	fp, #1
 800aa90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa94:	9503      	str	r5, [sp, #12]
 800aa96:	4637      	mov	r7, r6
 800aa98:	463d      	mov	r5, r7
 800aa9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa9e:	b10b      	cbz	r3, 800aaa4 <_svfiprintf_r+0x58>
 800aaa0:	2b25      	cmp	r3, #37	; 0x25
 800aaa2:	d13e      	bne.n	800ab22 <_svfiprintf_r+0xd6>
 800aaa4:	ebb7 0a06 	subs.w	sl, r7, r6
 800aaa8:	d00b      	beq.n	800aac2 <_svfiprintf_r+0x76>
 800aaaa:	4653      	mov	r3, sl
 800aaac:	4632      	mov	r2, r6
 800aaae:	4621      	mov	r1, r4
 800aab0:	4640      	mov	r0, r8
 800aab2:	f7ff ff71 	bl	800a998 <__ssputs_r>
 800aab6:	3001      	adds	r0, #1
 800aab8:	f000 80a4 	beq.w	800ac04 <_svfiprintf_r+0x1b8>
 800aabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabe:	4453      	add	r3, sl
 800aac0:	9309      	str	r3, [sp, #36]	; 0x24
 800aac2:	783b      	ldrb	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 809d 	beq.w	800ac04 <_svfiprintf_r+0x1b8>
 800aaca:	2300      	movs	r3, #0
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295
 800aad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	9307      	str	r3, [sp, #28]
 800aad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aadc:	931a      	str	r3, [sp, #104]	; 0x68
 800aade:	462f      	mov	r7, r5
 800aae0:	2205      	movs	r2, #5
 800aae2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aae6:	4850      	ldr	r0, [pc, #320]	; (800ac28 <_svfiprintf_r+0x1dc>)
 800aae8:	f7ff fbb8 	bl	800a25c <memchr>
 800aaec:	9b04      	ldr	r3, [sp, #16]
 800aaee:	b9d0      	cbnz	r0, 800ab26 <_svfiprintf_r+0xda>
 800aaf0:	06d9      	lsls	r1, r3, #27
 800aaf2:	bf44      	itt	mi
 800aaf4:	2220      	movmi	r2, #32
 800aaf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aafa:	071a      	lsls	r2, r3, #28
 800aafc:	bf44      	itt	mi
 800aafe:	222b      	movmi	r2, #43	; 0x2b
 800ab00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab04:	782a      	ldrb	r2, [r5, #0]
 800ab06:	2a2a      	cmp	r2, #42	; 0x2a
 800ab08:	d015      	beq.n	800ab36 <_svfiprintf_r+0xea>
 800ab0a:	462f      	mov	r7, r5
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	250a      	movs	r5, #10
 800ab10:	9a07      	ldr	r2, [sp, #28]
 800ab12:	4639      	mov	r1, r7
 800ab14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab18:	3b30      	subs	r3, #48	; 0x30
 800ab1a:	2b09      	cmp	r3, #9
 800ab1c:	d94d      	bls.n	800abba <_svfiprintf_r+0x16e>
 800ab1e:	b1b8      	cbz	r0, 800ab50 <_svfiprintf_r+0x104>
 800ab20:	e00f      	b.n	800ab42 <_svfiprintf_r+0xf6>
 800ab22:	462f      	mov	r7, r5
 800ab24:	e7b8      	b.n	800aa98 <_svfiprintf_r+0x4c>
 800ab26:	4a40      	ldr	r2, [pc, #256]	; (800ac28 <_svfiprintf_r+0x1dc>)
 800ab28:	463d      	mov	r5, r7
 800ab2a:	1a80      	subs	r0, r0, r2
 800ab2c:	fa0b f000 	lsl.w	r0, fp, r0
 800ab30:	4318      	orrs	r0, r3
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	e7d3      	b.n	800aade <_svfiprintf_r+0x92>
 800ab36:	9a03      	ldr	r2, [sp, #12]
 800ab38:	1d11      	adds	r1, r2, #4
 800ab3a:	6812      	ldr	r2, [r2, #0]
 800ab3c:	9103      	str	r1, [sp, #12]
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	db01      	blt.n	800ab46 <_svfiprintf_r+0xfa>
 800ab42:	9207      	str	r2, [sp, #28]
 800ab44:	e004      	b.n	800ab50 <_svfiprintf_r+0x104>
 800ab46:	4252      	negs	r2, r2
 800ab48:	f043 0302 	orr.w	r3, r3, #2
 800ab4c:	9207      	str	r2, [sp, #28]
 800ab4e:	9304      	str	r3, [sp, #16]
 800ab50:	783b      	ldrb	r3, [r7, #0]
 800ab52:	2b2e      	cmp	r3, #46	; 0x2e
 800ab54:	d10c      	bne.n	800ab70 <_svfiprintf_r+0x124>
 800ab56:	787b      	ldrb	r3, [r7, #1]
 800ab58:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5a:	d133      	bne.n	800abc4 <_svfiprintf_r+0x178>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3702      	adds	r7, #2
 800ab60:	1d1a      	adds	r2, r3, #4
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	9203      	str	r2, [sp, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bfb8      	it	lt
 800ab6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab6e:	9305      	str	r3, [sp, #20]
 800ab70:	4d2e      	ldr	r5, [pc, #184]	; (800ac2c <_svfiprintf_r+0x1e0>)
 800ab72:	2203      	movs	r2, #3
 800ab74:	7839      	ldrb	r1, [r7, #0]
 800ab76:	4628      	mov	r0, r5
 800ab78:	f7ff fb70 	bl	800a25c <memchr>
 800ab7c:	b138      	cbz	r0, 800ab8e <_svfiprintf_r+0x142>
 800ab7e:	2340      	movs	r3, #64	; 0x40
 800ab80:	1b40      	subs	r0, r0, r5
 800ab82:	fa03 f000 	lsl.w	r0, r3, r0
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	3701      	adds	r7, #1
 800ab8a:	4303      	orrs	r3, r0
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	7839      	ldrb	r1, [r7, #0]
 800ab90:	2206      	movs	r2, #6
 800ab92:	4827      	ldr	r0, [pc, #156]	; (800ac30 <_svfiprintf_r+0x1e4>)
 800ab94:	1c7e      	adds	r6, r7, #1
 800ab96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab9a:	f7ff fb5f 	bl	800a25c <memchr>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d038      	beq.n	800ac14 <_svfiprintf_r+0x1c8>
 800aba2:	4b24      	ldr	r3, [pc, #144]	; (800ac34 <_svfiprintf_r+0x1e8>)
 800aba4:	bb13      	cbnz	r3, 800abec <_svfiprintf_r+0x1a0>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	3307      	adds	r3, #7
 800abaa:	f023 0307 	bic.w	r3, r3, #7
 800abae:	3308      	adds	r3, #8
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb4:	444b      	add	r3, r9
 800abb6:	9309      	str	r3, [sp, #36]	; 0x24
 800abb8:	e76d      	b.n	800aa96 <_svfiprintf_r+0x4a>
 800abba:	fb05 3202 	mla	r2, r5, r2, r3
 800abbe:	2001      	movs	r0, #1
 800abc0:	460f      	mov	r7, r1
 800abc2:	e7a6      	b.n	800ab12 <_svfiprintf_r+0xc6>
 800abc4:	2300      	movs	r3, #0
 800abc6:	250a      	movs	r5, #10
 800abc8:	4619      	mov	r1, r3
 800abca:	3701      	adds	r7, #1
 800abcc:	9305      	str	r3, [sp, #20]
 800abce:	4638      	mov	r0, r7
 800abd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abd4:	3a30      	subs	r2, #48	; 0x30
 800abd6:	2a09      	cmp	r2, #9
 800abd8:	d903      	bls.n	800abe2 <_svfiprintf_r+0x196>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0c8      	beq.n	800ab70 <_svfiprintf_r+0x124>
 800abde:	9105      	str	r1, [sp, #20]
 800abe0:	e7c6      	b.n	800ab70 <_svfiprintf_r+0x124>
 800abe2:	fb05 2101 	mla	r1, r5, r1, r2
 800abe6:	2301      	movs	r3, #1
 800abe8:	4607      	mov	r7, r0
 800abea:	e7f0      	b.n	800abce <_svfiprintf_r+0x182>
 800abec:	ab03      	add	r3, sp, #12
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	4622      	mov	r2, r4
 800abf2:	4b11      	ldr	r3, [pc, #68]	; (800ac38 <_svfiprintf_r+0x1ec>)
 800abf4:	a904      	add	r1, sp, #16
 800abf6:	4640      	mov	r0, r8
 800abf8:	f7fe f8fa 	bl	8008df0 <_printf_float>
 800abfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac00:	4681      	mov	r9, r0
 800ac02:	d1d6      	bne.n	800abb2 <_svfiprintf_r+0x166>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	065b      	lsls	r3, r3, #25
 800ac08:	f53f af35 	bmi.w	800aa76 <_svfiprintf_r+0x2a>
 800ac0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac0e:	b01d      	add	sp, #116	; 0x74
 800ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac14:	ab03      	add	r3, sp, #12
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <_svfiprintf_r+0x1ec>)
 800ac1c:	a904      	add	r1, sp, #16
 800ac1e:	4640      	mov	r0, r8
 800ac20:	f7fe fb92 	bl	8009348 <_printf_i>
 800ac24:	e7ea      	b.n	800abfc <_svfiprintf_r+0x1b0>
 800ac26:	bf00      	nop
 800ac28:	0800af14 	.word	0x0800af14
 800ac2c:	0800af1a 	.word	0x0800af1a
 800ac30:	0800af1e 	.word	0x0800af1e
 800ac34:	08008df1 	.word	0x08008df1
 800ac38:	0800a999 	.word	0x0800a999

0800ac3c <_sbrk_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4c05      	ldr	r4, [pc, #20]	; (800ac58 <_sbrk_r+0x1c>)
 800ac42:	4605      	mov	r5, r0
 800ac44:	4608      	mov	r0, r1
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	f7f6 fbf0 	bl	800142c <_sbrk>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d102      	bne.n	800ac56 <_sbrk_r+0x1a>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	b103      	cbz	r3, 800ac56 <_sbrk_r+0x1a>
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	20001670 	.word	0x20001670

0800ac5c <__ascii_mbtowc>:
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	b901      	cbnz	r1, 800ac62 <__ascii_mbtowc+0x6>
 800ac60:	a901      	add	r1, sp, #4
 800ac62:	b142      	cbz	r2, 800ac76 <__ascii_mbtowc+0x1a>
 800ac64:	b14b      	cbz	r3, 800ac7a <__ascii_mbtowc+0x1e>
 800ac66:	7813      	ldrb	r3, [r2, #0]
 800ac68:	600b      	str	r3, [r1, #0]
 800ac6a:	7812      	ldrb	r2, [r2, #0]
 800ac6c:	1c10      	adds	r0, r2, #0
 800ac6e:	bf18      	it	ne
 800ac70:	2001      	movne	r0, #1
 800ac72:	b002      	add	sp, #8
 800ac74:	4770      	bx	lr
 800ac76:	4610      	mov	r0, r2
 800ac78:	e7fb      	b.n	800ac72 <__ascii_mbtowc+0x16>
 800ac7a:	f06f 0001 	mvn.w	r0, #1
 800ac7e:	e7f8      	b.n	800ac72 <__ascii_mbtowc+0x16>

0800ac80 <memmove>:
 800ac80:	4288      	cmp	r0, r1
 800ac82:	b510      	push	{r4, lr}
 800ac84:	eb01 0302 	add.w	r3, r1, r2
 800ac88:	d807      	bhi.n	800ac9a <memmove+0x1a>
 800ac8a:	1e42      	subs	r2, r0, #1
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d00a      	beq.n	800aca6 <memmove+0x26>
 800ac90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac94:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac98:	e7f8      	b.n	800ac8c <memmove+0xc>
 800ac9a:	4283      	cmp	r3, r0
 800ac9c:	d9f5      	bls.n	800ac8a <memmove+0xa>
 800ac9e:	1881      	adds	r1, r0, r2
 800aca0:	1ad2      	subs	r2, r2, r3
 800aca2:	42d3      	cmn	r3, r2
 800aca4:	d100      	bne.n	800aca8 <memmove+0x28>
 800aca6:	bd10      	pop	{r4, pc}
 800aca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800acb0:	e7f7      	b.n	800aca2 <memmove+0x22>

0800acb2 <__malloc_lock>:
 800acb2:	4770      	bx	lr

0800acb4 <__malloc_unlock>:
 800acb4:	4770      	bx	lr

0800acb6 <_realloc_r>:
 800acb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb8:	4607      	mov	r7, r0
 800acba:	4614      	mov	r4, r2
 800acbc:	460e      	mov	r6, r1
 800acbe:	b921      	cbnz	r1, 800acca <_realloc_r+0x14>
 800acc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acc4:	4611      	mov	r1, r2
 800acc6:	f7ff be0d 	b.w	800a8e4 <_malloc_r>
 800acca:	b922      	cbnz	r2, 800acd6 <_realloc_r+0x20>
 800accc:	f7ff fdbe 	bl	800a84c <_free_r>
 800acd0:	4625      	mov	r5, r4
 800acd2:	4628      	mov	r0, r5
 800acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd6:	f000 f821 	bl	800ad1c <_malloc_usable_size_r>
 800acda:	42a0      	cmp	r0, r4
 800acdc:	d20f      	bcs.n	800acfe <_realloc_r+0x48>
 800acde:	4621      	mov	r1, r4
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff fdff 	bl	800a8e4 <_malloc_r>
 800ace6:	4605      	mov	r5, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	d0f2      	beq.n	800acd2 <_realloc_r+0x1c>
 800acec:	4631      	mov	r1, r6
 800acee:	4622      	mov	r2, r4
 800acf0:	f7fd ffda 	bl	8008ca8 <memcpy>
 800acf4:	4631      	mov	r1, r6
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff fda8 	bl	800a84c <_free_r>
 800acfc:	e7e9      	b.n	800acd2 <_realloc_r+0x1c>
 800acfe:	4635      	mov	r5, r6
 800ad00:	e7e7      	b.n	800acd2 <_realloc_r+0x1c>

0800ad02 <__ascii_wctomb>:
 800ad02:	b149      	cbz	r1, 800ad18 <__ascii_wctomb+0x16>
 800ad04:	2aff      	cmp	r2, #255	; 0xff
 800ad06:	bf8b      	itete	hi
 800ad08:	238a      	movhi	r3, #138	; 0x8a
 800ad0a:	700a      	strbls	r2, [r1, #0]
 800ad0c:	6003      	strhi	r3, [r0, #0]
 800ad0e:	2001      	movls	r0, #1
 800ad10:	bf88      	it	hi
 800ad12:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad16:	4770      	bx	lr
 800ad18:	4608      	mov	r0, r1
 800ad1a:	4770      	bx	lr

0800ad1c <_malloc_usable_size_r>:
 800ad1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad20:	1f18      	subs	r0, r3, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	bfbc      	itt	lt
 800ad26:	580b      	ldrlt	r3, [r1, r0]
 800ad28:	18c0      	addlt	r0, r0, r3
 800ad2a:	4770      	bx	lr

0800ad2c <_init>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	bf00      	nop
 800ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad32:	bc08      	pop	{r3}
 800ad34:	469e      	mov	lr, r3
 800ad36:	4770      	bx	lr

0800ad38 <_fini>:
 800ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3a:	bf00      	nop
 800ad3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3e:	bc08      	pop	{r3}
 800ad40:	469e      	mov	lr, r3
 800ad42:	4770      	bx	lr
